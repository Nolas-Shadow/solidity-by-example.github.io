{"version":3,"sources":["components/logo.svg","components/Header.js","components/Footer.js","components/SEO.js","pages/Home/index.js","components/Html.js","components/Example.js","pages/HelloWorld/index.js","pages/HelloWorld/index.html.js","pages/StateVariables/index.js","pages/StateVariables/index.html.js","pages/SafeMath/index.html.js","pages/SafeMath/index.js","pages/Payable/index.html.js","pages/Payable/index.js","pages/SendingEther/index.html.js","pages/SendingEther/index.js","pages/Fallback/index.html.js","pages/Fallback/index.js","pages/FallbackGasLimit/index.html.js","pages/FallbackGasLimit/index.js","pages/ReEntrancy/index.html.js","pages/ReEntrancy/index.js","pages/SelfDestruct/index.html.js","pages/SelfDestruct/index.js","pages/Events/index.html.js","pages/Events/index.js","pages/Error/index.html.js","pages/Error/index.js","pages/Import/index.html.js","pages/Import/index.js","pages/Function/index.html.js","pages/Function/index.js","pages/FunctionModifier/index.html.js","pages/FunctionModifier/index.js","pages/ViewAndPureFunctions/index.js","pages/ViewAndPureFunctions/index.html.js","pages/Inheritance/index.html.js","pages/Inheritance/index.js","pages/Shadow/index.html.js","pages/Shadow/index.js","pages/Constructor/index.html.js","pages/Constructor/index.js","pages/Super/index.js","pages/Super/index.html.js","pages/Visibility/index.js","pages/Visibility/index.html.js","pages/Loop/index.html.js","pages/Loop/index.js","pages/Enum/index.html.js","pages/Enum/index.js","pages/Mapping/index.html.js","pages/Mapping/index.js","pages/Array/index.html.js","pages/Array/index.js","pages/Structs/index.js","pages/Structs/index.html.js","pages/NewContract/index.html.js","pages/NewContract/index.js","pages/CallingContract/index.html.js","pages/CallingContract/index.js","pages/Call/index.html.js","pages/Call/index.js","pages/Delegatecall/index.html.js","pages/Delegatecall/index.js","pages/Library/index.html.js","pages/Library/index.js","pages/EtherUnits/index.js","pages/EtherUnits/index.html.js","pages/Gas/index.js","pages/Gas/index.html.js","pages/Keccak256/index.html.js","pages/Keccak256/index.js","pages/Signature/index.html.js","pages/Signature/index.js","pages/MultiSigWallet/index.js","pages/MultiSigWallet/index.html.js","pages/Dividend/index.js","pages/Dividend/index.html.js","pages/PaymentChannel/index.html.js","pages/PaymentChannel/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","href","src","logo","alt","Footer","Component","SEO","title","description","name","content","Home","Html","hljsDefineSolidity","hljs","initHighlightingOnLoad","dangerouslySetInnerHTML","__html","this","html","Example","target","SafeMath","Payable","SendingEther","Fallback","FallbackGasLimit","Reentrancy","SelfDestruct","Events","Error","Function","FunctionModifier","Inheritance","Shadow","Constructor","Loop","Enum","Mapping","Array","NewContract","CallingContract","Call","Delegatecall","Library","Keccak256","Signature","PaymentChannel","App","basename","process","path","component","HelloWorld","StateVariables","Import","ReEntrancy","ViewAndPureFunctions","Super","Visibility","Structs","EtherUnits","Gas","MultiSigWallet","Dividend","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e648da4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.da793b47.svg\";","import React from \"react\"\nimport \"./Header.css\"\nimport logo from \"./logo.svg\"\n\nfunction Header(props) {\n  return (\n    <div className=\"Header\">\n      <a href=\"/\">\n        <img src={logo} alt=\"logo\" className=\"Header-logo\" />\n      </a>\n\n      <h3>\n        <a href=\"/\">\n          <div>Solidity by Example</div>\n          <div>version 0.5.3</div>\n        </a>\n      </h3>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { Component } from \"react\"\nimport \"./Footer.css\"\n\nclass Footer extends Component {\n  render() {\n    return (\n      <p className=\"footer\">\n        <a href=\"mailto:contact@solidity-by-example.org\">\n          contact@solidity-by-example.org\n        </a>{\" \"}\n        |{\" \"}\n        <a href=\"https://github.com/solidity-by-example/solidity-by-example.github.io\">\n          source\n        </a>{\" \"}\n        |{\" \"}\n        <a href=\"https://github.com/solidity-by-example/solidity-by-example.github.io/tree/gh-pages#license\">\n          license\n        </a>\n      </p>\n    )\n  }\n}\n\nexport default Footer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nfunction SEO({ title, description }) {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      <meta name=\"Description\" content={description} />\n    </Helmet>\n  )\n}\n\nSEO.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport SEO from \"../../components/SEO\"\nimport \"./index.css\"\n\nfunction Home() {\n  return (\n    <div className=\"Home\">\n      <SEO\n        title=\"Solidity by Example\"\n        description=\"Learn smart contract programming using Solidity\"\n      />\n      <h1 className=\"Home-header\">\n        <a href=\"/\">Solidity by Example</a>\n      </h1>\n      <div className=\"Home-main\">\n        <p>\n          an introduction to{\" \"}\n          <a href=\"https://solidity.readthedocs.io\">Solidity</a> using examples\n        </p>\n\n        <ul className=\"Home-list\">\n          <li>\n            <a href=\"/hello-world\">Hello World</a>\n          </li>\n          <li>\n            <a href=\"/state-variables\">State Variables</a>\n          </li>\n          <li>\n            <a href=\"/ether-units\">Ether and Wei</a>\n          </li>\n          <li>\n            <a href=\"/gas\">Gas and Gas Price</a>\n          </li>\n          <li>\n            <a href=\"/function\">Function</a>\n          </li>\n          <li>\n            <a href=\"/function-modifier\">Function Modifier</a>\n          </li>\n          <li>\n            <a href=\"/view-and-pure-functions\">View and Pure Functions</a>\n          </li>\n          <li>\n            <a href=\"/inheritance\">Inheritance</a>\n          </li>\n          <li>\n            <a href=\"/shadowing-inherited-state-variables\">\n              Shadowing Inherited State Variables\n            </a>\n          </li>\n          <li>\n            <a href=\"/constructor\">Constructor</a>\n          </li>\n          <li>\n            <a href=\"/super\">Calling Parent Contracts</a>\n          </li>\n          <li>\n            <a href=\"/visibility\">Visibility</a>\n          </li>\n          <li>\n            <a href=\"/events\">Events</a>\n          </li>\n          <li>\n            <a href=\"/error\">Error</a>\n          </li>\n          <li>\n            <a href=\"/loop\">Loop</a>\n          </li>\n          <li>\n            <a href=\"/enum\">Enum</a>\n          </li>\n          <li>\n            <a href=\"/mapping\">Mapping</a>\n          </li>\n          <li>\n            <a href=\"/array\">Array</a>\n          </li>\n          <li>\n            <a href=\"/structs\">Structs</a>\n          </li>\n          <li>\n            <a href=\"/new-contract\">Creating Contract from Other Contract</a>\n          </li>\n          <li>\n            <a href=\"/calling-contract\">Calling Other Contract</a>\n          </li>\n          <li>\n            <a href=\"/call\">Call</a>\n          </li>\n          <li>\n            <a href=\"/delegatecall\">Delegatecall</a>\n          </li>\n          <li>\n            <a href=\"/Library\">Library</a>\n          </li>\n          <li>\n            <a href=\"/payable\">Payable</a>\n          </li>\n          <li>\n            <a href=\"/sending-ether\">Sending Ether</a>\n          </li>\n          <li>\n            <a href=\"/fallback\">Fallback</a>\n          </li>\n          <li>\n            <a href=\"/fallback-gas-limit\">Fallback Gas Limit</a>\n          </li>\n          <li>\n            <a href=\"/re-entrancy\">Re-Entrancy</a>\n          </li>\n          <li>\n            <a href=\"/self-destruct\">Self Destruct</a>\n          </li>\n          <li>\n            <a href=\"/hashing\">Hashing with Keccak256</a>\n          </li>\n          <li>\n            <a href=\"/signature\">Verifying Signature</a>\n          </li>\n          <li>\n            <a href=\"/import\">Import</a>\n          </li>\n          <li>\n            <a href=\"/safe-math\">Safe Math</a>\n          </li>\n        </ul>\n\n        <h3>Applications</h3>\n        <ul>\n          <li>\n            <a href=\"/multi-sig-wallet\">Multi-Sig Wallet</a>\n          </li>\n          <li>\n            <a href=\"/dividend\">Dividend</a>\n          </li>\n          <li>\n            <a href=\"/payment-channel\">PaymentChannel</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/foundation.css'\nimport hljsDefineSolidity from 'highlightjs-solidity'\n\nclass Html extends Component {\n  componentDidMount() {\n    hljsDefineSolidity(hljs)\n    hljs.initHighlightingOnLoad()\n  }\n\n  render() {\n    return (\n      <div dangerouslySetInnerHTML={{__html: this.props.html}}>\n      </div>\n    )\n  }\n}\n\nHtml.propTypes = {\n  html: PropTypes.string.isRequired\n}\n\nexport default Html\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport SEO from \"./SEO\"\nimport Html from \"./Html\"\nimport \"./Example.css\"\n\nfunction Example(props) {\n  const { title } = props\n\n  return (\n    <div className=\"Example\">\n      <SEO {...props} title={`${title} | Learn Solidity by Example`} />\n      <h2>{title}</h2>\n\n      <Html html={props.html} />\n\n      <p>\n        Try on{\" \"}\n        <a href=\"https://remix.ethereum.org\" target=\"__blank\">\n          Remix\n        </a>\n      </p>\n    </div>\n  )\n}\n\nExample.propTypes = {\n  title: PropTypes.string.isRequired,\n  html: PropTypes.string.isRequired,\n}\n\nexport default Example\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Hello World\"\n      description=\"Hello World in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p><code>pragma</code> specifies the compiler version of Solidity.</p>\n<pre><code class=\"language-solidity\">// compiler version must be greater than or equal to 0.5.3 and less than 0.6.0\npragma solidity ^0.5.3;\n\ncontract HelloWorld {\n  string public greet = \"Hello World!\";\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"State Variables\"\n      description=\"An example of how to get and set state variables in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Variables stored on the blockchain are called <code>state variables</code>.</p>\n<p><code>State variables</code> are declared inside a contract, but outside functions.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract SimpleStorage {\n    // These varaibles will be stored on the blockchain.\n    string public text = \"Hello\";\n    uint public i = 123;\n\n    function doSomething() public {\n        // These variables will not be stored on the blockchain.\n        string memory text = \"Test\";\n        uint i = 456;\n    }\n\n    // Function to set text.\n    function set(string memory _text) public {\n        text = _text;\n    }\n\n    // Function to get text.\n    // Actually we don&#39;t need this function. The compiler automatically\n    // creates getter functions for all public variables.\n    function get() public view returns (string memory) {\n        return text;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","const html = `<p>Solidity overflow integers as if nothing is wrong. It would be nice if it threw an error.</p>\n<p>So we use <code>SafeMath</code> library by <a href=\"https://openzeppelin.org/\">OpenZeppelin</a>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Import SafeMath library from github (this import only works on Remix).\nimport \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\ncontract Math {\n    // Include the SafeMath library inside this contract\n    using SafeMath for uint;\n\n    // uint is aliase for uint256 (unsigned integer ranging from 0 to 2 ** 256 - 1)\n    uint public max = 2**256 - 1;\n    // Variables initialize to their default value, 0 in this case.\n    uint public min;\n\n    // Try:\n    // add(1, 2)\n    // add(0, -1)\n    function add(uint x, uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Arithmetic overflow does not throw any error.\n    function overflow() public view returns (uint) {\n        return max + 1; // returns 0\n    }\n\n    function underflow() public view returns (uint) {\n        return min - 1; // return 2 ** 256 - 1\n    }\n\n    // SafeMath.add throws an error when an integer overflows.\n    // Try:\n    // safeAdd(2 ** 256 - 1, 1)\n    function safeAdd(uint x, uint y) public view returns (uint) {\n        return x.add(y);\n    }\n\n    // SafeMath.sub throws an error when an integer underflows.\n    // Try:\n    // safeSub(0, 1)\n    function safeSub(uint x, uint y) public view returns (uint) {\n        return x.sub(y);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction SafeMath(props) {\n  return (\n    <Example\n      title=\"Safe Math\"\n      description=\"An example of how to use SafeMath in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default SafeMath\n","const html = `<p>Functions declared <code>payable</code> can receive <code>ether</code> for the contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract ReceiveEther {\n    event Received(address sender, uint amount, uint balance);\n\n    // Get the amount of ethers stored in this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    // Try calling this function along with some ether.\n    // The balance of this contract will be automatically updated.\n    function sendEther() public payable {\n        emit Received(msg.sender, msg.value, address(this).balance);\n    }\n\n    // Try calling this function along with some ether.\n    // The function would throw an error since this function is not payable.\n    function notPayable() public {\n    }\n\n    // Delete this contract and refund all ether stored in this contract to msg.sender.\n    function kill() public {\n        selfdestruct(msg.sender);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Payable(props) {\n  return (\n    <Example\n      title=\"Payable\"\n      description=\"An example of how to use the keyword payable in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Payable\n","const html = `<p>You can send Ether to other contracts by <code>send</code>, <code>transfer</code>, or <code>call</code></p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Contract to receive Ether\ncontract Receiver {\n    // This is a special function called the fallback.\n    // The fallback function declared payable enables other contracts to\n    // send Ether by send, transfer, or call.\n    function () external payable {\n    }\n\n    // Helper function to check balance\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract TestSend {\n    event Log(bool sent);\n\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Send returns a boolean value indicating success or failure.\n        // This function is not recommended for sending Ether.\n        bool sent = addr.send(msg.value);\n\n        // Check the result of send by looking into the transaction logs.\n        emit Log(sent);\n    }\n}\n\ncontract TestTransfer {\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Transfer will throw an error if it fails sending Ether.\n        // This is the safest way (out of send, transfer and call) to send Ether.\n        addr.transfer(msg.value);\n    }\n}\n\ncontract TestCall {\n    event Log(bool sent);\n\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Call returns a boolean value indicating success or failure.\n        // We ignore the second value returned.\n        (bool sent,) = addr.call.value(msg.value)(\"\");\n\n        // Check the result of call by looking into the transaction logs.\n        emit Log(sent);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction SendingEther(props) {\n  return (\n    <Example\n      title=\"Sending Ether (send, transfer, call)\"\n      description=\"An example of sending Ether in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default SendingEther\n","const html = `<p>A <code>fallback function</code> is an anonymous function that does not take any arguments and does not return anything.</p>\n<p>Fallback functions are executed when</p>\n<ul>\n<li>calling a function that does not exist</li>\n<li>sending Ether directly to a contract</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Fallback {\n    event EtherReceived(address sender, uint amount);\n\n    // Fallback function must be declared as external.\n    function () external payable {\n        emit EtherReceived(msg.sender, msg.value);\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract TestFallback {\n    // Try calling test(address of the Fallback contract)\n    function test(Fallback fallback) public payable {\n        // Send Ether to the Fallback contract.\n        address(fallback).transfer(address(this).balance);\n\n        // Calling a function that does not exist in Fallback contract\n        address(fallback).call(abi.encodeWithSignature(\"nonExistingFunction()\"));\n\n        // Check the transaction logs. You will see the event \"EtherReceived\" emitted twice.\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Fallback(props) {\n  return (\n    <Example\n      title=\"Fallback\"\n      description=\"Example of how to use fallback in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Fallback\n","const html = `<p><code>Fallback</code> functions have a 2300 gas limit when called by <code>transfer</code> or <code>send</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract FallbackGasLimit {\n    event BurnGas(uint gasLeft);\n\n    // Try:\n    // Send ether to this contract from an account. This should succeed.\n    function () external payable {\n        // Use up gas by emitting events, logging the remaining gas\n        // on each iteration.\n        for (uint i = 0; i &lt; 10; i++) {\n            emit BurnGas(gasleft());\n        }\n    }\n}\n\ncontract TestFallbackGasLimit {\n    // Try:\n    // Execute this function. This function will fail since\n    // the fallback function of FallbackGasLimit is only allowed to use 2300 gas.\n    function test(FallbackGasLimit fallback) public {\n        address(fallback).transfer(0 ether);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction FallbackGasLimit(props) {\n  return (\n    <Example\n      title=\"Fallback Gas Limit\"\n      description=\"In Solidity fallback functions have a gas limit. Here is an example.\"\n      html={html}\n    />\n  )\n}\n\nexport default FallbackGasLimit\n","const html = `<p>Here is the setup. Contract <code>A</code> calls contract <code>B</code>.</p>\n<p>The <code>re-entracy</code> exploit allows <code>B</code> to call back into <code>A</code> before <code>A</code> finishes\nit&#39;s execution.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Bank is a contract vulnerable to re-entrancy attack. Let&#39;s see why.\n// To illustrate this attack, we will use 2 accounts.\n// First account - Innocent user\n// Second account - Attacker\n\ncontract Bank {\n    mapping(address =&gt; uint) public balances;\n\n    // Using the first account, deposit 1 Ether in to this contract\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint amount) public {\n        if(balances[msg.sender] &gt;= amount) {\n            // Send Ether\n            (bool sent, ) = msg.sender.call.value(amount)(\"\");\n            // Throw an error if send fails.\n            require(sent, \"Failed to send ether\");\n\n            balances[msg.sender] -= amount;\n        }\n    }\n\n    // Helper function to check the total Ether stored in this contract\n    function getTotalBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract Hack {\n    Bank public bank;\n\n    constructor(Bank _bank) public {\n        bank = _bank;\n    }\n\n    // This fallback is called when the Bank contract sends Ether to this contract.\n    function () external payable {\n        if (address(bank).balance &gt;= msg.value) {\n            bank.withdraw(msg.value);\n        }\n    }\n\n    // Try:\n    // Using the second account, call this function sending 1 Ether.\n    function attack() public payable {\n        bank.deposit.value(msg.value)();\n        bank.withdraw(msg.value);\n        // This contract should now have 2 Ethers:\n        // 1 Ether stolen from the first account and\n        // 1 Ether returned to this contract.\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Reentrancy(props) {\n  return (\n    <Example\n      title=\"Re-Entrancy\"\n      description=\"An example of re-entrancy attack in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Reentrancy\n","const html = `<p>Contracts can be deleted from the blockchain by calling <code>selfdestruct</code>.</p>\n<p><code>selfdestruct</code> sends all remainig Ether stored in the contract to an\ndesignated address.</p>\n<p>A malicious contract can use <code>selfdestruct</code> to\nforce send Ether to any contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// To demonstrate how to force sending Ether to another contract:\n// 1. Deploy the SelfDestruct contract, funding 1 Ether.\n// 2. Deploy the Target contract.\n// 3. Execute kill function in SelfDestruct, passing the address of Target as input.\n// 4. Check the balance of Target contract. It should now have 1 Ether.\n\ncontract SelfDestruct {\n    constructor() public payable {\n    }\n\n    function kill(address payable to) public {\n        selfdestruct(to);\n    }\n}\n\ncontract Target {\n    // Notice this contract does not have a payable fallback,\n    // so we should not be able to send Ether to this contract...\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction SelfDestruct(props) {\n  return (\n    <Example\n      title=\"Self Destruct\"\n      description=\"An example of how to delete your smart contract by calling seldestruct in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default SelfDestruct\n","const html = `<p><code>Events</code> allow logging to the Ethereum blockchain. Some use cass for events are:</p>\n<ul>\n<li>Listening for events and updating user interface</li>\n<li>A cheap form of storage</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Event {\n    // Event declaration\n    // Up to 3 parameters can be indexed.\n    // Indexed parameters helps you filter the logs by the indexed parameter\n    event Log(address indexed sender, string message);\n    event AnotherLog();\n\n    function test() public {\n        emit Log(msg.sender, \"Hello World!\");\n        emit Log(msg.sender, \"Hello EVM!\");\n        emit AnotherLog();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Events(props) {\n  return (\n    <Example\n      title=\"Events\"\n      description=\"Example of how to emit events in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Events\n","const html = `<p>You can throw an error by calling <code>assert</code>, <code>require</code> or <code>revert</code>.</p>\n<p>An error will undo all changes made to the state during a transaction.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Error {\n    uint public i;\n\n    // Require should be used to validate conditions such as:\n    // - inputs\n    // - return values from calls to other functions\n    // - return values from calls to other contracts\n    function testRequire(uint j) public {\n        require(j &gt; 100, \"j must be greater than 100\");\n        i += j;\n    }\n\n    // Assert should only be used to test for internal errors,\n    // and to check invariants.\n    // Try: testAssert(-1)\n    function testAssert(uint j) public {\n        i += j;\n        assert(i &gt;= j);\n    }\n\n    // Revert can be used to throw an error.\n    function testRevert(uint j) public {\n        i += j;\n        revert(\"Undoing state changes\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Error(props) {\n  return (\n    <Example\n      title=\"Error\"\n      description=\"Example of how to throw errors in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Error\n","const html = `<p>You can import local and external files in Solidity.</p>\n<h3 id=\"local\">Local</h3>\n<p>Here is our folder structure.</p>\n<pre><code>├── Import.sol\n└── Foo.sol</code></pre><p>Foo.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Foo {\n    string public name = \"Foo\";\n}\n</code></pre>\n<p>Import.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// import Foo.sol from current directory\nimport \"./Foo.sol\";\n\ncontract Import {\n    // Initialize Foo.sol\n    Foo public foo = new Foo();\n\n    // Test Foo.sol by getting it&#39;s name.\n    function getFooName() public view returns (string memory) {\n        return foo.name();\n    }\n}\n</code></pre>\n<h3 id=\"external\">External</h3>\n<p>You can also import from <a href=\"https://github.com\">GitHub</a>, but you need to drop <code>blob/&lt;branch name&gt;</code> from the URL.</p>\n<pre><code class=\"language-solidity\">// https://github.com/owner/repo/blob/master/path/to/Contract.sol\n\nimport \"github.com/owner/repo/path/to/Contract.sol\"</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Events(props) {\n  return (\n    <Example\n      title=\"Import\"\n      description=\"Learn how to import other Solidity files\"\n      html={html}\n    />\n  )\n}\n\nexport default Events\n","const html = `<p>You can interact with a smart contract by calling the functions defined in the contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Function {\n    uint counter;\n\n    // This function costs Ether.\n    function increment(uint i) public {\n        counter += i;\n    }\n\n    // This function is free when it is called from an account.\n    function add(uint i, uint j) public pure returns (uint) {\n        return i + j;\n    }\n\n    // Functions can return multiple values.\n    function returnMultipleVals() public pure returns (uint, uint) {\n        return (1, 2);\n    }\n\n    // Return values can be named. This is useful when a contract\n    // interacts with web3.js where you can access the returned\n    // values by name instead of the returned order.\n    function named() public pure returns (uint x, uint y) {\n        return (1, 2);\n    }\n\n    // Return values can be assigned to their name.\n    // In this case the return statement can be omitted;\n    function assigned() public pure returns (uint x, uint y) {\n        x = 1;\n        y = 2;\n    }\n\n    // Use destructing assignment when calling another\n    // function that returns multiple values.\n    function destructingAssigments() public pure returns (uint) {\n        (uint x, uint y) = (1, 2);\n        // Values can be left out.\n        (uint a, , uint b) = (4, 5, 6);\n        (uint i,) =  returnMultipleVals();\n\n        return x + y + a + b + i;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Function(props) {\n  return (\n    <Example\n      title=\"Function\"\n      description=\"Example of how to write functions in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Function\n","const html = `<p>Modifiers are code that can be run before and / or after a function call.</p>\n<p>Modifiers can be used to:</p>\n<ul>\n<li>Validate inputs</li>\n<li>Check contract state</li>\n<li>Restrict access</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Modifier {\n    // We will use these variables to demonstrate how to use\n    // modifiers.\n    uint public x;\n    address public owner;\n\n    constructor() public {\n        // Set the owner of the contract.\n        owner = msg.sender;\n    }\n\n    // Modifier to check that the caller is the owner of\n    // the contract.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        // Execute the function if the validation above passes.\n        _;\n    }\n\n    // Modifiers can take inputs. This modifier checks that the\n    // address passed in is not the zero address.\n    modifier validAddress(address addr) {\n        require(addr != address(0), \"Invalid address\");\n        _;\n    }\n\n    // Modifiers can be run before and / or after the function.\n    modifier sandwich() {\n        x += 1;\n        _;\n        x += 1;\n    }\n\n    // You can attach multiple modifiers to a function.\n    // In this case the two modifiers onlyOwner and validAddress\n    // will be executed before this function.\n    // Try:\n    // - call this function from an account that did not create\n    //   this contract\n    // - call this function with the zero address:\n    //   0x0000000000000000000000000000000000000000\n    // Both cases will throw an error.\n    function changeOwner(address newOwner)\n        onlyOwner\n        validAddress(newOwner)\n        public\n    {\n        owner = newOwner;\n    }\n\n    // The modifier &#39;sandwich&#39; executes code before and after\n    // this function. As a result, &#39;x&#39; will be incremented by 3.\n    function callMe() sandwich public {\n        x += 1;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction FunctionModifier(props) {\n  return (\n    <Example\n      title=\"Function Modifier\"\n      description=\"Example of function modifiers in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default FunctionModifier\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"View and Pure Functions\"\n      description=\"An example of view and pure functions in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Getter functions can be declared <code>view</code> or <code>pure</code>.</p>\n<p><code>View</code> function declares that no state will be changed.</p>\n<p><code>Pure</code> function declares that no state variable will be read.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract ViewAndPure {\n    uint public x = 1;\n\n    // Promise not to modify the state.\n    function increment(uint a) public view returns (uint) {\n        return x + a;\n    }\n\n    // Promise not to read from or modify the state.\n    function add(uint a, uint b) public pure returns (uint) {\n        return a + b;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","const html = `<p>Solidity supports multiple inheritance. Order of inheritance is important.</p>\n<p>Let&#39;s examine.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    function foo() public view returns (string memory) {\n        return \"A\";\n    }\n}\n\n// Contracts can inherit other contracts by using the keyword &#39;is&#39;.\ncontract B is A {\n    // Override A.foo()\n    function foo() public view returns (string memory) {\n        return \"B\";\n    }\n}\n\ncontract C is A {\n    // Override A.foo()\n    function foo() public view returns (string memory) {\n        return \"C\";\n    }\n}\n\n// Contracts can inherit from multiple parent contracts.\ncontract D is B, C {\n    // When a function is called that is defined multiple times in\n    // different contracts, parent contracts are searched from\n    // right to left.\n\n    // D.foo() returns \"C\"\n}\n\ncontract E is C, B {\n    // E.foo() returns \"B\"\n}\n\n// Inheritance must be ordered from “most base-like” to “most derived”.\n// Swapping the order of A and B will throw a compilation error.\ncontract F is A, B {\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Inheritance(props) {\n  return (\n    <Example\n      title=\"Inheritance\"\n      description=\"Example of inheritance in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Inheritance\n","const html = `<p>Unlike functions, state variables cannot be overridden by re-declaring it\nin the child contract.</p>\n<p>Let&#39;s learn how to correctly override inherited state variables.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    string public name = \"Contract A\";\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n}\n\ncontract B is A {\n    // This is the incorrect way to override inherited state variables.\n    string public name = \"Contract B\";\n\n    // B.getName returns \"Contract A\"\n\n    // Functions defined in contract A that use the &#39;name&#39; state variable\n    // will access A.name. Functions defined in B that uses &#39;name&#39; will\n    // access B.name.\n}\n\ncontract C is A {\n    // This is the correct way to override inherited state variables.\n    constructor() public {\n        name = \"Contract C\";\n    }\n\n    // C.getName returns \"Contract C\"\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Shadow(props) {\n  return (\n    <Example\n      title=\"Shadowing Inherited State Variables\"\n      description=\"An example of shadowing state variables by inheritance\"\n      html={html}\n    />\n  )\n}\n\nexport default Shadow\n","const html = `<p>A <code>constructor</code> is an optional function that is executed upon contract creation.</p>\n<p>Here are examples of how to pass arguments to parent <code>constructors</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    string public name;\n\n    constructor(string memory _name) public {\n        name = _name;\n    }\n}\n\n// There are 2 ways to initialize parent contract with parameters.\n\n// Pass the parameters here in the inheritance list.\ncontract B is A(\"Contract B\") {\n}\n\ncontract C is A {\n    // Pass the parameters here in the constructor, similar to modifiers.\n    constructor(string memory _name) A(_name) public {\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Constructor(props) {\n  return (\n    <Example\n      title=\"Constructor\"\n      description=\"Learn how to initialize smart contracts in Solidity using a constructor\"\n      html={html}\n    />\n  )\n}\n\nexport default Constructor\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Calling Parent Contracts\"\n      description=\"An example of calling parent contracts in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Parent contracts can be called directly, or by using the keyword <code>super</code>.</p>\n<p>By using the keyword <code>super</code>, all of the immediate parent contracts will be called.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    // This is called an event. You can emit events from your function\n    // and they are logged into the transaction log.\n    // In our case, this will be useful for tracing function calls.\n    event Log(string message);\n\n    function doSomething() public {\n        emit Log(\"A.doSomething called\");\n    }\n\n    function doSomethingElse() public {\n        emit Log(\"A.doSomethingElse called\");\n    }\n}\n\ncontract B is A {\n    function doSomething() public {\n        emit Log(\"B.doSomething called\");\n        A.doSomething();\n    }\n    function doSomethingElse() public {\n        emit Log(\"B.doSomethingElse called\");\n        super.doSomethingElse();\n    }\n}\n\ncontract C is A {\n    function doSomething() public {\n        emit Log(\"C.doSomething called\");\n        A.doSomething();\n    }\n\n    function doSomethingElse() public {\n        emit Log(\"C.doSomethingElse called\");\n        super.doSomethingElse();\n    }\n}\n\ncontract D is B, C {\n    // Try:\n    // - Call D.doSomething and check the transaction logs.\n    //   Although D inherits A, B and C, it only called C and then A.\n    // - Call D.doSomethingElse and check the transaction logs\n    //   D called C, then B, and finally A as expected.\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Visibility\"\n      description=\"An example of external, internal, private and public functions in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Functions have to specified as one of <code>external</code>, <code>public</code>, <code>internal</code> or <code>private</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Base {\n    event Log(string visibility);\n\n    // External functions can only be called by other contract\n    // or accounts.\n    function externalFunc() external {\n        emit Log(\"Called a external function\");\n    }\n\n    // Public functions can be called both internally and externally.\n    function publicFunc() public {\n        emit Log(\"Called a public function\");\n    }\n\n    // Private function can only be called internally by this contract\n    // Other contracts inheritting from this contract cannot\n    // call this function.\n    function privateFunc(string memory message) private {\n        emit Log(message);\n    }\n\n    function testPrivateFunc() public {\n        privateFunc(\"Called a private function from Base contract\");\n    }\n\n    // Internal function can only be called internally by this contract\n    // or by other contracts that inherit from this contract.\n    function internalFunc(string memory message) internal {\n        emit Log(message);\n    }\n\n    function testInternalFunc() public {\n        internalFunc(\"Called an internal function from Base contract\");\n    }\n}\n\ncontract TestInternal is Base {\n    // This function will not compile\n    // function testPrivateFunc() public {\n    //     privateFunc(\"Called private function from TestInternal contract\");\n    // }\n\n    function testInternalFunc() public {\n        internalFunc(\"Called an internal function from TestInternal contract\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","const html = `<p>Looping in Solidity is tricky.</p>\n<p>The number of iteration in a loop can grow and spend more gas than the\ngas limit, causing your contract to stall.</p>\n<p>There are two gas limits to keep in mind.</p>\n<ul>\n<li>Transcation gas limit, set by the caller.</li>\n<li>Block gas limit</li>\n</ul>\n<p>Try to avoid writing loops that you cannot estimate the gas consumption.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Loop {\n    uint public count;\n\n    // This is a demonstration of transaction gas limit.\n    // Try:\n    // Set the gas limit to 100000 and loop(100).\n    // It should throw an error after spending all the gas.\n    function loop(uint n) public returns (uint) {\n        for (uint i = 0; i &lt; n; i++) {\n            count++;\n        }\n\n        return count;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Loop(props) {\n  return (\n    <Example\n      title=\"Loop\"\n      description=\"Example of looping in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Loop\n","const html = `<p>Solidity supports enumerables and they are useful to keep track of state.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Shipping {\n    // Order matters\n    enum Status {\n        Pending,\n        Shipping,\n        Delivered,\n        Cancelled\n    }\n\n    Status public status;\n\n    // Try:\n    // - execute ship() and then confirmDelivery()\n    // - re-deploy the contract and execute cancel()\n    // Any other order of execution fails.\n\n    function ship() public {\n        require(status == Status.Pending);\n        status = Status.Shipping;\n    }\n\n    function confirmDelivery() public {\n        require(status == Status.Shipping);\n        status = Status.Delivered;\n    }\n\n    function cancel() public {\n        require(status == Status.Pending);\n        status = Status.Cancelled;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Enum(props) {\n  return (\n    <Example\n      title=\"Enum\"\n      description=\"Example of enums in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Enum\n","const html = `<p>Maps are created with the syntax <code>mapping(keyType =&gt; valueType)</code>.</p>\n<p><code>keyType</code> can be value types such as <code>uint</code>, <code>address</code> or <code>bytes</code>.</p>\n<p><code>valueType</code> can be any type.</p>\n<p>Mappings are not iterable.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Mapping {\n    // Mapping from address to uint\n    mapping(address =&gt; uint) public balances;\n    // Nested mapping\n    mapping(address =&gt; mapping(address =&gt; uint)) public allowance;\n\n    function mint(uint amount) public {\n        // Updating mapping values\n        balances[msg.sender] += amount;\n    }\n\n    function burn() public {\n        // Deleting mapping values\n        delete balances[msg.sender];\n    }\n\n    function approve(address to, uint amount) public {\n        // Accessing and setting nested map values\n        allowance[msg.sender][to] = amount;\n    }\n\n    function transferFrom(address from, address to, uint amount) public {\n        require(balances[from] &gt;= amount, \"Insufficient funds\");\n        require(allowance[from][to] &gt;= amount, \"Not allowed\");\n\n        balances[from] -= amount;\n        balances[to] += amount;\n\n        allowance[from][to] -= amount;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Mapping(props) {\n  return (\n    <Example\n      title=\"Mapping\"\n      description=\"Example of using mapping in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Mapping\n","const html = `<p>Array can have a compile-time fixed size or a dynamic size.</p>\n<p>Solidity creates a <code>getter</code> for <code>public</code> arrays.</p>\n<p>Deleting an element creates a gap in the array. One trick to keep the array</p>\n<p>compact is to move the last element into the place to delete.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Array {\n    // Several ways to initialize an array\n    uint[] public myArr;\n    uint[] public myArr2 = [1,2,3];\n\n    uint[10] public myFixedArr;\n\n    function arrayFuncs() public returns (uint) {\n        // Append 1 to the array\n        myArr.push(1);\n        return myArr[myArr.length - 1];\n    }\n}\n\ncontract CompactArray {\n    address[] public addresses;\n\n    function remove(uint index) public {\n        // Move the last element into the place to delete\n        addresses[index] = addresses[addresses.length - 1];\n\n        // Remove the last element\n        addresses.pop();\n        // This has the same effect has deleting the last element.\n        // addresses.length--;\n    }\n\n    function test() public {\n        addresses.push(address(1));\n        addresses.push(address(2));\n        addresses.push(address(3));\n\n        remove(1);\n\n        assert(addresses.length == 2);\n        assert(addresses[0] == address(1));\n        assert(addresses[1] == address(3));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Array(props) {\n  return (\n    <Example\n      title=\"Array\"\n      description=\"Learn about arrays in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Array\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Structs\"\n      description=\"An example of how to use structs in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>You can define your own type by creating a <code>struct</code>.</p>\n<p>They are useful for grouping togther related data.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Todos {\n    struct Todo {\n        string text;\n        bool completed;\n    }\n\n    // An array of &#39;Todo&#39; structs\n    Todo[] public todos;\n\n    function create(string memory text) public {\n        todos.push(Todo({\n            text: text,\n            completed: false\n        }));\n    }\n\n    function toggleCompleted(uint index) public {\n        Todo storage todo = todos[index];\n        todo.completed = !todo.completed;\n    }\n\n    // Solidity automatically created a getter for&#39; todos&#39; so\n    // you don&#39;t actually need this function.\n    function getTodo(uint index)\n        public\n        view\n        returns (string memory text, bool completed)\n    {\n        Todo storage todo = todos[index];\n        return (todo.text, todo.completed);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","const html = `<p>Contracts can be created by other contracts using the <code>new</code> keyword.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Car {\n    address public owner;\n    string public name;\n\n    constructor(address _owner, string memory _name) public payable {\n        owner = _owner;\n        name = _name;\n    }\n}\n\ncontract CarFactory {\n    Car public car = new Car(msg.sender, \"Carol\");\n\n    Car[] public cars;\n\n    function create(string memory name) public {\n        Car c = new Car(msg.sender, name);\n        cars.push(c);\n    }\n\n    function createAndSendEther(string memory name) public payable {\n        // Send ether along with the creation\n        Car c = (new Car).value(msg.value)(msg.sender, name);\n        cars.push(c);\n    }\n\n    function getCar(uint index)\n      public\n      view\n      returns (address owner, string memory name, uint balance)\n    {\n        Car c = cars[index];\n\n        return (c.owner(), c.name(), address(c).balance);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction NewContract(props) {\n  return (\n    <Example\n      title=\"Creating Contract from Other Contract\"\n      description=\"Learn how to create new contract from inside a contract with Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default NewContract\n","const html = `<p>Contract can call other contracts in 2 ways.</p>\n<p>The easiest way to is to just call it, like <code>A.foo(x, y, z)</code>.</p>\n<p>Another way to call other contracts is to use the low-level <code>call</code>.</p>\n<p>This method is not recommended.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    uint public x;\n\n    function setX(uint _x) public returns (uint) {\n        x = _x;\n        return x;\n    }\n}\n\ncontract B {\n    function setX(A a, uint x) public returns (uint) {\n        return a.setX(x);\n    }\n\n    function getX(A a) public view returns (uint) {\n        return a.x();\n    }\n}\n\ncontract C {\n  function setX(A a, uint x) public returns (bytes memory) {\n    // low-level way to call another contract\n    // This method is useful when you want to call an arbitrary contract.\n    (bool success, bytes memory returnData) = address(a).call(\n      abi.encodeWithSignature(\"setX(uint256)\", x);\n    );\n    require(success);\n\n    return returnData;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction CallingContract(props) {\n  return (\n    <Example\n      title=\"Calling Other Contract\"\n      description=\"In Solidity, contract can call other contracts in several ways.\"\n      html={html}\n    />\n  )\n}\n\nexport default CallingContract\n","const html = `<p><code>call</code> is a low level function to interact with other contracts.</p>\n<p>This is not the recommend way, but this might be the only way if your contract</p>\n<p>does not have the ABI for the other contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    event Received(address caller, uint amount, string message);\n\n    function () external payable {\n        emit Received(msg.sender, msg.value, \"Called fallback\");\n    }\n\n    function callMe(string memory message) public payable {\n        emit Received(msg.sender, msg.value, message);\n    }\n}\n\ncontract B {\n    event Response(bool success, bytes returnedData);\n\n    // Let&#39;s imagine that contract B does not have the source code for\n    // contract A, but we do know the address of A and the function to call.\n    function callA(address a) public payable {\n        // You can send ether and specify a custom gas amount\n         (bool success, bytes memory returnData) = a.call\n            .value(address(this).balance)\n            .gas(5000)(\n                abi.encodeWithSignature(\"callMe(string)\", \"Call me back\")\n            );\n\n         emit Response(success, returnData);\n    }\n\n    // Calling a function that does not exist triggers the fallback function.\n    function callDoesNotExist(address a) public payable {\n         (bool success, bytes memory returnData) = a.call(\n                abi.encodeWithSignature(\"doesNotExist()\")\n            );\n\n         emit Response(success, returnData);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Call(props) {\n  return (\n    <Example\n      title=\"Call\"\n      description=\"In Solidity call is a low level function to interact with other contracts.\"\n      html={html}\n    />\n  )\n}\n\nexport default Call\n","const html = `<p><code>delegatecall</code> is a low level function similar to <code>call</code>.</p>\n<p>When contract <code>A</code> executes <code>delegatecall</code> to contract <code>B</code>, <code>B</code>&#39;s code is excuted</p>\n<p>with contract <code>A</code>&#39;s storage, <code>msg.sender</code> and <code>msg.value</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Firts deploy this contract\ncontract B {\n  uint public n;\n  address public sender;\n  uint public value;\n\n  function setN(uint _n) public payable {\n    n = _n;\n    sender = msg.sender;\n    value = msg.value;\n  }\n}\n\ncontract A {\n  uint public n;\n  address public sender;\n  uint public value;\n\n  function delegatecallSetN(address b, uint _n) public payable {\n    // A&#39;s storage is set, B is not modified.\n    (bool success, bytes memory returnData) = b.delegatecall(\n      abi.encodeWithSignature(\"setN(uint256)\", _n)\n    );\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Delegatecall(props) {\n  return (\n    <Example\n      title=\"Delegatecall\"\n      description=\"Example of how to use deletegatecall in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Delegatecall\n","const html = `<p>Libraries are similar to contracts, but they are deployed only once at a</p>\n<p>specific address and their code is reused using the <code>delegatecall</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\nlibrary MyLib {\n    function incrementBy(uint i, uint val) public pure returns (uint) {\n        return i + val;\n    }\n\n    // Array function to delete element at index and re-organize the array\n    // so that their are no gaps between the elements.\n    function deleteElement(string[] storage arr, uint index) internal {\n        // Move the last element into the place to delete\n        arr[index] = arr[arr.length - 1];\n\n        // Remove the last element\n        arr.pop();\n    }\n}\n\ncontract TestMyLib {\n    using MyLib for uint;\n    using MyLib for string[];\n\n    string[] public array = [\"foo\", \"bar\"];\n\n    function testIncrementBy() public pure returns (uint) {\n        uint i = 10;\n\n        return i.incrementBy(10);\n    }\n\n    function testDeleteElement() public {\n        array.push(\"abc\");\n        array.deleteElement(1);\n        // array should now be [\"foo\", \"abc\"]\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Library(props) {\n  return (\n    <Example\n      title=\"Library\"\n      description=\"Example of how to write and use libraries in your Solidity code\"\n      html={html}\n    />\n  )\n}\n\nexport default Library\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Ether and Wei\"\n      description=\"An example of Ether and Wei in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>One dollar is equal to 100 cent.</p>\n<p>Similarly, one <code>Ether</code> is equal to 10^18 <code>Wei</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract EtherUnits {\n  uint public oneWei = 1 wei;\n  uint public oneEther = 1 ether;\n\n  function testOneWei() public pure returns (bool) {\n    return 1 wei == 1;\n  }\n\n  function testOneEther() public pure returns (bool) {\n    return 1 ether == 1e18 wei;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Gas and Gas Price\"\n      description=\"An example of gas and gas limit in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Transactions run on <code>gas</code>. You pay <code>gas price * gas</code> in Ether.</p>\n<p>You specify the gas price.</p>\n<p>Transactions with higher gas price will be processed faster.</p>\n<p>Unspent gas will be refunded.</p>\n<p>There are two upper bounds to the amount of gas you can spend</p>\n<ul>\n<li>gas limit set by you (how much you are willing to pay for the transaction)</li>\n<li>maximum amount of gas allowed in a block set by the network</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Gas {\n  // Transactions spend gas even if it does nothing.\n  function doNothing() public {}\n\n  // Getter functions cost no gas when called by either\n  // - an external account\n  // - other getter functions inside this contract\n  // - other getter functions from another contract\n  function getNothing() public pure {}\n\n  // In a transaction, you pay for the total gas used by the function.\n  // If a function calls two other functions,\n  // - a getter function and\n  // - a function to create a transaction,\n  // then you pay for the total gas used by the two functions.\n  function getNothingAndDoNothing() public {\n    getNothing();\n    doNothing();\n  }\n\n  // Transaction costs in ether = gas price * gas used\n  // Unspent gas are refunded.\n  function testGasRefund() public returns (uint) {\n    return tx.gasprice;\n  }\n\n  // Using up all the gas causes an error and reverts state changes.\n  // Gas spent are not refunded.\n  uint public i = 0;\n\n  function burn() public {\n    while(gasleft() &gt; 0) {\n      i += 1;\n    }\n  }\n\n  // Block gas limit\n  function getBlockGasLimit() public view returns (uint) {\n    return block.gaslimit;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","const html = `<p><code>keccak256</code> computes the Keccak-256 hash of the input.</p>\n<p>Some use cases are:</p>\n<ul>\n<li>Creating an deterministic unique ID from a input</li>\n<li>Commit-Reveal scheme</li>\n<li>Compact cryptographic signature (by signing the hash instead of a larger input)</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Keccak256 {\n  struct Todo {\n    string text;\n    uint createdAt;\n  }\n\n  // Example to create an ID using keccak256\n  function getTodoId() public pure returns (uint) {\n    Todo memory todo = Todo({\n      text: \"Creawte Todo ID\",\n      createdAt:123456\n    });\n\n    return uint(keccak256(abi.encodePacked(todo.text, todo.createdAt)));\n  }\n\n  // Example of commit-reveal scheme\n  // Try:\n  // 1. create a commitment hash by calling getCommitmentHash(your address, \"Trump\")\n  // 2. commit(hash returned from previous step)\n  // 3. revel(your address, \"Trump\", your commitment hash) should return true\n  // You have successfully voted without revealing your choice.\n  struct Vote {\n    address voter;\n    string candidate;\n  }\n\n  mapping(bytes32 =&gt; bool) public voted;\n\n  function getCommitmentHash(address voter, string memory candidate)\n    public\n    view\n    returns (bytes32)\n  {\n    Vote memory vote = Vote({\n      voter: voter,\n      candidate: candidate\n    });\n\n    return keccak256(abi.encodePacked(vote.voter, vote.candidate));\n  }\n\n  function commit(bytes32 commitmentHash) public {\n    voted[commitmentHash] = true;\n  }\n\n  function reveal(\n    address voter, string memory candidate, bytes32 commitmentHash\n  )\n    public\n    view\n    returns (bool)\n  {\n    bytes32 hash = getCommitmentHash(voter, candidate);\n\n    require(voted[hash], \"Voter has not voted\");\n    require(hash == commitmentHash, \"Invalid commitment hash\");\n\n    return true;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Keccak256(props) {\n  return (\n    <Example\n      title=\"Hashing with Keccak256\"\n      description=\"Example of hashing using Keccak256 in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Keccak256\n","const html = `<p>Messages can be signed off chain and then verified on chain using a smart contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity 0.5.3;\n\ncontract VerifySignature {\n  // Signature is produced by signing a hash with the following format:\n  // - prefix of \"\\\\x19Ethereum Signed Message\\\\n\"\n  // - length of message\n  // - actual message\n  function getHash() public pure returns (bytes32) {\n    // Here we are computing the hash of \"Hello World\", which has length 11.\n    return keccak256(abi.encodePacked(\"\\\\x19Ethereum Signed Message:\\\\n11\", \"Hello World\"));\n  }\n\n  // Let&#39;s sign \"Hello World\" (without quotes) using Remix\n  // You will see a dialog box with the following output\n\n  // hash\n  // 0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2\n  // signature (this will be different depending on the account)\n  // 0x16a16577ba9ac82469ce52db5ea70f622c644006a343649d2b3775ac1470bc49394479b4f97a5baefe82abad836e4648f31c59c564652ea735a8c17d1204f37300\n\n  // Next we recover the signer from the hash and signature.\n  // Execute this function below inputting the hash and your signature.\n\n  // If the signature or hash is valid the function will return\n  // the address of the signer, otherwise a zero address.\n  function recoverSigner(bytes32 _hash, bytes memory _signature)\n    public\n    pure\n    returns (address)\n  {\n    // Splitting the signature. We can ignore the details.\n    (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\n\n    // There is a bug in Remix IDE, so we fix &#39;v&#39; to the expected value,  0x1b\n    // return ecrecover(_hash, v, r, s);\n    return ecrecover(_hash, 0x1b, r, s);\n  }\n\n  function splitSignature(bytes memory sig)\n    public\n    pure\n    returns (uint8 v, bytes32 r, bytes32 s)\n  {\n    require(sig.length == 65);\n\n    assembly {\n      // first 32 bytes, after the length prefix\n      r := mload(add(sig, 32))\n      // second 32 bytes\n      s:= mload(add(sig, 64))\n      // final byte (first byte of the next 32 bytes)\n      v := byte(0, mload(add(sig, 0)))\n    }\n\n    return (v, r, s);\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Signature(props) {\n  return (\n    <Example\n      title=\"Verifying Signature\"\n      description=\"An example of how to verify signatures in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Signature\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Multi-Sig Wallet\"\n      description=\"An example of multi-sig wallet in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Let&#39;s create an multi-sig wallet. Here are the specifications.</p>\n<p>The wallet owners can</p>\n<ul>\n<li>create transaction</li>\n<li>sign and unsign pending transcations</li>\n</ul>\n<p>Anyone can process a transcation after enough owners has signed it.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract MultiSigWallet {\n  event Deposit(address indexed sender, uint value);\n  event TxCreated(\n    uint indexed txId,\n    address indexed owner,\n    address indexed to,\n    uint value\n  );\n  event TxSigned(uint indexed txId, address indexed signer);\n  event TxUnsigned(uint indexed txId, address indexed signer);\n  event TxExecuted(uint indexed txId, address indexed caller);\n\n  mapping(address =&gt; bool) public isOwner;\n  address[] public owners;\n  uint public numSigsRequired;\n\n  struct Tx {\n    address payable to;\n    uint value;\n    bytes data;\n  }\n\n  uint public txCount;\n  // mapping from txId to Tx\n  mapping(uint =&gt; Tx) public transactions;\n\n  // mapping from txId -&gt; owner address -&gt; bool\n  // set to true after a owner has signed a transaction\n  mapping(uint =&gt; mapping(address =&gt; bool)) public signed;\n  // mapping from txId to signature count\n  mapping(uint =&gt; uint) public sigCount;\n  // mapping from txId to boolean value set to true after a transaction has\n  // been executed\n  mapping(uint =&gt; bool) public executed;\n\n  constructor(address[] memory _owners, uint _numSigsRequired) public {\n    require(_numSigsRequired &gt; 0, \"number of signatures required must be &gt; 0\");\n    require(\n      _owners.length &gt;= _numSigsRequired,\n      \"owners must be &gt; number of required signatures\"\n    );\n\n    for (uint i = 0; i &lt; _owners.length; i++) {\n      require(!isOwner[_owners[i]], \"Duplicate owner\");\n      require(_owners[i] != address(0), \"Invalid owner\");\n\n      isOwner[_owners[i]] = true;\n    }\n\n    owners = _owners;\n    numSigsRequired = _numSigsRequired;\n  }\n\n  modifier onlyOwner() {\n    require(isOwner[msg.sender], \"Not owner\");\n    _;\n  }\n\n  modifier onlyExisting(uint txId) {\n    require(txExists(txId), \"Tx does not exist\");\n    _;\n  }\n\n  modifier notExecuted(uint txId) {\n    require(!executed[txId], \"Tx already executed\");\n    _;\n  }\n\n  modifier notSigned(uint txId) {\n    require(!signed[txId][msg.sender], \"Tx already signed\");\n    _;\n  }\n\n  function () external payable {\n    if (msg.value &gt; 0) {\n      emit Deposit(msg.sender, msg.value);\n    }\n  }\n\n  function createTx(address payable to, uint value, bytes memory data) public onlyOwner {\n    require(to != address(0), \"Invalid address\");\n\n    require(txCount + 1 &gt; txCount, \"txCount uint overflow\");\n    txCount += 1;\n\n    transactions[txCount] = Tx({\n      to: to,\n      value: value,\n      data: data\n    });\n\n    emit TxCreated(txCount, msg.sender, to, value);\n  }\n\n  function txExists(uint txId) public view returns (bool) {\n    return transactions[txId].to != address(0);\n  }\n\n  function getTx(uint txId)\n    public\n    view\n    onlyExisting(txId)\n    returns (address to, uint value, bytes memory data)\n  {\n    // &#39;tx&#39; is global variable so we name ours &#39;txn&#39;\n    Tx storage txn = transactions[txId];\n\n    return (txn.to, txn.value, txn.data);\n  }\n\n  function getSigCount(uint txId)\n    public\n    view\n    onlyExisting(txId)\n    returns (uint)\n  {\n    uint count;\n\n    for (uint i = 0; i &lt; owners.length; i++) {\n      if (signed[txId][owners[i]]) {\n        count += 1;\n      }\n    }\n\n    return count;\n  }\n\n  function signTx(uint txId)\n    public\n    onlyOwner\n    onlyExisting(txId)\n    notExecuted(txId)\n    notSigned(txId)\n  {\n    signed[txId][msg.sender] = true;\n    sigCount[txId] += 1;\n\n    emit TxSigned(txId, msg.sender);\n  }\n\n  function unsignTx(uint txId)\n    public\n    onlyOwner\n    onlyExisting(txId)\n    notExecuted(txId)\n  {\n    require(signed[txId][msg.sender], \"Tx not signed\");\n\n    signed[txId][msg.sender] = false;\n    sigCount[txId] -= 1;\n\n    emit TxUnsigned(txId, msg.sender);\n  }\n\n  function canExecuteTx(uint txId) public view returns (bool) {\n    return sigCount[txId] &gt;= numSigsRequired;\n  }\n\n  function executeTx(uint txId)\n    public\n    onlyExisting(txId)\n    notExecuted(txId)\n  {\n    require(canExecuteTx(txId), \"Cannot execute tx yet\");\n\n    Tx storage txn = transactions[txId];\n    executed[txId] = true;\n\n    (bool success,) = txn.to.call.value(txn.value)(txn.data);\n    require(success, \"Failed to execute transaction\");\n\n    emit TxExecuted(txId, msg.sender);\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return <Example title=\"Dividend\" description=\"Dividend\" html={html} />\n}\n","const html = `<p>A contract that pays dividend to shareholders should</p>\n<ul>\n<li>receive payment</li>\n<li>for simplicity, have a fixed distribution of shares</li>\n<li>shareholders can withdraw dividend at any time</li>\n</ul>\n<p>We let the user withdraw their dividend. For more information about <code>Push vs Pull</code> contract design, check out <a href=\"https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls\">here</a></p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Dividend {\n    event AddShareholder(address indexed account, uint shares);\n    event Deposit(address indexed sender, uint amount);\n    event Withdraw(address indexed account, uint amount);\n\n    uint public totalShares;\n    mapping(address =&gt; uint) public shares;\n\n    // We keep track of withdrawn amount so that the amount a shareholder can\n    // withdraw can be calculated.\n    uint public totalWithdrawn;\n    mapping(address =&gt; uint) withdrawn;\n\n    constructor(address[] memory _shareholders, uint[] memory _shares) public {\n        require(_shareholders.length &gt; 0, \"Shareholder addresses required\");\n        require(_shareholders.length == _shares.length, \"shareholders.length != shares.length\");\n\n        for (uint i = 0; i &lt; _shareholders.length; i++) {\n            _addShareholder(_shareholders[i], _shares[i]);\n        }\n    }\n\n    function () external payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    // Warning: For simplicity, we skip checks on arithmetic overflows.\n    function withdraw(address payable account) public {\n        require(shares[account] &gt; 0, \"Not a shareholder\");\n\n        uint totalReceived = address(this).balance + totalWithdrawn;\n\n        uint amount = totalReceived * shares[account] / totalShares - withdrawn[account];\n\n        require(amount &gt; 0, \"Payment amount must be &gt; 0\");\n\n        withdrawn[account] += amount;\n        totalWithdrawn += amount;\n\n        account.transfer(amount);\n\n        emit Withdraw(account, amount);\n    }\n\n    // Helper function to get balance of this contract.\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    // Private function to add shareholder.\n    function _addShareholder(address _account, uint _shares) private {\n        require(_account != address(0), \"Invalid shareholder address\");\n        require(_shares &gt; 0, \"Shares must be &gt; 0\");\n        require(shares[_account] == 0, \"Shareholder already added\");\n\n        shares[_account] = _shares;\n        totalShares += _shares;\n\n        emit AddShareholder(_account, _shares);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","const html = `<p>Payment channels allow participants to repeatedly transfer Ether off chain.</p>\n<p>Here is how this contract is used:</p>\n<ul>\n<li><code>Alice</code> deploys the contract, funding it with some Ether.</li>\n<li><code>Alice</code> authorises a payment by signing a message (off chain) and sends the signed message to <code>Bob</code>.</li>\n<li><code>Bob</code> claims his payment by presenting the signed message to the smart contract.</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract PaymentChannel {\n  address payable public sender;\n  address payable public recipient;\n  uint public expiration;\n\n  constructor(address payable _recipient, uint duration) public payable {\n    sender = msg.sender;\n    recipient = _recipient;\n    expiration = now + duration;\n  }\n\n  function isValidSignature(uint amount, bytes memory signature)\n    internal\n    view\n    returns (bool)\n  {\n    bytes32 message = prefixed(keccak256(abi.encodePacked(this, amount)));\n\n    return recoverSigner(message, signature) == sender;\n  }\n\n  // The recipient can close the channel at any time by presenting a\n  // signed amount from the sender. The recipient will be sent that amount,\n  // and the remainder will go back to the sender\n  function close(uint amount, bytes memory signature) public {\n    require(msg.sender == recipient);\n    require(isValidSignature(amount, signature));\n\n    recipient.transfer(amount);\n    selfdestruct(sender);\n  }\n\n  // Sender can extend the expiration at any time\n  function extend(uint newExpiration) public {\n    require(msg.sender == sender);\n    require(newExpiration &gt; expiration);\n\n    expiration = newExpiration;\n  }\n\n  // If the timeout is reached without the recipient closing the channel,\n  // then the Ether is released back to the sender.\n  function claimTimeout() public {\n    require(now &gt;= expiration);\n    selfdestruct(sender);\n  }\n\n  function recoverSigner(bytes32 message, bytes memory sig)\n    internal\n    pure\n    returns (address)\n  {\n    (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\n\n    // If you are using Remix IDE, you may need to hard code\n    // v = 0x1b, due to a bug\n    return ecrecover(message, v, r, s);\n  }\n\n  /// builds a prefixed hash to mimic the behavior of eth_sign.\n  function prefixed(bytes32 hash) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(\"\\\\x19Ethereum Signed Message:\\\\n32\", hash));\n  }\n\n  function splitSignature(bytes memory sig)\n    internal\n    pure\n    returns (uint8 v, bytes32 r, bytes32 s)\n  {\n    require(sig.length == 65);\n\n    assembly {\n      // first 32 bytes, after the length prefix\n      r := mload(add(sig, 32))\n      // second 32 bytes\n      s := mload(add(sig, 64))\n      // final byte (first byte of the next 32 bytes)\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    return (v, r, s);\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction PaymentChannel(props) {\n  return (\n    <Example\n      title=\"Payment Channel\"\n      description=\"An example of payment channels in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default PaymentChannel\n","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport \"./App.css\"\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport Home from \"./pages/Home\"\nimport HelloWorld from \"./pages/HelloWorld\"\nimport StateVariables from \"./pages/StateVariables\"\nimport SafeMath from \"./pages/SafeMath\"\nimport Payable from \"./pages/Payable\"\nimport SendingEther from \"./pages/SendingEther\"\nimport Fallback from \"./pages/Fallback\"\nimport FallbackGasLimit from \"./pages/FallbackGasLimit\"\nimport ReEntrancy from \"./pages/ReEntrancy\"\nimport SelfDestruct from \"./pages/SelfDestruct\"\nimport Events from \"./pages/Events\"\nimport Error from \"./pages/Error\"\nimport Import from \"./pages/Import\"\nimport Function from \"./pages/Function\"\nimport FunctionModifier from \"./pages/FunctionModifier\"\nimport ViewAndPureFunctions from \"./pages/ViewAndPureFunctions\"\nimport Inheritance from \"./pages/Inheritance\"\nimport Shadow from \"./pages/Shadow\"\nimport Constructor from \"./pages/Constructor\"\nimport Super from \"./pages/Super\"\nimport Visibility from \"./pages/Visibility\"\nimport Loop from \"./pages/Loop\"\nimport Enum from \"./pages/Enum\"\nimport Mapping from \"./pages/Mapping\"\nimport Array from \"./pages/Array\"\nimport Structs from \"./pages/Structs\"\nimport NewContract from \"./pages/NewContract\"\nimport CallingContract from \"./pages/CallingContract\"\nimport Call from \"./pages/Call\"\nimport Delegatecall from \"./pages/Delegatecall\"\nimport Library from \"./pages/Library\"\nimport EtherUnits from \"./pages/EtherUnits\"\nimport Gas from \"./pages/Gas\"\nimport Keccak256 from \"./pages/Keccak256\"\nimport Signature from \"./pages/Signature\"\nimport MultiSigWallet from \"./pages/MultiSigWallet\"\nimport Dividend from \"./pages/Dividend\"\nimport PaymentChannel from \"./pages/PaymentChannel\"\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App-main\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route path=\"/hello-world\" component={HelloWorld} />\n            <Route path=\"/state-variables\" component={StateVariables} />\n            <Route path=\"/import\" component={Import} />\n            <Route path=\"/safe-math\" component={SafeMath} />\n            <Route path=\"/events\" component={Events} />\n            <Route path=\"/error\" component={Error} />\n            <Route path=\"/sending-ether\" component={SendingEther} />\n            <Route path=\"/payable\" component={Payable} />\n            <Route path=\"/fallback\" component={Fallback} />\n            <Route path=\"/fallback-gas-limit\" component={FallbackGasLimit} />\n            <Route path=\"/re-entrancy\" component={ReEntrancy} />\n            <Route path=\"/self-destruct\" component={SelfDestruct} />\n            <Route path=\"/function\" component={Function} />\n            <Route path=\"/function-modifier\" component={FunctionModifier} />\n            <Route\n              path=\"/view-and-pure-functions\"\n              component={ViewAndPureFunctions}\n            />\n            <Route path=\"/inheritance\" component={Inheritance} />\n            <Route\n              path=\"/shadowing-inherited-state-variables\"\n              component={Shadow}\n            />\n            <Route path=\"/constructor\" component={Constructor} />\n            <Route path=\"/super\" component={Super} />\n            <Route path=\"/visibility\" component={Visibility} />\n            <Route path=\"/loop\" component={Loop} />\n            <Route path=\"/enum\" component={Enum} />\n            <Route path=\"/mapping\" component={Mapping} />\n            <Route path=\"/array\" component={Array} />\n            <Route path=\"/structs\" component={Structs} />\n            <Route path=\"/new-contract\" component={NewContract} />\n            <Route path=\"/calling-contract\" component={CallingContract} />\n            <Route path=\"/call\" component={Call} />\n            <Route path=\"/delegatecall\" component={Delegatecall} />\n            <Route path=\"/library\" component={Library} />\n            <Route path=\"/ether-units\" component={EtherUnits} />\n            <Route path=\"/gas\" component={Gas} />\n            <Route path=\"/hashing\" component={Keccak256} />\n            <Route path=\"/signature\" component={Signature} />\n            <Route path=\"/multi-sig-wallet\" component={MultiSigWallet} />\n            <Route path=\"/dividend\" component={Dividend} />\n            <Route path=\"/payment-channel\" component={PaymentChannel} />\n            <Route component={Home} />\n          </Switch>\n        </Router>\n      </div>\n      <div className=\"App-footer\">\n        <Footer />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}